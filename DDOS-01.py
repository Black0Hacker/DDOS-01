import base64
x=("import base64
x=("aW1wb3J0IGJhc2U2NAp4PSgiYVcxd2IzSjBJR0poYzJVMk5BcDRQU2dpWVZjeGQySXpTakJKUjBwb1l6SlZNazVCY0RSUVUyZHBXVlpqZUdReVNYcFRha0pLVWpCd2IxbDZTbFpOYXpWQ1kwUlNVVlV5WkhCWFZscHFaVWRSZVZOWWNGUmhhMHBMVldwQ2QySXhiRFpUYkZwT1lYcFdRMWt3VWxOVlZsVjVXa2hDV0Zac2NIRmFWV1JTWlZaT1dXTkdVbWhoTUhCTVZsZHdRMlF5U1hoaVJGcFVZa1p3VDFsWWNGZFJNV3QzVld4T1ZsWnNWalZYYTJoRFYwWmFjMk5JUm1GV1YxSlRXbFphVDFkWFRrZFZiV2hvVFVoQ1RWWnNZekZrTWsxM1RsaE9WR0V5VWxSWmJURlRZMVpXY1ZGdVpGaGlSbHBaVkd4a1IyRkhTbFpqU0hCV1lsUkJlRll5YzNoalZrcHpZVWRHVjFZeFNsVldha0poV1ZkU1dGUnJhR3RTYkVwVVZtdFdZVlZXV2xkVmEzQnNVbTE0V1ZadGVHOVdSbVJJWlVVNVZtRnJjRlJYVmxwVFYwZE9TVlJyTlZkaVZrcFhWbXRrTkdFeVNrZFhXR1JQVmtWS1dGbHNVbGRYUm14VlVtdGtUMkpHY0RGV1Z6RkhWVEpLV0dGR1ZsZFNiSEJ5VmtSS1UxSXhaSFZXYlhCVFYwVktWVlpHWXpGaWJWRjRXa1pXVW1KWVFsQldha1poVjFaYVdHUkdUbFppVlhCSVZqSXdOVlpyTVVkWGFrNWFaV3RhY2xacVJuZFNNVkp6VjJ4a1RsSXpZM2hXYTFKSFlqRlJlRlpZYUdGU1YyaHZWVEJWTVZkV1duSldWRVpZVW14S1YxZHJWbmRpUjBwR1RsWmtWV0pHV2xSWlZscGFaV3h2ZWxwR2FGZFNWWEI0VmtkNGExWXhaRWRXYmtwV1lrVndiMWxVUW5ka2JGcDBUbGhrVTAxck1UUlZNblJyVlRKS2RGVnVSbFpoYTBvelZqSjRWMWRGTlZoU2JXaHBWbGhDTmxaWE1IZE5WbVIwVm01S1QxZElRbWhXYWs1VFZrWmFXRTFWY0d0TlJGWlhWbGN4YzFZeVJYcFJhbHBYWVd0c05GbDZSa1psVmtwMVZXeE9hRTF0YUZsWFYzaHZVVEpKZUZWc1pGWmlhM0J6V1d0a1UyVnNaSEpXYWtKcFVqQndWMVl5ZUhkV01WbzJVbFJDVjFKV2NGQlZha1pyWTFaYWMyTkhhRTVTUmxreFZtdGplRTFHVlhoV2JsSlVWMGQ0YUZWc2FFTlZNVkpXVm0xR2ExWnRVbmxXYlRBMVZrVXhSVlpzWkZWTlYwMTRWa2Q0UzFkV1ZuSmtSbHBYVWxWd1NWZFhNVFJVTVZwelZXNUtWR0pWV2s5VmFrNXZVbXhhVjFsNlJtcE5WM2hZVjJ0V1lWUXhXa1pPVjBaYVZqTlNlVnBWV25kWFIxWkpXa1prVTJFeGNGZFhWM1JYWkRGYVIxTnNiRkppYmtKWlZtdFdZV1JzV25GVGEzUlVVbXhLV2xrd1dtRmhWMHB5VTJzNVdGWXphSEpXVkVwT1pVZE9SbGRzVm1sV1IzaFFWbTF3UWsxVk1VZGpSVlpWWVRBMVZGWnRlR0ZYVmxGNFdYcEdWMUpzY0ZkVWJGWlBWMGRHY2xOdWNGWmhNWEJJVmpCYWQxSnRUa2RUYkdSVFZsaENUMVpzVWtkV01WRjRVbTVPYVUweVVuQlZiRnBMVlRGYWNWTnNUbFJOVmxwV1ZWZDBNR0V3TVZoVmFrSmFZVEZhVUZscldtRmtWa1p6WTBaa1UyVnNXbmxYVmxwV1pVZE9WMWR1UmxoaVIyaHdWV3hTUTA1R1pITlpNMmhXVFZVMVNGVXlOVWRWYlVwWlZXeHNWbUpHU2xoYVJWcGFaVVpXY21ORk9WZE5SbGt3VjFSQ1lWVXhWbk5YYTJoc1VtdHdXRlpyVmt0VFJsSnpWMnhPVjJKR1dubFZNbk0xWVVVeFZtTkdVbGhXTTBKTVdWUkdUMk14U2xsYVJrNXBWa1phVmxadGVGWk5Wa1Y0V2toR1VtSnJOVlJWYlhSaFYxWmtjbFp1WkZaaGVrWkhXV3BPZDFkR1drWmlSRkphWld0d1ZGWXdXbGRqYkZaMFVtczFhVmRIYUdoV2JHUXdWakZKZDA1WVRsWmlSbHBVV1cwMVEyTXhiRmxqUldST1VteEtXRll5TVRCV01rcEdZMFphVjFaNlFYaFdha1pMVW0xRmVtRkdjR3hoTTBKSlZtcENWazFXWkVoV2ExcHFVakpvV0ZSVVJrdFZWbHBYVld0MGFrMVZXbnBaYWs1cllWWktWMU5zVGxkaGEzQlVWWHBHVjFaV1JuSmFSMnhwVWxSV1dGWnJaREJUTVZwWVVsaGtUMWRIVWxkV2JURlRZMnhWZVdWRldtdE5WWEF3Vkd4YVUxWXhXbFZXYTFKWFRXNUNTRnBFUm10VFJscHlZa2R3VTAxR2NGbFdWelYzWXpGV1IxWnNWbFJpYXpWVFdXdGpOVTB4YkhKV2JFNVdZa1pzTlZaWGREQldiRnBHVTJ0b1dtSllhRkJXYlhoVFkyeE9kRkpyTlZOTk1taE1WbXhhYWsxWFRYbFNhMlJZWVd4d1dGWXdaRk5XVmxKV1drWk9XbFp0ZUZoV01qQTFWVEZhY2xkc2NGcE5SbFY0VmtkNGExSnJOVVZUYkdSVFlraENlRmRzVm1GVE1sSkhWVzVXVjJKR1NuQlphMmhEWlVaa1YxZHNaRlJOVjFKSVZqSjRZVll4V2taVGJXaFZWak5TYUZZeWVHRlNNWEJJWkVkb1YxWkZXalpYVkVKdlZURmFSMWRzYUZWV1JWcG9WbTE0WVdWc1ZYaFhiRTVyVm10YU1GVnRjekZoUjBwSFkwUktWMDFYVVhkV1JFWkdaVlpTY21GR1ZtaGlSbkJVVjFaa2VrMVhSa2RYYmtaU1lsVmFjMVp0ZUV0VFZteHlWbTVrYUdKRmNGaFZNbmhQVjIxR2NtTklTbFpOYm1oSFdrUkdTMlJGTlZkVmJHUlhWa1phUlZacVNuZFJNazE0VTJ0a1UySkhhR2hWYkdoRFZURlNWbFp1V2s1aVIxSjZWakl3TlZaWFNsZFRiR2hhVFVad2VsbFZXazlTYkU1MVUyeGFWMUpZUW5sV1IzUmhWRzFXUjFOc2JHRlNiRXBQVldwT2IxSnNXbGRYYlhSb1RWVTFlbFV4YUc5WFJscEdVMnhzVjJFeFdqTldNRnAzVWxaT2MxUnNUbE5oTVc5NFYxZDBhMUl4WkVkVGJHUnBVa1pLV0ZSWE5XOWtiRnBGVVZob1ZGSnNTbmhXYlhNMVZqQXdlV0ZJY0ZkV00wSkRWRlprVG1WSFJYcGFSMmhUWVhwV2VGWlhjRU5qTURWWFZXNU9hRk5IVWxaV2FrSjNVakZyZDJGRk9WaGhla1paV1ZWYWIxZHRSWGxWYXpsaFZqTm9XRmt5ZUd0a1IxWkhWR3MxVTFKc2J6Sldha1pUVVRKSmVGWlliRlZoTW1oVlZqQmtORlZHVm5GVGJFNWFWbXhzTTFac2FHOWhWMHBJVlc1d1YxWjZWbWhXYkdSR1pEQTFXVnBHV2xkaVZrcDVWbFJLTkZKdFVYaFRibEpQVm14S1dGWnNVbGRTUmxsNVkwVjBWVTFWTlZoV1J6VlhWVzFLV0dWSVFscGhNVnBvVkZkNFdtVlZNVmxVYkZKT1ZqTlJlbFpHV2xkV01WcFhXa1ZzVW1KSGVHaFdhazVQVGtaU2NsZHVUbXBOVm5CNlYydGtORll3TVVWV1dHUlhVa1ZhZGxsNlJrOWpNVTUxVkcxd1UyRXpRbGxXVjNCTFRrWktSMkV6WkdGU1ZHeFFWbTEwWVUxV1dYbE5WV1JvVm14d01GcFZhRmRYUmxsNlVXeENWazF1YURKYVZscFhZMjFHU0dGR1RrNU5iV2hOVm14a2QxTXdOVVpOVm1ScVVsWndhRlZ0TVZOak1WcHhVVzVrVGxKc2NEQlpNRlpQVmtkS1JtSkVWbUZXVmtwb1ZtdGFZVmRIUmtsVGJIQm9UVmhDTmxacVFtdFViVlp6VjI1S2FsSXlhRmhVVkVaTFZWWmFWMVZyZEdwTlZWcDZXV3BPYTJGV1NsZFRiRTVYWVd0d1ZGVjZSbGRXVmtaeVdrZHNhVkl6WTNsV2EyTXhWREpLU0ZKWWNHaFNSVXBZV1d4b1ExWkdiRlpYYlhSVFRWVndNVll5ZUZkV01rWTJWbXBXVjJFeVVYZFdSRXBMWTJzeFZsZHRkRk5OTVVwYVZsZDRiMUV3TlhOV1dHaFhZa1Z3Y2xSV1l6Vk5NV3h5WVVaT2FGSnJjRWRWTWpWTFZtc3hSMWRyZUZWaVdHaFRXbFprUjA1c1ZuUmtSMnhUVFRKb2FGWnNXbXBOVmtWNFZXeG9WR0pyTlZWWmJYTXhXVlpzVlZOc1RsaFNiWGd3VkZaVk5XRXhTbkpqUkVaWFZqTk9ORmxXV21GVFIxSTJVbXhrVG1Gc1dqWldWRW8wVlRKT2MxVnVWbFppUmxwd1ZtdGtOR0l4V25SalJVcE9WakZhV0ZkclZsZFdWMHBaVlc1Q1ZtSlVSVEJVVmxwaFUwVTFWbFJ0YUU1V1YzY3dWbTB3TVZsV2JGZFRibEpvVWxob1lWcFhkRXBrTVZwWVl6Tm9VMkpXU2tkV2JYaGhWMFpLVm1KRVZsZE5Wa3BRV1RKemVGZEdXblZWYkdScFVqTm9WMWRXWkRCVE1rWkhWMjVXYWxKVk5YSlphMVV4WlVaYVNHUkZPV2hpUld3elZHeFdWMVpzV2paV2ExSmFWbTFTVEZreWN6RlRWbkJIWVVaa2FWWnJWak5XTVdoM1VUSk5lRlJzWkZWaWJFcHpWV3BPUTFkV1ZuUmxTR1JzWWtkU1dsa3dWVFZXYXpGelYyNXNXazFHU2xoWlZWVjRVbFphY2xac2NHbFNhM0EyVmtjeE5GVXhUa1pPVmxwUVZsUnNXRlJWVWtaTmJGcHpXVE5vVDFJd1dsaFdiR2h6V1ZaT1IxZHNiRmRoTVZveVZGVmFjMk5zWkhWVWJHaFhZWHBXV2xaSGVGZE9SbHB6VjJ0YVZHRjZSbGRaVkVaM1UwWndTRTFWWkdwaVZYQkhWako0VDJGSFJYaGpTR3hYVmpOQ1RGbHFRWGhqTWtWNllrVTVWMVpHV2xGWFZsSkxUa1pKZUZadVVtdFNWR3hZVm14U1IxTnNaSEpWYTA1WFlYcEdTRll5ZEc5V2JVVjRZMFU1WVZKRldtaFpla1pUWTIxT1JrNVdaR2hOTUVreVZtcEdhMDFIUlhoWFdHeFVZbXhLVmxsdGVFdFdSbXgwWlVWMFZsWnRlRlpWVjNRd1ZrVXhWMWR1YkZkTlZrcFlWbGN4UzFKc1pIVmlSbFpPVm14Wk1GWnFSbFpsUms1SVVtdGFWV0pHY0ZoVmJGWnpUVEZhV0UxVVVsZE5hM0I1VkZaV1lXRXhTbkpqUnpsaFZucEZNRlpxUmxwa01WWnlXa1phVGxac2NFbFdhMXB2WVRGWmVWSnFXbWxTV0ZKWFdWUkdTMUpHYkhSbFJUbHJWakExU1Zrd1pEUldNVnBIVjJ0a1YxWnNjRlJWYWtaWFVqRk9jbUZIZEZOU2JIQlhWa1phWVZNeVZsZFZibEpzVWxkU1dGbHJWbmRsVm14V1YydE9WazFFUm5wVmJHaHpWakZLTmxKcVdsVmlSbkJZVm1wR2RtVnRTa2RXYld4VFYwVktWbFpzVWtOV01XeFlVMWhvYVZORk5XaFZibkJ6VlVac2NscEhkRTlTYkhCSldUQmFUMVl5U2xaalJXUlZZa2RvU0ZZd1dtRmpNV1IxVTJ4a1YySldTbFJYYkZaaFZqSk9jazlXYUd0U1ZGWllWRlJLYjFkc1duRlRXR2hyVFZWYU1GVXlOVXRXYlVwR1kwaEdWbUpHY0V4V2JGcFhZekZhZEZKc1pHbFNNVXBIVmxaak1WUXhWWGhYYms1WVZrVmFWMVp0ZUV0bGJGVjVaVVYwYTFac1NqRldiWGhYWVZaa1JsTnVhRmhpUm5CWFZHeGFZVmRHU25GWGJGcHBVbFZ3V1ZaWGVGZFhhekZIVjJ0a2FGTkZOVzlVVm1oRFVqRmFXR1ZGZEdoaVJYQmFWVmQ0WVZZeVNrZFhiV2hXVFZad1dGbDZSbXRXVmxwelZHczFWMkV4YkRaV01uaFhWakZaZUZaWWFGaGlhM0J3Vlc1d1YxWXhWblJqZWtaU1RWZDRNRnBGVWs5aVIwcEhVMjVvVmxaNlJucFdSM040VTFaR2RWZHNaRTVpYTBwTlZtMHdlRlV5VFhsVWEyUm9VbFJXV0ZWc1duZGtNVnBZWTBWT1dHSldSalJYYTJoUFdWWktjbU5JU2xwWFNFSklWV3hhVW1WR1duTmFSbHBvWld0YVNsZHNWbFpPVmxwWFUydGFWR0pGU21GV2JHUlRWRVpaZDFkdFJtdFdNSEJJV1RCYVlWUnRSalpXYkVaWFZteEtURmxYTVZKbFJsSlpZVWR3VTFZeWFGbFhWM2hUVWpGTmVGWllaRmRXUlZweFZGWmtORTFHVWxkWGF6bGFWakJ3VjFZeWVITldWbHAwVlc1YVdGWnNWalJaZWtaaFpGWmtjMk5HWkdsV1ZGRjNWakZhVjFsWFVuUldiR1JZWW14S1dWbHNhRU5XUmxKV1YyNU9UazFYVWxoV2JYTTFWR3N4V0U5VVVscFdSVFY2V1ZWYVNtVlhSa2xUYkZwcFYwVktObGRyVWtkaE1rNXpWVzVHVldKVldrOVphMVozV1ZaYWNsa3phRTlTTUZvd1ZUSjRWMVl5U2xWaVIwWmFZVEpTVkZacVJuSmtNVnBWVm0xc2FHVnJXa2hYYTFaWFpERldjazFWV2xoaWJGcFhWRlphWVdOc2JEWlRiRXBzVW0wNU5sbHJXazloVm1SSFUyMDVWMVpGU2xoYVJFcE9aVWRLUlZkc1ZtaGxiRnB2VmtaYVYxTXhXbGRXYkdoUFYwVTFZVlp0TVZOU01WbDRZVWM1V0ZJd2NFbFpWVnBEVmxaYVdGVnNRbFZpUmxWNFZqQlZNVmRHU25OaFJrNW9UVmM1TlZac1VrdGtNVTE1VTFoa1RsWlhhRmRaVkVvMFZURnNkRTVWVGxaV2JYaFlWbGN3TlZSdFNraFZiR2hhVmxaYVVGbFhlRXRYVjBaRlVXeHdhRTF0YUhsWFZsWmhWMjFXU0ZOcVdsTmlSbHBVV2xkMFJtVkdaSE5YYlVaclRVUldXRmxVVG5kVmJVWTJVbTVDV21FeFdqTmFWM2hyWXpGYWRFOVdXbWxTYTNBMVZtdGpNVkV4Vm5OWFdHeFdZVE5TVjFaclZrdFVSbEpXVjIxMGFrMXJXa2RVTVdRMFlWWkplbUZHY0ZkTmJsSnlWR3RhVDJNeFRuSldiRXBwVmtaYVdsZFhlR3RPUmxKSFZsaHNiRkp0VWxSV2FrSnpUbFprY2xwRVVsVmlWWEJhVjJwT2QxWXdNVWRUYTNoV1lXdHdSMXBWWkU5U2JVcEhWVzFzV0ZJeWFEUldhMXBUVVdzeFJrNVdaR0ZTVm5CaFdsZDBZVmRHV25STlZGSllZa1pXTlZSVlVrZFhiRnAwVld0b1ZtSlVRWGhXYlhONFZqSk9SbFJzYUdoaE1XOTZWMnRXVms1V1pGaFRhMXBxVW1zMVQxVnRNVE5sYkZsNVpFWmthRTFWYkRWVmJUVlRWVEpHYzJOSVFsVldla1pVV1hwR1UxWldTblJTYXpscFVqRktObGRXVmxkTlIwVjRWMjVTYkZKdGVGWldiVEZTVFVac2MxZHNXbXROYTNCSFZERmFTMVJ0U2xsaFJWSlhUVzVDUkZsNlJrdFNNVXB6VjJzNVYxWnJjSFpXYlhoWFdWZFNWMVpZYUZkaGVteFRWRlZTUTA1V1ZuUmxTRTVYWWxWd1ZsbHJWakJXYlVwMVVXNXdWVlpGV25KWmVrWnpUbXhHZEdKRk5XaE5XRUpoVm10YVlXRXlTWGhpUmxwT1YwVTFXVmxzVWtkWlZsSldXa1pPVkZKc1NsZFhhMVpyVlRGSmVGSnFWbGhoTVZsM1ZrZHplRk5XUm5WYVJscE9ZV3hhTmxkVVNqUmtiVlpJVTJ0a2FWSnNXbGhVVjNoTFpHeGFkRTVZWkZOTmEydzBWMnRvUjFaSFNraFZiV2hhWVRKb1JGUlZXbk5qYlVaR1QxWndWMkpJUWtwV1JFWldUbFpXY2sxWVVteFNWVFZaV1ZkMFMyVnNWbkpYYTJSWVVtNUNSMWt3V2t0VWJFcFhZMFJHVjAxV1NrdGFWVnBhWlZaYWNtRkdXbWxTTW1oWlYxY3dNVkV5VG5OV1dHUlhWMGRvVDFadE1UQk5NV1JaWTBaa2FWSXdjRmhWTW5SWFYyeGFXRlJxVWxabGEwWTBXa1ZhZG1Wc2NFaFNiRTVYVFcxb1JsWXllR3RsYXpWWVZHdGFVRlpYZUZsWmEyaERWMVpXYzFadVpFNU5WbkJIVjFod1IxWnJNWEpqUld4V1RXNVNkbFpxU2t0V1ZscDFVbXh3YVZKc2NHOVdSbFpoVlRGT1JrMVZWbGRpV0doWVdXMTBSbVZHV2tWU2JYUnFUV3RhVjFSVmFHOVdSbHBHVGxaa1YyRnJOVTlVVmxwaFl6RmtkRTVYZUZOaVJuQTJWbFprTkZVeFVuTlRiazVxVW10YVdWbHNhRzlVTVZKeldrWmthazFyTlVoWlZWVTFWakF3ZUZOc2FGZFdNMEpNV1dwQmVHTXlUa1pYYkhCc1lrVndkMWRXVWs5aU1VcFhWbXhrVjFaRldsUlZha0poVmpGV2RFMUVSbGRTYkhCWFZHeFdUMWRIUm5KVGJuQldZVEZ3U0ZZd1duZFNiVTVIVTJzMVUxWnVRWGhXYkZKSFZqRlJlRkp1VG1sTk1sSndWV3hhUzFVeFduRlRiRTVVVFZaYVZsVlhkR3RoVjBwR1RsWmtWMUl6VWxCWlZWVjRWMGRXUjJOR1pGZGxhMW95Vm14YVlXRXhUbGRWYmxaWFlrZG9XRlZzYUVOTmJHUlhWbTEwVmsxVmJETlVNVnB6VlcxS1ZsZHNUbFZXTTA0eldsWmFWbVZHV25Sa1JsWk9ZVEozTUZkWGRHRmpNVnAwVTJ4a2FsSjZiRmhaVjNSaFUwWndXR1ZGT1ZkaVJrb3dXa1ZrYjJGV1NYcGhSMFpYVm0xU00xVlVTa2RTTVdSeFYyMXNVMUpXY0ZaWFZ6QXhVVEF4YzFwSVJsUmhNMUpaVlcxNGQwMVdhM2RhU0dSVllsVldORmt3VWtkV01ERjFZVWhXWVZKRmNFOWFSRXBMVW14T2NrNVdUbGhTYTNCTlZteGFVMUV4U1hsVGJrNVZZa1p3VmxsVVFuZGhSbEpXV2tSU1UxWnNXbGhYYTJRd1ZrZEtSbFpxVGxaaVZFRjRWbXRhWVZack5WWlViR2hvWVRCd05sWlhkR0ZTTVdSSFkwVmFhbEpyY0U5VmJGcDNUVlphVlZKc1pHaE5WM2haVmtkMGIxWkhSWGxoUm1oYVlsUldSRlpYZUZwa01rWkdUMWQwVjJKWVVYcFdNblJxVGxkRmVWTnNaRlJoTW5oV1ZGVmtUbVZHV2xaYVJXUlhZa1UxTVZkclduZGhWa2w0VTJ0c1dGWjZSVEJhUkVaYVpEQTVWMkZGTlZkTmJXaFpWa1pTUzJJeVZuTmFTRkpzVWxSc2NWbHJXa3RsVmxwSVRVUkdWV0pGY0ZwV1Z6RnZWbTFHY2xkdGFHRlNWbkJRVm0weFIxSnNVblJsUm1ST1VtNUNZVlpyWkRSVk1VVjRXa1phVGxkRldsUlpiWE14V1Zad1dHTjZSbFpTYlhoWFZqSTFZV0pHV25OalJFSlhUV3BGZDFaSE1VdFhWbkJGVkd4b1YySkdjR2hXUjNoclZERk9SMVJ1VmxkaVJuQndWakJrYjJWR1pGaE5WRkpyVFd0c05GbHJhRXRXVjBwVllraEtWbUpVVmtSV01uaGhVMFUxV1ZwR2FHbFNiWGN4Vm14ak1WUXhXbGRUYkZwUFZsWktZVlJWWkZOVVJuQkhWMnhrYTFJeFdrbFpNR1J6WVZaT1JsTnFTbGROVjFGM1ZrUkJkMlZIU1hwaVJsWnBZa1Z3V1ZkWE1IaFZNa1pIVjI1R1VtSklRbkpVVmxWNFRrWmFXRTVYUmxkV01GWXpWR3hvYTFac1duUlZia3BXVFc1b1IxcEVSazlrVmxaelkwZG9hR1ZzV2sxV2FrcDNVakpKZDA1V1pGTmliRnBUV1d4a05HSXhXbk5XYmxwT1ZteHNORll5TVhkVWJGbDNZMGh3V2sxR2NGUlpWVnBQVTBkV1NHRkdaRTVTYkhCTlYxaHdSMkV4V1hsU2EyUlVZbGhDVkZaclpEUk5WbHBIVm14a1RsSnJOWHBWYkdoclZUSktWVlpzVmxkaVJsVjRWVlJHYTJOV1JuVlViRTVUWVRGdmVGWXlkR3RrTWtaWFYxaHdZVTB5YUZsWlZFWmhWVVpzY1ZOc1RsTk5helZJV1d0YVYyRlhTbkpUYldoWFlsaENURlpVU2s1bFJsSlpZVVpPV0ZJeFNsWldSbFpyVGtaS1YxWnNaR0ZTTTFKVldXdFdWMDB4Vm5STlJFWlhVbXh3VjFSc1ZsTldWbHBZVld0b1YwMUdWalJXTUdSWFVtc3hXR0pIYUd4aVJtdDVWbTF3UzA1SFJYaFhXR3hXVjBkU2NsVnNaRzlqUmxWM1YyMUdhbUpHV25oVmJURkhWREZhZFZGcmJGVldiRnB5V1ZkemVGTldWbk5VYkZaWFZteHNNMVpYZUdGV01XUlhVbTVXVkdKSGFIQlZha1pMWVVaWmVXTkZaR3ROVlRWSlZUSjBjMkZzU1hwUmJGSlZWa1Z3ZGxwSGVHdGpNV1J6WTBVNVYwMUdjRXBXYTFwdll6RmFXRk51U2xSaVZHeFlXV3hvUTJWc2JIRlNia3BzVmxSV1dGVXlNWE5VYkU1SFUyeGtXRll6UWt4WlZFWlBZekZLV1ZwR1RtbFdSbHBWVmxjeE1GbFZNWE5hU0VaU1ltczFWRlZ0ZEdGWFZtUnlXa2hrVjFKcmNGcFZWM0JQVjBaYU5sRllhRmRXZWtaTFdrUktTMU5XUm5OVmJHUk9ZbTFvYUZac1pEQldNVWwzVGxoT1ZtSkdXbFJaYlRWRFl6RnNXV05GWkZoV2JFcFhWbXhTUjFVeFNuVlJWRXBXVmpOUk1GWnJXbUZXYXpWV1ZHeG9hR0V3Y0RaV1YzUmhVakZrUjJORldtcFNhM0JQVld4YWQwMVdXbFZTYkdSVlRWVmFlbGxxVG10aFZrcFhVMnhPVjJGcmNGUlZla1pYVmxaR2NscEhiR2xTVkZaWVZtdGtNRk14YkZaTlZXaHNVbFphVjFadE1WTmpiRlY1WlVWYWEwMVZjREJVYkZwVFZqRmFWVlpyVWxkTmJrSkVXWHBHUzFJeFNuTmhSMFpUVjBWS1ZGWkdWbGRaVjFKWFZsaG9WMkY2YkZOWmEyTTFUVEZzY2xac1RsWmlSbXcxVmxkME1GWnNXa1pUYTJoYVlsaG9VRlp0ZUZOamJFNTBVbXMxVTAweWFFZFdiRnBoWVRKRmVGUnVUbE5YUjFKVVdXeFNWMVpXV25OV1ZFWlNUVmRTZUZWWE5VOVZNVXB5VjJ4c1dHRXhXak5XVjNONFVteGtkVlpzV2s1V2JIQlJWbFprTkdSdFVYbFRhMXBXWWtWd1dGUlhlRXRVUmxwWFZXdE9VMDFyY0hwV1IzaGhWbGRGZDJOSGFGVldWMUV3Vld4YVYxWXhjRWhrUmxKcFVsWlplbFpYTUhkTlZscEhWMnhhVDFaVk5WbFpWM1JMWld4V2NsZHJaRmhTYmtKSFdUQmFTMVJzU2xkalJFWlhWa1ZhV0ZaRVJrZGpNa2w2V2tkc1UxWnJjRlJXYlhoVFZqRktWMkpHWkZkaE1sSndXV3RWTVZZeFdraGtSWFJhVmxSR1NWcFZWbGRXYkZwMFZXNUtWazF1YUVkYVJFWkxaRVUxVjFWc1pGZFdSbHBGVm1wS2QxRXlUWGhUYTJSVFlrZG9hRlZzYUVOVk1WSldWbTFHYTFac1ZqUldiWE0xVlcxS1NFOVVUbHBoTVZwVVZsZDRXbVZXVm5Ka1JscFhVbFZ3U1ZkWE1UUlVNVnB6Vlc1S1ZHSlZXazlWYWs1dlVteGFWMWR0ZEdoTlZUVjZWV3hvYTFVeVNsVldiRlpYWWtaVmVGVlVSbXRqVmtaMVZHeE9VMkV4Y0ZwV01uUlhaREZXY2sxVldsaGliRnBYVkZaYVlWVkdWbGhsU0ZwclRXdHdSMVpYZUV0V01ERnpVMnQ0VjFac1NrUlZha3BMWXpGU2MxZHNWbWhOU0VKdlZrWldhMDVHU2xkV2JHUmhVak5TVlZsclZsZE5NVlowVFVSR1YxSnNjRmRVYkZaUFYwZEdjbE51Y0ZaaE1YQklWakJhZDFKdFRrZFRhelZUVm01QmVGWnNVa2RXTVZGNFVtNU9hVTB5VW5CVmJGcExWVEZhY1ZOc1RsUk5WbHBXVlZkMGEyRlhTa1pPVm1SWFVqTlNURmRXVlhoVFIxWkdWbXhhVjJKV1NubFdWRW8wVW0xUmVGTnVVazlXYkVwWVZteFNWMUpHV1hsalJVNVdUVlphTUZaSGRHRldNa3BHVGxaU1YySllVak5WYWtaaFYwZFNSMXBHV2s1V1dFSlpWbFJLTUZsV1duUlNXR2hZWWtaS1YxbHJXbmRVUmxaMFpVVTVWMkpHU25sVk1qRkhWR3hKZW1GRldsZFdiSEJ5V1ZSR1QyTXhTbGxhUms1cFZrWmFWbFp0ZUZaTlZrVjRXa2hHVW1Kck5WUlphMXBoWlZaYWRHVkZPVlpOVm5CNVdUQldhMVl4V1hwVmJHaFhWa1ZhVEZacVJrOWpiR1J6VjIxb1RsWnVRbFpXYkdRMFdWWkplVk51VGxWaVJuQldXVlJDZDJGR1VsWmFSRkpUVm14YVdGZHJaREJXUjBwR1ZtcE9WbUpVUVhoV2ExcGhWbXMxVmxSc2FHaGhNSEEyVmxkMFlWSXhaRWRqUlZwcVVtdHdUMVZzYUVOVk1WcDBaRVpPVW1GNlZsaFdiWFJyVm14a1NGVnNSbGRpV0ZKTVZtMTRVMVpzVm5SUFYyeHBVbFJXV0ZaclpEQlRNV3hXVFZWb2JGSldXbGRXYlRGVFkyeFZlV1ZGV210TlZYQXdWR3hhVTFZeFdsVldhMUpYVFc1Q1NGWnRNVmRTTVZaMVZHeGFhVkp1UWxCV2JYaFRWakZhYzFkdVRsWmhNbEpXVkZaYWQxTkdXbk5oUnpsWFZqQndTRlV5ZUd0V1ZscHpWbGhvVjJKR2NGQldiWGhMVjFad1IxVnJOVmRYUlVwSVZqRmpNV1F4YkZkV2EyaFRZbXhLVVZWclZuZFdiRkpZVGxWT1RtSkdTakJaTTNCWFlXeFpkMko2U2xkTmJtaEVXVlZWZUZadFRrWmFSbVJYVFRGS1VWWldaRFJrYlZGNVUydGFWbUpGY0ZoVVYzaExWRVphVjFWclRsTk5hM0I2VmtkNFlWWlhSWGRPVmxKWFlrWktlbHBWV25Oa1YwNUlVbXhhVTAxR2IzZFdSRUpUVXpGYVZrMVlWbEpoYTNCV1dXeG9UazFXYTNoYVJYUlBZa2RTZWxaSGVFOVdNa1Y2VVd0b1YxWkZXbGhXUkVaSFl6SkplbHBIYkZOV2EzQlVWbTF3UzFVeFRYaFdiRlpTWVRKU2NGbHJWVEZXTVZwSVpFVjBXbFpVUmtsYVZWWnJWbFV4VjJORlVsZFdWMUpJV2tWVk5WSldUbk5XYXpWcFlUQnNOVlpyWTNobGF6VllWR3hvVkdGc2NGbFphMXBoVkRGV2NscEhPV3RXYkZZMFZtMXpOVlZ0U2toUFZFNWFZVEZhVkZaWGVGcGxWbFp5WkVaYVYxSlZjRTFXYlhoaFdWWmtXRlJyYkZoaGVteHZXbGN4TkU1R1pGaE9XR1JhVm14YVNWVnROVk5WUmtwR1kwWmFWVlo2VmtSVVYzaFRaRWRPTmxadGNGZE5Semg1Vm1wS05GRXlSbGRUYkZaVFlrVktWMVpyVm5aa01WcFlZM3BHYW1GNmJGcFZiVEZ6WWtkS1NWRnNTbGhXYlU0elZHdFZlR014VmxsaVIzQlVVbTVDVVZkV2FIZGpNbFpIWWtoV2FsSXdXbGRWYWtKaFRWWldXR1JIUmxkaVZWWXpWR3hXVDFkSFJuSlRibkJXWVRGd1NGWXdXbmRTYlU1SFUyczFVMVp1UVhoV2JYaHJUVVpWZVZWdVNrOVhSWEJSVmpCV1lXTkdjRmhsU0dSV1ZtMTRXVlJWVWxOVWJVcEhVbXBXV2sxSGFHaFdSRXBIVG0xS1NXRkdjR2xpYTBwdlZteFdhMUp0VmtkVWJrcFlZa1pLV0Zac1VsZFNSbGw1WTBWT2FrMVZjRWhWYlhodldWWktXVkZzVGxWV1ZscG9Xa1phWVdOc1ZuSlRhemxUVmtaYU5WWkVSbTlTTWtaWVZtNU9hbEpyV21GV2JuQkNUVVpTV0dWR1NteFdNRFZLVmpKek5XRkhWblJsUkZKWVZucFdNMWRXV21GV2F6RldWbTFvVTJWc1dsWldiWGhXVFZaRmVGcElSbEppYXpWVVZXMTBZV1ZzV2xobFJVNW9VakJ3VmxkcVRuTldNVXBHWTBST1lWSkZXbWhWYWtaaFYxZEdSMVp0YkZOaE0wSlpWbXRhWVZadFVYZE5XRTVXVjBkNGNWVXdXbmRWUm14WlkwaE9iRkp0ZEROV01uaFBWVEZhYzFkc2NGWldNMUpvVm0weFJtVkdaSE5VYkZacFYwVXdlRmRVUm10VE1EVnpXa2hPVW1KWGFFOVdiR2hEVTBaYWMxcEVRbGROVmxZMFZUSjRZVlZHWkVaWGJrSmhWak5vTTFaV1duTlhSVFZXVkd4T2FWSlVWbGhXYTJRd1V6RnNWazFWYUd4U1ZscFhWbTB4VTJOc1ZYbGxSWFJYVFZVMWVWWXllR0ZoUlRGV1lqTnNWMUo2UmpaVWJHUlBWMFpPY1Zkc2FHbFNWRlpWVm0weE1HUXhTWGhYYkdoclVtMVNWMWxZY0ZkbFZsRjRZVVZrYUZZeFducFpNRnBIVjJ4YVJsZHJhRnBpV0doUVZtMTRVMk5zVG5SU2F6VlRUVEpvUjFac1dtRmhNa1Y0VjJ4b1YySnNTbEZWYTFaM1ZteFNXRTVWVGs1aVJrb3dXVE53VjJGc1dYZE9WV2hXVmpOb1dGWkhlRXRUUm10NllrWmtVMUpZUVhwWGEyUjZUVmRPY2s5V2JGTmlWM2h6V1d0b1ExWXhaSE5YYkdSVFRXdHdlbFpIZUdGV1YwVjNZMGRvVlZac2NHRlVWM2h6WkZkT1NGSnNXbE5OUm05M1ZrUkNVMU14V1hoYVJXaHNVbFUxV1ZsWGRFdGxiRlp5VjJ0a1dGSnVRa2hXTW5NeFZqRmFSMWRzWkZkaVdHaFVWV3BHVW1WR1pISmFSbVJvWVhwV1VGWlhlRzlWTVUxNFZteFdVbUV6VWxSWmExcEhUbFpyZDJGSFJsVk5hMWt5V1d0b2IxZHJNVWRYYkdoV1RXNW9SMXBFUmt0a1JUVlhWV3hrVjJKSVFsVldhMk40WldzMVdGUnNhRlJoYkhCWldXdFdTMkl4VWxkV2JVWnJWbXhXTkZadGN6VlZiVXBJVDFST1dtRXhXbFJXVjNoYVpWWldjbVJHV21sU2JrSklWa1prTkZWdFZsaFVhMnhZWVhwc2IxcFhNVFJPVmxwelYyMTBhRTFWTlhwVmJHaHJWVEpLVlZac1pGcFdSVnBNVkZkNFUyUkhUalpXYlhCWFRVYzRlVlpxU2pSVU1WWnlUVlZhV0dKc1dsZFVWbHBoVlVaV1dHVklXbXROYTNCSFZqSjRRMVV4U25WUmJFcFlWbTFPTTFSclZYaGpNVlpaWWtkd1ZGSXhTbGhXVjNoclRrWktWMVpzWkdGU00xSllWbXBHWVUxR1VYZFZhM1JYVmxSR01WVlhjRXRXVjBwWlZGUkdXazF1VFRGVk1GcDNVbTFPUjFOck5WTldia0Y0Vm14U1IxWXhiRmRWYmtwUFYwVndVVll3Vm1GalJuQllaVWhrVmxadGVIbFdiR2h2WVZkS1JrNVdaRmRTTTFKTVYxWlZlRk5IVmtaV2JGcFhZbFpLZVZaVVNqUlNiVkY0VTI1U1QxWnNTbGhXYkZKWFVrWmFjbHBFUWxWTmF6VklWVzE0YjFsV1NuSk9WbEpXWW01Q2RWcFdXbUZTVms1MVdrZDBhR1ZzV2paV1ZFb3dWVEZXYzFkWWJGWmhNMUpYVm10V1MxTkdiSFJsUm1ScVlrWmFNVll5Y3pWaFIxWjBaVVJTV0ZaNlZqTlhWbHBXWlVaS1dWcEdUbWxXUmxwV1ZtMTRWazFXUlhoYVNFWlNZbXMxVkZWdGRHRmxWbHAwWlVWT2FGSXdjRlpYYWs1elZqRktSbU5FVG1GU1JWcE1WbTB4UzFKc1ZuTlRiR1JPWWtWd1RWWnNXbE5STVUxNFUyNU9WbGRIZUhGVk1GcDNWVVpzV1dOSVRteFNiWFF6Vm0xNGExWkhTa1pXYWs1V1lsUkJlRlpyV21GV2F6VldWV3hrVjFac1ZYaFhWRVpyVXpBMWMxcElUbEppVjJod1dWUkNkMVV4V2xWU2JHUlZUVlZhZWxscVRtdGhWa3BYVTJ4T1dtRXhXa3hXVmxwelYwVXhSVlZyTldsU2Exa3hWMVJDYjJFeFduTlRiR2hzVWxaYVYxWnRNVk5qYkZWNVpVVmFhMDFWTlhwV2JYaFhWRzFLY2xOWWJGZFNla1kyVkd4a1QxZEdVbkphUmxwb1RUQktWRlpHVmxkWlYxSlhWbGhvVjJGNmJGTlphMk0xVFRGc2NsWnNUbFppUm13MVZsZDBNRlpzV2taVGEyaGFZbGhvVEZWcVJrdGtWbVIwVW1zMVUwMHlhRWxXYlhoaFZURnNWMVpyYUZOaWJFcFJWV3RXZDFac1VsaE9WazVXVFZkU2VGVlhOVTlWTVVweVYyeHNXR0V4V2pOV1ZFWmhZMnhhV1dKR1pGTlNXRUY2VjJ0a2VrMVhUbkpQVm14VVlrWndXRlJYZUV0VVJscFhWV3RPVTAxcmNIcFdSM2hoVmxkRmQyTkhhRlZXYkZvelZXMTRjMlJYVGtoU2JGcFRUVVp2ZDFaRVFsTlRNVnAwVWxoa1QxWlZOVmxaVjNSTFpXeFdjbGRyWkZoU2JrSklWa2Q0VDFVeVZuUmFSRlpYWVRGS1RGcEVTbE5qYXpWWlZHeFNhRTFWY0ZSV2JYQkxWVEZOZUZac1ZsSmhNbEp3V1d0YWQxTnNhM2RoUjBaVlRXdFpNbGxyYUc5WGJVcDFVVzFvVjJKSFVsaFdiWGhMWkVVMVYxVnNaRmRXUmxwRlZtcEtkMUl4VlhkT1dGSlVZV3h3V1ZsclZrdGlNV3h6VlcwMWJGWnNjSGxaVldoUFZXMUtTRTlVVGxwaE1WcFVWbGQ0V21WV1ZuSmtSbHBwVjBVMGVsWkdaRFJWYlZaWVZHdHNXR0Y2YkhCVmJYaGFUVVphY2xwRVVsWk5WbkF3Vm0xNFlWVXlTbFZXYkZaWFlrWlZlRlZVUm10alZrWjFWR3hPVTJFeGNGcFdNblJYWkRGV2MxZHJXbFJoZWtaWFZGWmFZVlZHVmxWU2EzUlhZWHBzV2xWdE1YTmlSMHBKVVd4S1dGWnRUWGhWVkVaTFl6RlNjMWRzVm1oTlNFSnZWa1pXYTA1R1NsZFdiR2hyVW0xU1YxVnFRbUZOUmxGM1ZXdDBWMVpVUmpGVlYzQlBWbTFLUjFkdWNGWmhNWEJJVmpCYWQxSnRUa2RUYXpWVFZtNUJlRlpzVWtkV01WbDRWbTVLVDFkRmNGRldNRlpoWTBad1dHVklaRlpXYlhoV1ZXMTBhMkZYU2taT1ZtUlhVak5TVEZkV1ZYaFRSMVpHV2taa1YySkZjRzlXYkZaclVqSlNSazlWVmxSaVJscFBXVzE0UzFaR1dYbGpSVTVxVFZWd1NGVnRlRzlaVmtwWlVXeFNWMkV5VW5GYVZscGhVbFpPZFZwSGRHaGxiRm8xVmtSR2IxTXhWa2RUV0d4V1lUTlNWMVpyVmt0VFJteDBaVVU1VjJKR2NGWldWM00xWVVkV2RHVkVVbGhXZWxZelYxWmFWMU5HU25GWGJXaFRaV3hhVmxadGVGWk5Wa1Y0V2toR1VtSnJOVlJWYlhSaFYxWmtjbGR0UmxWaVJuQldWVlpvYzFZeFNrWmpSRTVoVWpOTmVGa3ljelZYVmtwMFkwWk9hVkpZUWxsV2ExcGhWbXN4VjFkc1pGaGlSM2h3Vld4V2QyRkdVbFphUkZKVFZteGFXRlpzVWtkVk1VbDNWMnhrVm1KVVFYaFdiVEZHWlVaT2NWTnNWbWxYUlRCNFYxUkdhMU13TlhOYVNFNVZZa1Z3VDFWc1duZE5WbHBWVW14a1ZVMVZXbnBaYWs1dlZrZEZlRmR1UW1GV00yZ3pWbFphYzFkRk1VVlZhelZwVW14d05WWnJaREJUTVd4V1RWVm9iRkpXV2xkV2JURlRZMnhWZVdWRldtdE5WVFY1VmpKNFYxUnRTbkpUV0d4WFVucEdObFJzWkU5WFJsSnlWMnhrYUUwd1NsUldSbFpYV1ZkU1YxWllhRmRoZW14VFZGWldkMVl4VVhoaFJXUm9WakZhZWxrd1drZFhiRm8yVm10U1ZtSllhRkJXYlhoVFkyeE9kRkpyTlZOTk1taEhWbXhhYTA1R1JYaFdhMmhUWW14S1VWVnJWbmRXYkZKWVRsVk9UazFXY0ZkV2JUVlBWVEZLY2xkc2JGaGhNVm96VmxkemVGSnRUa2RUYkdSVFVsaEJlbGRyWkhwTlYwNXlUMVpzVTJKWVFsUlpWRUozVkVaYVYxVnJUbE5OYTNCNlZrZDRZVlpYUlhkalIyaFZWbGRSTUZWc1dsZFdNWEJJWkVaa2FHVnJXbGhXUjNoaFZqRmFWazFZVmxKaGEzQldXV3hvVGsxV2EzaGFSWFJQWWtkU2VsVlhNVzloVjBWM1kwWmtWMkpZYUhaWmVrWkhZekpKZWxwR1dtbFNXRUozVmtaamVGVXhUWGhXYms1WVlURndUMWxyV2tkT1ZtdDNZVWRHVlUxcldUSlphMmh6VmpGYWRGVnVTbFpOYm1oSFdrUkdTMlJGTlZkVmJHUlhZa2hDVlZaclkzaGxhelZZVkd4b1ZHRnNjRmxaYTFaTFlqRlNWMVp0Um10V2JGWTBWbTF6TlZWdFNraFBWRTVhWVRGYVZGWlhlRnBsVmxaelZXeGFhRTFyTUhkV1JtUTBWVzFXV0ZScmJGaGhlbXh3Vld4b1ExSnNXbGRYYlhSb1RWVTFlbFZzYUd0Vk1rcFZWbXhrV2xaRldreFVWM2hUWkVkT05sWnRjRmROUnpoNVZtcEtORlF4Vm5KTlZWcFlZbXhhVjFSV1dtRlZSbFpZWlVoYWJGSnNXbmhXTWpGellrZEtTVkZzU2xoV2JVNHpWR3RWZUdNeFpISmlSMnhUVmxoQ2IxWkdWbXRPUmtwWFZteGtZVkl6VWxoV2FrWmhUVVpSZDFWcmRGZFdWRVl4VlZkd1MxWlhTbGxoUmxKVllrWndTRll3V25kU2JVNUhVMnMxVTFadVFYaFdiRkpIVmpGUmVGSnVUbWxOTWxKd1ZXeGFTMVV4V25GVGJFNVVUVlphTUZremNFZFdNVnB6WTBaYVZtSllUVEZXYWtaTFl6RmtWVk5zY0dsaWEwcHZWbXhXYTFJeVVsZFNiazVYWWtaS1dGWnNXbHBsYkZwWlkwVk9hazFWY0VoVmJUVkxWakpLUmxOdE9WcGlSa3AxV2xaYVlWSldUblZhUjNST1ZsaENXRmRYZEZkVk1WWnpWMWhzVm1FelVsZFdhMVpMVkVaV2RHVkdTbXhXTURWS1ZqSnpOV0ZIVm5SbFJGSllWa1ZLV0ZacVJrOWpNVXBaV2taT2FWWkdXbFpXYlhoV1RWWkZlRnBJUmxKaWF6VlVXV3RhWVZac1dYbGxSVTVvVWpCd1ZsZHFUbk5XTVVwR1lqTmtWMVl6YURKYVJFcExVbXhXYzFOc1pFNWlSWEJOVm14a05GbFdTbkpOV0U1V1YwZDRjVlV3V25kVlJteFpZMGhPYkZac2NGaFhhMlF3VmtkS1JsWnFUbFppVkVGNFZtdGFZVll4V2xWUmJGWnBWMFV3ZUZkVVJtdFRNRFZ6V2toT1VtSlhhSE5aYkdSdlRWWmFWVkpzWkZWTlZWcDZXV3BPYTJGV1NsZGpSa1pXWVRGd00xWldXbk5YUlRGRlZXczFhVkpyV1RGWFZFNTNWVEZzVmsxVmFHeFNWbHBYVm0weFUyTnNWWGxsUlZwclRWVndNRlJzV2xOV01WcFZWbXRTVjAxdVFrUlpla1pMVWpGS2MyRkhSbE5YUlVwVVZrWldWMWxYVWxkV1dHaFhZbFZhVmxsWWNGZGxWbEY0WVVWa2FGWXhXbnBaTUZwSFYyMUZlRlpxVWxkU1JWcEhXbFprUzFKc1RuUlNhelZYVjBWS1NGWXhZekZrTVd4WFZtdG9VMkpzU2xGVmExWjNWakZzVlZGVVJsSk5WMUo0VlZjMVQxVXhTbkpYYm14WFlsaG9SRmxWWkV0V1ZtOTZZa1prVTFKWVFYcFhhMUpIVXpGYWRGTnJXbFppUlhCWVZGZDRTMVJHV2xkVmEwNVRUV3R3ZWxaSGVHRldWMFYzVGxaU1YySkdTbnBhVlZwelpGZE9TRkpzV2xOTlJtOTRWbFprTUZsV1drZFhiRnBQVmxVMVdWbFhkRXRsYkZaMFpVWmtWMVp0VW5wVlZ6RnZZVlphU0ZwRVZsZGhNVXBNVkZWYVYyTXlTWHBhUjJ4VFZtdHdWRlp0Y0V0Vk1VMTRWbXhXVW1FelVsZFdiWGhIVGxacmQyRkhSbFZOYTFreVdXdG9iMWR0U25WUmJXaFhZa2RTV0ZadGVFdGtSVFZYVld4a1YySkdWak5XYTJONFpXczFXRlJzYUZSaGJIQlpXV3RXUzJJeGJIUmtSWFJXWWtaV05GWnRjelZWYlVwSVQxUk9XbUV4V2xSV1YzaGFaVlpXY21SR1dsZFNWWEJKVjFjeE5GUXhXbk5WYmtwVVlsVmFUMVZxVG05U2JGcFhWMjEwYUUxVk5YcFZiR2hyVmtkS1IxZHNXbFZXZWxaRVZGZDRVMlJIVGpaV2JYQlhUVVJXU1Zac1pEQldNVnB6V2tWYVZHRXlVbGhXYWs1VFYwWmFXR042Um1waGVteGFWVzB4YzJKSFNrbFJiRXBZVm14S1NGVjZSa3RqTVZwMVUyeGthVkpVVmxWV2JYaFRZekpXUjJKSVZtcFNNRnBYVldwQ1lVMVdWbGhrUjBaWFVteHdWMVJzVms5WFIwWnlVMjV3Vm1FeGNFaFdNRnAzVW0xT1IxUnNaR2hOTUVwSlZtMTRhMDFHVlhsVmJrcFBWMFZ3VVZZd1ZtRmpSbkJZWlVoa1YxSnNXbnBXTW5Rd1ZUSktSMWR1YkZkaVdHaE1Wa1JLUjA1dFNrbGhSbkJwWW10S2IxWnNWbXRTYlZaSFUyNVNUMVpzU2xoV2JGSlhVa1paZVdORlRtcE5WWEJJVlcxNGIxbFdTbk5YYms1YVlrWktkVnBXV21GU1ZrNTFXa2QwYUdWc1dqVldSRVp2VWpKR2MxTnVTbFJpUm5CV1ZteGFTMlJXVWxobFJrcHNWakExU2xZeWN6VmhSMVowWlVSU1dGWjZWak5YVmxwaFYwWmFjMWRzVG1sV1JscFdWbTE0VmsxV1JYaGFTRVpUWWtad2MxVnRlRXRsYkZwWVpVZEdWV0pHY0ZaV2JYaGhWakpLU0dGSWNGWldNMmd5V2tSS1MxSnNWbk5UYkdST1lrVndXVll5ZUdwa01EVkdUVmhPVmxkSGVIRlZNRnAzVlVac2NsZHNjR3hpUmtwWFZtMXdRMVpyTVZaalJXeFZUVVpLVEZac1ZYaGtWa1p4VTJ4V2FWZEZNSGhYVkVaclV6QTFjMXBJVGxKaVYyaHdWbXRrYTA1V1duSlZhM1JyVFd4S2VWUnNhRXRWUm1SR1kwWmtXbFpGV21oVmVrWlhWbFpHY2xwSGJHbFNWRlpZVm10a01GTXhiRlpOVldoc1VsWmFWMVpxVGxOWFJscFdXa1ZrYTFKVWJFWlZNbmhYVkcxS2NsTlliRmRTZWtZMlZHeGtUMWRHVG5GWGJHaHBVbFZ3ZGxkWGVGTmliVlpYVjJ0V1ZHSnRVbkpaV0hCWFpXeFZlV1JIUmxkaVJtdzFWbGQwTUZac1drWlRhMmhhWWxob1VGWnRlRk5qYkU1MFVtczFVMDB5YUVkV2JGcHJUa1pGZUZkc2FGZGliRXBSVld0V2QxWnNVbGhPVlU1T1lrWktNRmt6Y0ZkaGJGbDNZbnBLVjAxdWFFUlpWV1JMVmxadmVtSkdaRk5TV0VGNlYydFNSMVl4U1hoV2JrWlhZa1Z3V0ZSWGVFdFVSbHBYVld0T1UwMXJjSHBXUjNoaFYwZEdObFpzUWxwWFNFSjZXbFZhYzJSWFRraFNiRnBUVFVadmVGWldaRFJXTVZsNFYydGFXR0pGU2xoWlZFWjNWakZ3Vmxkc1RsZFdiVko2VlZjeGIyRldXa2hhUkZaWFlURktURlJyV2xOak1WWjFVMnhXYVdFelFsaFdiWFJoWkRGV1YySkdhRTVTUmtwUFdXdGFSMDVXYTNkaFIwWlZUV3RaTWxscmFHOVhiVXAxVVcxb1YxWlhVa2hhUmxwSFkyeGtjMWR0YUU1V2JrSlZWbXBLZDFFeVRYaFRhMlJUWWtkb2FGVnNhRU5WTVZKV1ZtMUdhMVpzVmpSV2JYTTFWVzFLU0U5VVVsWk5ibEpZV1Zaa1YyTXlUa2RTYkhCWFpXdEZkMVpHWkRSVmJWWllWR3RzV0dGNmJHOWFWekUwVGtaa1dFNVlaRnBXYkZwSlZXeG9iMVpIUlhoalJtUmFWa1ZGZUZWVVJtdGpWa1oxVkd4T1UyRXhjRnBXTW5SWFpERldjazFWV2xoaWJGcFhWRlphWVZWR1ZsaGxTRnByVFd0d1IxWlhlRXRoVmtwV1kwWmtXR0pIVGpOVWExVjRZekZXV1dKSGNGUlNia0pSVjFab2QyTXlWa2RpU0ZacVVqQmFWMVZxUWxwTmJHeHlWMnRrVjFKc2NGZFViRlpQVjBkR2NsTnVjRlpoTVhCSVZqQmFkMUp0VGtkVGF6VlRWMFZLV0ZadGRGTlRNbEY1Vlc1S1QxZEZjRkZXTUZaaFkwWndXR1ZJWkZaV2JYaFpWRlZTVTFSdFNrZFNhbFphVFVkb2FGWkVTa2RPYlVwSllVWndhV0pyU205V2JURjZaVVphY2sxV2FFOVdhelZVV1ZSR2RtVnNXbGhsUjBaVVRWVndlbFp0TlV0V01rcEdUbFpTVjJKWVVqTlZha1poVjBkU1IxcEdXazVXV0VKWlZsUktNRmxXV25SU1dHaFlZVE5TVjFaclZrdFRSbXgwWlVVNVYySkdTbmxWTWpGSFZHeEplbUZGV2xkV2JIQnlXVlJHVDJNeFNsbGFSazVwVmtaYVZsWnRlR0ZaVmxwSFZtNU9XR0V6VWxSWmExcGhaVlphZEdWRk9WWk5WbkI1V1RCV2ExWXhXWHBWYkdoWFZrVmFURlpxUms5amJHUnpWMnhrVG1KRmNFMVdiRnBUVVRGSmVWTnVUbFZpUm5CV1dWUkNkMkZHVWxaYVJGSlRWbXhhV0ZkclpEQldSMHBHVm1wT1ZtSlVRWGhXYTFwaFZtczFWbFJzYUdoaE1IQTJWbGQwWVZJeVRYaFNiazVYWVhwV1ZGVnFUbTlWTVZwMFpFWk9VbUY2VmxoV2JYUnJWbXhrU0ZWc1JsWmhhM0JVVlhwR1YxWldSbkphUjJ4cFVsUldXRlpyWkRCVE1XeFdUVlZvYkZKV1dsZFdiVEZUWTJ4VmVXVkZkR3BoZWxaWVZtMTRhMVl4U2xkalJrWlhZbGhTYUZadE1WZFNNVloxVkd4YWFWSnVRbEJXYlhoVFZqRmFjMWR1VGxaaE1sSldWRlphZDFOR1duUmpSbVJXWWtac05WWlhkREJXYkZwelUydFNWMUpXY0ZCV2JYaFRZMnhPZEZKck5WTk5NbWhIVm14YVlXRXlSWGhVYms1VFYwZFNWRmxzVWxkV1ZscHpWbFJHVWsxWFVuaFZWelZQVlRGS2NsZHNiRmhoTVZvelZsZHplRkpzWkhWV2JGcE9WbXh3VVZaV1pEUmtiVkY1VTJ0YVZtSkZjRmhVVjNoTFZFWmFWMVZyVGxOTmEzQjZWa2Q0WVZaWFJYZGpSMmhWVmxkUk1GVnNXbGRXTVhCSVpFWlNhVkpXV1hwV1Z6QjNUVlphUjFkc1drOVdWVFZaV1ZkMFMyVnNWbkpYYTJSWVVtNUNSMWt3V2t0VWJFcFhZMFJHVjFaRldsaFdSRVpIWXpKSmVscEhiRk5XYTNCVVZtMXdTMVV4VFhoV2JGWlNZVEpTY0ZsclZURldNVnBJWkVWMFdsWlVSa2xhVlZaWFZteGFkRlZ1U2xaTmJtaEhXa1JHUzJSRk5WZFZiR1JYVmtaYVJWWnFTbmRSTWsxNFUydGtVMkpIYUdoVmJHaERWVEZTVmxadFJtdFdiRlkwVm0xek5WVnRTa2hQVkU1YVlURmFWRlpYZUZwbFZsWnlaRVphVjFKVmNFbFhWekUwVkRGYWMxVnVTbFJpVlZwUFZXcE9iMUpzV2xkWGJYUm9UVlUxZWxWc2FHdFZNa3BWVm14V1YySkdWWGhWVkVaclkxWkdkVlJzVGxOaE1YQllWa2Q0VjFVeVJrZFhiRnBZWW14YVYxUldXbUZWUmxaWVpVaGFhMDFyY0VkV1YzaExWakF4YzFOcmVGZFdiRXBFVldwS1MyTXhVbk5YYkZab1RVaENiMVpHVm10T1JrcFhWbXhrWVZJelVsVlphMVpYVFRGV2RFMUVSbGRTYkhCWFZHeFdUMWRIUm5KVGJuQldZVEZ3U0ZZd1duZFNiVTVIVTJzMVUxWnVRWGhXYkZKSFZqRlJlRkp1VG1sTk1sSndWV3hhUzFVeFduRlRiRTVVVFZaYVZsVlhkR3RoVjBwR1RsWmtWMUl6VWt4WFZsVjRVMGRXUmxac1dsZGlWa3A1VmxSS05GSnRVWGhUYmxKUFZteEtXRlpzVWxkU1JsbDVZMFZPYWsxVmNFaFZiWGh2V1ZaS1dWRnNUbFZXVmxwb1drWmFWbVZHV25KUFZrcHBVbnByZWxkWGRGZFZNVlp6VjFoc1ZtRXpVbGRXYTFaTFUwWnNkR1ZGT1ZkaVJrcDVWVEl4UjFSc1NYcGhSVnBYVm14d2NsbFVSazlqTVVwWldrWk9hVlpHV2xaV2JYaFdUVlpGZUZwSVJsSmlhelZVVlcxMFlWZFdaSEpXYm1SV1lYcEdSMVl5TlZkV2F6RlhWMnhDVmxZemFESmFSRXBMVW14V2MxTnNaRTVpUlhCTlZteGFVMUV4U1hsVGJrNVZZa1p3VmxsVVFuZGhSbEpXVjJ0MFZrMVhlSGhWTWpFd1ZrZEtSbFpxVGxaaVZFRjRWbXRhWVZack5WWlViR2hvWVRCd05sWlhkR0ZTTVdSSFkwVmFhbEpyY0U5VmJGcDNUVlphVlZKc1pGVk5WVnA2V1dwT2EyRldTbGRUYkU1WFlXdHdWRlY2UmxkV1ZrWnlXa2RzYVZKVVZsaFdhMlF3VXpGc1ZrMVZhR3hTVmxwWFZtMHhVMk5zVlhsbFJWcHJUVlZ3TUZSc1dsTldNVnBWVm10U1YwMXVRa1JaZWtaTFVqRktjMkZIUmxOWFJVcFVWa1pXVjFsWFVsZFdXR2hYWVhwc1UxbHJZelZOTVd4eVZteE9WbUpHYkRWV1YzUXdWbXhhUmxOcmFGcGlXR2hRVm0xNFUyTnNUblJTYXpWVFRUSm9SMVpzV21GaE1rVjRWRzVPVTFkSFVsUlpiRkpYVmxaYWMxWlVSbEpOVjFKNFZWYzFUMVV4U25KWGJHeFlZVEZhTTFaWGMzaFNiR1IxVm14YVRsWnNjRkZXVm1RMFpHMVJlVk5yV2xaaVJYQllWRmQ0UzFSR1dsZFZhMDVUVFd0d2VsWkhlR0ZXVjBWM1kwZG9WVlpYVVRCVmJGcFhWakZ3U0dSR1VtbFNWbGw2Vmxjd2QwMVdXa2RYYkZwUFZsVTFXVmxYZEV0bGJGWnlWMnRrV0ZKdVFrZFpNRnBMVkd4S1YyTkVSbGRXUlZwWVZXMHhVbVZHVWxsYVIyeFRWbXR3VkZadGNFdFZNVTE0Vm14V1VtRXlVbkJaYTFVeFZqRmFTR1JGZEZwV1ZFWkpXbFZXVjFac1duUlZia3BXVFc1b1IxcEVSa3RrUlRWWFZXeGtWMVpHV2tWV2FrcDNVVEpOZUZOclpGTmlSMmhvVld4b1ExVXhVbFpXYlVaclZteFdORlp0Y3pWVmJVcElUMVJPV21FeFdsUldWM2hhWlZaV2NtUkdXbGRTVlhCSlYxY3hORlF4V25OVmJrcFVZbFZhVDFWcVRtOVNiRnBYVjIxMGFFMVZOWHBWYkdoclZUSktWVlpzVmxkaVJsVjRWVlJHYTJOV1JuVlViRTVUWVRGd1dsWXlkRmRrTVZaeVRWVmFXR0pzV2xkVVZscGhWVVpXV0dWSVdtdE5hM0JIVmxkNFMxWXdNWE5UYTNoWFZteEtSRlZxU2t0ak1WSnpWMnhXYUUxSVFtOVdSbFpyVGtaS1YxWnNaR0ZTTTFKVldXdFdWMDB4Vm5STlJFWlhVbXh3VjFSc1ZrOVhSMFp5VTI1d1ZtRXhjRWhXTUZwM1VtMU9SMU5yTlZOV2JrRjRWbXhTUjFZeFVYaFNiazVwVFRKU2NGVnNXa3RWTVZweFUyeE9WRTFXV2xaVlYzUnJZVmRLUms1V1pGZFNNMUpNVjFaVmVGTkhWa1pXYkZwWFlsWktlVlpVU2pSU2JWRjRVMjVLVUZacmNFOVpiR2h2VWtaWmVXTkZUbXBOVlhCSVZXMTRiMWxXU2xsUmJFNVZWbFphYUZwR1dsWmxSbHB5VDFaS2FWSjZhM3BYVjNSWFZURldjMWRZYkZaaE0xSlhWbXRXUzFOR2JIUmxSVGxYWWtaS2VWVXlNVWRVYkVsNllVVmFWMVpzY0hKWlZFWlBZekZLV1ZwR1RtbFdSbHBXVm0xNFZrMVdSWGhhU0VaU1ltczFWRlZ0ZEdGWFZtUnlWbTVrVm1GNlJrZFdNalZYVm1zeFYxZHNRbFpXTTJneVdrUktTMUpzVm5OVGJHUk9Za1Z3VFZac1dsTlJNVWw1VTI1T1ZXSkdjRlpaVkVKM1lVWlNWbHBFVWxOV2JGcFlWMnRrTUZaSFNrWldhazVXWWxSQmVGWnJXbUZXYXpWV1ZHeG9hR0V3Y0RaV1YzUmhVakZrUjJORldtcFNhM0JQVld4YWQwMVdXbFZTYkdSVlRWVmFlbGxxVG10aFZrcFhVMnhPVjJGcmNGUlZla1pYVmxaR2NscEhiR2xTVkZaWVZtdGtNRk14YkZaTlZXaHNVbFphVjFadE1WTmpiRlY1WlVWYWEwMVZjREJVYkZwVFZqRmFWVlpyVWxkTmJrSkVXWHBHUzFJeFNuTmhSMFpUVjBWS1ZGWkdWbGRaVjFKWFZsaG9WMkY2YkZOWmEyTTFUVEZzY2xac1RsWmlSbXcxVmxkMFlWWXhXblJVVkVaYVlsaG9VRlp0ZUZOamJFNTBVbXMxVTAweWFFZFdiRnBoWVRKRmVGUnVUbE5YUjFKVVdXeFNWMVpXV25OV1ZFWlNUVmRTZUZWWE5VOVZNVXB5VjJ4c1dHRXhXak5XVjNONFVteGtkVlpzV2s1V2JIQlJWbFprTkdSdFVYbFRhMXBXWWtWd1dGUlhlRXRVUmxwWFZXdE9VMDFyY0hwV1IzaGhWbGRGZDJOSGFGVldWMUV3Vld4YVYxWXhjRWhrUmxKcFVsWlplbFpYTUhkTlZscEhWMnhhVDFaVk5WbFpWM1JMWld4V2NsZHJaRmhTYmtKSFdUQmFTMVJzU2xkalJFWlhWa1ZhV0ZaRVJrZGpNa2w2V2tkc1UxWnJjRlJXYlhCTFZURk5lRlpzVmxKaE1sSndXV3RWTVZZeFdraGtSWFJhVmxSR1NWcFZWbGRXYkZwMFZXNUtWazF1YUVkYVJFWkxaRVUxVjFWc1pGZFdSbHBGVm1wS2QxRXlUWGhUYTJSVFlrZG9hRlZzYUVOVk1WSldWbTFHYTFac1ZqUldiWE0xVlcxS1NFOVVUbHBoTVZwVVZsZDRXbVZXVm5Ka1JscFhVbFZ3U1ZkWE1UUlVNVnB6Vlc1S1ZHSlZXazlWYWs1dlVteGFWMWR0ZEdoTlZUVjZWV3hvYTFVeVNsVldiRlpYWWtaVmVGVlVSbXRqVmtaMVZHeEthR1ZyV2toWGExWlhaREZXY2sxVldsaGliRnBYVkZaYVlWVkdWbGhsU0ZwclRXdHdSMVpYZUV0V01ERnpVMnQ0VjFac1NrUlZha1pTWlVaS1dXSkhiRk5XV0VKdlZrWldhMDVHU2xkV2JHUmhVMFUxVlZsc1ZtRldNV3h5WVVkMFZrMVZjSGxXTW5CTFZqRkplbFZzUW1GU1ZuQllXa1ZrVjFOR1NuUmhSbVJYVm5wcmVsWnRjRWRaVjBWNVZGaHNWbUpHY0hKVmJGcExZakZ3V0dWSVpGTldiSEJXVlZkMGEyRlhTa1pPVm1SWFVqTlNURmRXVlhoVFIxWkdWbXhhVjJKV1NubFdWM2hoVmpGa1JrOVdhRTlXYkVwWVZteFNWMUpHV1hsalJXUnJUVlUxU1ZVeWRITmhiRWw2VVd4U1ZWWkZjSFphUjNocll6RmtjMk5GT1ZkTlJuQktWbXRhYjJNeFdsaFRia3BVWWxSc1dGbHNhRU5sYkd4eFVtNUtiRlpVVmxoVk1qRnpWR3hPUjFOc1VsZFNiRnBZVkZWYVMxWXhXbk5oUmtKWFpXeGFWbFp0ZUZaTlZrVjRXa2hHVkdKRk5WbFdiWGhMVFVad1ZscElaR2hXYkhCSVZqSTFZVmRHV1hwaFNFcFhZbGhvTWxwVldrZGpNVlp6VTIxc2FFMUlRak5XTVdONFRVWk9kRlpyWkdwU1ZuQldXV3hTVjJJeFduUk5WemxUWWtaYVdGbFZhR3RXVjBZMlVteHdWMUl6UW1oV2JGcGhUbXhHY1ZWc2FGZGxiRnA1VjJ4V1lXUXhUa2RXYmtwcVVtczFjRmxzV2tkT2JGcHlWMjA1YTAxV1JqUlphMmhMVkd4YVIyTkdiRnBpV0doTVZtdGFZV1JYVGtkWGJYUk9WakZLTmxkV1ZsZGtNV3hXVFZoT1ZHRXllR0ZXYkdSU1RVWlZlV1ZGT1ZOTlZUVXdWREZhZDFSdFJuSlhibXhZVmpOU2NsWlVSa3RTTVVwMVUyMXdVMkpJUWxWWFZ6QjRWVzFXYzFkclpHaFRSMUpXVkZaa05HVldVbGRWYlVaV1RXdHdlbFV5ZERCV2JGcEdVbXBPV2sxdWFGQldNR1JMVTFaT2MxWnRhRTVTUmxsNlZteGFZV0V5UlhoVWJrNVRWMGRTVlZsWGN6RlpWbXhZWTNwR1ZWSnNTbGRXYlRWUFZURmFWVkpyYkZoaE1sSjJWbXBLVjJNeFpGbGpSbWhvVFZoQ01sWnNZM2hUYlZGNVUydHNWV0pZVWs5VVYzaExWVVprYzFwSWNFNVdNRnBZVmxkNGMyRnNTbGxWYmtwV1lsUkdUMVJWV2xkT2JFNVZVbXhvVjJKSVFYaFdNblJUVkRGYVYxcEZiRkppUlVwWlZtcE9UMDVHVW5SbFJrNXJWbXhhZVZrd1dsTlZNVnBZVDFSV1YwMVdTa3RVVmxwV1pVZEZlbHBGTlZkV2JIQlhWbXBDYjFFeFpGZGpSbWhxVFRKb1VGVnRNVFJsYkZwSVpFVjBhRkl3Y0VkVk1qVnJWbXN4V0dGRlVsWmlSbkJZVmpCVk5WZEZOVmRWYkdSWFZrWmFSVlpxU25kVE1WRjRWR3hrVldKc1dsTlpiR1EwWTBac2NsWnRSazVpUm13MVZGWm9UMVpGTVZoa1JFNVZWbXhhV0Zac1dtdFRWa1p6WWtkR1YwMHdOREJXUjNSaFl6Sk5lRnBJVGxWaVYzaFBWakJXUzFac1dsZGFSRUpWVFZkNFdGWXhhSE5XYlVwMFZXMUdXbUpHU2tOYVZWcHlaREZ3Um1SSGRGTmlXRkV4VmpKMGEyTXhVblJUYTJoc1UwWmFXVmxVUm1GamJHeHhVMnQwVTJKVmNFZFdNbmhQWVVkRmQyTkliRmRXTTBKRVYxWmtUMVl5U2tkaVIyeFRWbFJXYUZaR1ZsTlNNVXB6VjJ0a2FGTkhVbGxWYWtaaFpWWlNWbUZJWkZoaVZYQkpWMnBPYTFaV1duUlZhemxoVm14d2FGcEdaRXRUUjBwSVlrWmtWMkpVYTNwV2JYQkxUa2RLZEZWWWJGTmlSbkJ5VlcxMGQxUXhWbk5oUms1VFlrWndXRmRZY0ZkaFYwcEdUbFprVjFJelVreFhWbFY0WTJ4a2MySkdWbGRpVmtveVZqRmFWbVZIVFhoYVNFWllZa1pLV0ZadGRGcGxiRmw1WTBWa2FHSldXbGhYYTFwdldWWkpkMWR1UWxkaE1sRjZWRlphVm1WR1duUmtSbWhwVW5wck1WWlhNVFJpTVZGNFUxaHNWbUpyU2xaV2ExWkhUa1pTVjFkdVRtcGlTRUpLVmtjeE5HRldXbkpqUlhCWFlrZE5lRlZVU2tka1JrcHpZVWRvVTFkR1NsbFdWekUwV1ZaT1IxWllaRmhoTTFKWVZGVlNjMVl4WkhKWGJHUlZZa1UxU1ZsVlZtdFdNVmw2WVVkb1ZrMXFSbEJWYlRGTFVtMUdTR0pHVG14aE1YQk5WbXhrZDFJeVRYZE5WbVJoVTBVMVlWcFhkR0ZpTVZKWVl6Tm9UMkpIVW5sWlZWWlBZVVV4Vm1KRVZsaGhNbWhvVm10VmVGSnJOVmxTYlVaVFlsWktVVlpVUWxaTlZtUkdUbFphYTFJemFGbFZha1pMVFZaYVZWTlVSbXBoZWtaWlZrZDRiMVpYUlhsaFIwWlZWak5DV0ZaSGVGZFdWa1p5V2tkMFYySkZjRXBXUmxwdllUSkZkMDFXYkZKaVIzaFpWbXRXY21WR1drWlhiRnBzVmpGYVNWcEZXazlWTWtWNFlqTnNWMkV5VVhkV1JFcFBVakZLYzJGSFJsTlhSVXBVVmtaV1YyTXdOWE5hUm1SWVlsUnNWMVJYZEhOTk1XeHlWbTEwVjJKVmNGWlphMmhIVjIxS1IyTkhhRnBoYTFweVdUSjRhMk5zVW5Sa1IyeFhWak5qZUZZeWVGZFdNV3hZVTJ0a1ZGZEhhRmxaYlhSaFlVWldkRTFYT1ZkU2JrSkpWRlpWTldGc1NuUlBWRnBXVmpOU00xWlVRWGhTTWtvMlUyeGFUbFpzY0hsV2JYQkNUVlpKZVZSclpHaFNiRnB2V1ZSR2QyVldXbGhPV0dScVRVUldXRlpXYUhOWGF6QjVWV3hXVlZaWFVUQlZiRnBYVmpGd1NHUkdVbWxTVmxsNlZsY3dkMDFXV2tkWGJGcFBWbFpLWVZsclpGTldSbGw0VjJ4a2FsWnJjREJaTUdSelZqSktTRTlJYkZkV1JWcFlWbGN4VW1WSFNYcGlSbVJZVWpOb1dWZFdaRFJUTWtaSFYyNUdVbFpGU25OVmJUVkRVakZrV1dOR1pHbFNiSEJhV1ZWU1IxWXhTWHBSYTJoWFRXcEdURlpzV2t0a1ZuQklVbXhPVjFaR1dYbFdNbmhyVGtkUmVGcEZXazlXYldoeVZXMHhORlF4YkhOaFJ6VnJUVlpzTkZZeU1UQmhSVEZ5WTBWa1lWWldXbFJXVnpGTFl6Sk9TVkp0UmxkaVJYQlpWa1pTUjJFeFdYbFNhMlJWWWxkNFQxVXdaRzVrTVdSVlVXMDVXbFl3V2toV01uQmhWbTFLYzJOR1pGVldiSEJZVkd0YVYxZEhWa1pqUjNST1ZtNUJkMVpxU2pSVU1rWklWbTVTYkZKVWJGaFdhazVUVjBaYWNWSnNXbXROYkZwSFZsZDRTMkZYUlhkalNHUlhZbGhDUkZkV1pGTldNWEJKVkd4V2FXRXpRbmhXUmxaclRrWk9WMWRyYUU1U1JscFpXV3RrVTFOR1ZYbE5TR2hZWWtad01GWlhlRTlYYlZaeVUyNXdWazFXY0doYVJtUlBVMFpLYzJGR1RsaFNWVmt3Vm0xd1IxbFhSblJXYTJoVVlURndjbFZ0ZUdGalJsSllUVlpPYVUxV2NERlpNRlpyWVZVeFdGVnVhRlpOYm1ob1YxWlZlRmRXUm5GUmJGWk9WakpvTmxaVVNqUlRiVkYzVGxac1dHSkhhRmhaYkdSdlZsWlplVTFJYUZOTlYxSklWbTE0YjFsV1NYbGhSbWhoVmpOb1RGcEdXbUZXTVZaeVZHMXNUbFpXY0RaV2Frb3dZVEZXUjFkc2JGSmlSa3BYV1d4b1QwNUdiSFJsUjNSclVsUkdSbFp0TVRSV01WbDZZVVZ3V0ZZelVuWldWRVpyWXpGa1dXSkdXbWxoZWxaV1ZtMTRhMVV5Vm5OalJXUlhZbXMxVlZWcVFuZFRiRnBZWlVoa1YwMUVSbnBWTWpWM1YwWmtTVkZyT1dGU1JWcFVXVEo0VTJSV1JuTlRiR1JPWWtWd1RWWnNXbE5STVVsNVUyNU9WV0pHY0ZaWlZFSjNZVVpTVjJGRlRrNVNiRVkwV1ZWb1QxWkhTa1ppUkZKYVlXczFkbGRXV2t0WFIwWkhZVWRHVjJKSVFYcFdiWFJoVWpKU1YxSnVVbWxTTW1oWVZteG9RbVF4V1hsa1IwWnBUVlpXTTFSV1dtOVdWMHB6VTJ4b1dtSlVWa1JXVmxwclpGZE9SbFJzVmxOaGVsWllWbXRrTUZNeGJGWk5WV2hzVWxaYVYxWnRNVk5qYkZWNVpVVmFhMDFWY0RCVWJGcFRWakZhVlZaclVsZE5ia0pNVldwR2ExSnJNVmRoUjJoVFRVWndVRmRYZEdGa01sSkhXa1pvVGxOSGFGUlVWM2hMVTBacmQxZHNUbFppUm5CSldsVldNRlp0Um5KWGFrcGhWbFp3TTFWdE1VZFNNWEJJWlVaa2FXRXdjR2hXYlhScVpVWk5lR0pHYUZSaWF6VlpWakJrVTJGR1ZuUk5WemxWVW0xNGVWWXlNRFZXYlVZMlVtdGtZVkpXV2pOV1YzTjRVbXhrZFZac1drNVdiSEJSVmxaa05HUnRVWGxUYTFwV1lrVndXRlJYZUV0VVJscFhWV3RPVTAxcmNIcFpNRlpoWVVaS1dWVnNRbGRpUmtwNldrWmFVMVpzV25GUmJGSnBVbFpaZWxaWE1IZE5WbHBIVjJ4YVQxWlZOVmxaVjNSTFpXeFdjbGRyWkZoU2JrSkhXVEJhUzFSc1NsZGpSRVpYVmtWYVdGWkVSa2RqTWtsNldrZHNVMVl5YUZwWFZtUXdXVmRPYzFaWVpGaGlWVnBRVm0weFUyVnNXa2RWYTJScFVteHdNVlZYZUhkV01VbDZVV3RvV2xac2NGQlZha1pMWkZaa2MxVnJOVmRXYkd3MlZteG9kMUV5VFhoVGEyUlRZa2RvYUZWc2FFTlZNVkpXVm0xR2ExWnNWalJXYlhNMVZXMUtTRTlVVGxwaE1WcFVWbGQ0V21WV1ZuSmtSbHBYVWxWd1NWZFhNVFJVTVZwMFVtdGFWV0pZYUZoVVZWcDNWMnhhU0dWR1RsSk5Wa3BJVlRGb2IyRldUa1pUYkd4V1lrWndURlZVUm5kWFIwMTZXa2Q0VTAxRVJUSlhWRUpXVFZkR1YxZHJXbGhXUlhCWldWUkdZV05zVm5GVGJHUllVbXhhZVZaWGN6VldSa3B6WTBVNVdGWnNjRlJXVkVGNFZqRlNjMkZIYkZSU1dFSlhWMVpTUWsxWFVYaFdiR1JoVWpOU1ZWbHJWbGROTVZaMFRVUkdWMUpzY0ZkVWJGWlBWMGRHY2xOdWNGWmhNWEJJVmpCYWQxSnRUa2RVYXpWWFlsaFJlbFp0Y0VkVk1VMTRWMWhzVmxkSGVGZFpWRVpMVlRGc1ZWSnVaR3BOVmxwNFZWWlNSMkZyTVZoa1JFNWFWbFp3VUZsWGVFcGtNa3BGVm14V2FFMXNTbmxXYWtvMFlURktjazFXYUU5V2JXaHdWVzEwZG1WV1duSmFSRUpWVFdzMVNGVnRlRzlaVmtwWlVXeE9WVlpXV21oYVJscFdaVVphY2s5V1NtbFNlbXQ2VjFkMFYxVXhWbk5YV0d4V1lUTlNWMVpyVmt0VFJteDBaVVU1VjJKR1NubFdSekV3VkcxR05sWllaRmhXTTFKMlZtcEtSbVZHU2xsaVIyaFVVbXR3VmxadGNFOWliVlp6WTBWV1VsZEhhRkJaYTFwTFRVWlZlV042Um1sU01GWTBXV3BPYTFZeFdYcGhTRnBXWld0d1dGWXdXazlYVjA1SFZXeGtUbUp0YUU5V2JYaGhWVEZGZUZWclpGVmlSbkJXV1ZSQ2QyRkdVbFphUkZKVFZteGFXRmRyWkRCV1IwcEdWbXBPVm1KVVFYaFdhMXBoVm1zMVZsUnNhR2hoTUhBMlZsZDBZVkl4WkVkalJWcHFVbXR3V0ZWc1ZuZFViRnBWVW14a1ZVMVZXbnBaYWs1cllWWktWMU5zVGxkaGEzQlVWWHBHVjFaV1JuSmFSMnhwVWxSV1dGWnJaREJUTVd4V1RWVm9iRkpXV2xkV2JURlRZMnhWZVdWRk9WTmlSVFY0Vm0xNGQxWXlTbFpOVkZKWFVteGFhRmx0TVZkV2F6RlhZVWQ0VTAwd1NsQldSbFpUVmpKU2MxZFliR3BTV0ZKWVZGWm9RMDFHV2xkaFNFNW9WbXR3UjFVeU1EVldiVXBaVVc1d1lWSkZXbnBhUlZVeFZqRlNkR0pHVGs1U1JsWTBWbTF3U21WSFNYbFNiR1JUVjBkNGIxVXdXa3RXVmxweFZHMDFiR0pJUWtaVlZtaHZWREpLUjFOcVFsWk5iazE0V1d0a1JtVnNSbGxhUm1ScFYwWktlVlpYY0V0V01WbDVVMWh3YVZKdFVtOVpWRUozVld4a1YxZHNaRlJoZWtJMFdUQldhMkZHU2xWaVNFSldZV3RGZUZSVldsTmpNWEJJVDFkb1YySkhkekJXYWtaVFZqRmFSMWRzYUdoU1ZrcG9WVzV3UjFWR2NFZFhiR1JYVm0xU2VWa3dXbE5XUmtweVlrUmFWMDFYVWpOV1JFWk9aREF4Vm1GR2FHbFNhM0JXVm1wQ1ZrMVdUWGhXYmtwWFlUSlNUMVp0ZUV0V01WcElZMFU1V2xaVVJrWlZiWGhoVm14YWRHRklTbGRTTTJoTVZXMTRTMk5XVW5OV2JHUlhZVE5DUlZZeWRGTlJiVlpIVTJ4a1UySkhlR2hWYkZKWFZrWldjMVpzY0d4aVJuQklWbTE0VDFWdFNsZFNhazVWVm14YVdGWlhlR3RUUmxaeVQxWmFhRTFXY0VsV1JsSkhWVEZhYzFadVNsUmlXRkpQVld0V1lWSnNaRmRWYTBwT1ZtdHdTRmt3VW1GVmJVVjZZVWRHVjJKVVJsUlhWbHByWTFaS2RFNVhlRk5XUjNoaFZtMHhOR1F4V1hsV2JrcFlZbTVDV0ZSVldrdFNNVkp5VjI1YWJGSnJXbnBXYlhNeFZUQXhjMU5yZUZoV00xSlVXWHBLUzFZeVNrbFViVVpUVmpGS2VGWlhjRU5rTWxaelZWaG9ZVkl3V2xWWmJGWmhUVVpSZUZaVVZsWmhla1l3V2xWV1QxZEhSbkpUYm5CV1lURndTRnBHV2xkak1rNUhXa1UxYVdKWFVUQldiR2gzVVRGUmVWUnVUbFppYTNCV1dXeFNWMVZzV25KVmEwNXFVbXN4TkZWdE5XdGhWa2w0VjJ0c1YySlVSak5XUlZwS1pESk9TRTlXY0d4aE0wSllWa1prZWsxV1NrWk9WbWhwVWxSc2IxbHJWbmRsVmxsNVpVZDBWVTFzU25wWk1GWnZWakZhTm1KSVRsWldSVzkzV2tSQ2MyTkhSWGRrUjBaWVVqSm9lbFl4YUhOaU1rWlhZa1pzVldKWWFGQlpWM2hIVFZaa1dHTkdjRTVTYmtKSlZtMHhkMkZWTVhOVGJrNVVUVWRvZFZrd1ZqQlZiRUpWVFVkc1RGVllRbk5hVldSWFlXdDBTRk50YUdwTmJGVjVWR3ROTVdGVk5YRlZiWFJoVmpBMU1sZHJaRlppTWxaRVlUTkJhVXRSY0d4bFIxWnFTMGRLYUdNeVZUSk9RelZwVG1wU2ExcFhUblphUjFWdlpVTnJjQ0lwQ21WNFpXTW9ZbUZ6WlRZMExtSTJOR1JsWTI5a1pTaDRLU2s9IikKZXhlYyhiYXNlNjQuYjY0ZGVjb2RlKHgpKQ==")
exec(base64.b64decode(x))")
exec(base64.b64decode(x))